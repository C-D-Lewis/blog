[
  {
    "id": "2",
    "title": "Here it is",
    "link": "https://ninedof.wordpress.com/2013/03/21/here-it-is/",
    "pubDate": "Thu, 21 Mar 2013 15:16:22 +0000",
    "postDate": "2013-03-21 15:16:22",
    "body": "<p><img class=\"size-full wp-image\" id=\"i-19\" style=\"font-style:normal;\" alt=\"Image\" src=\"http://ninedof.files.wordpress.com/2013/03/blogcode.png?w=340\" /></p><p>So I've finally started that blog idea I'd had my eye on for a while - a place to document all the thoughts, processes and results of my attempts at programming. Sure, its been done before, but isn't that the idea of a blog, to be personal? </p>",
    "tags": [
      "Uncategorized"
    ]
  },
  {
    "id": "25",
    "title": "Current Projects",
    "link": "https://ninedof.wordpress.com/2013/03/24/current-projects/",
    "pubDate": "Sun, 24 Mar 2013 18:46:41 +0000",
    "postDate": "2013-03-24 18:46:41",
    "body": "<p>At the moment I'm working on a few project-in-progress, which are listed below. As a general rule, I like to do everything from scratch if I can help it. Unfortunately this results in sometimes inefficient or just plain wrong coding practices and slow progress, but everything I learn on one project tends to get used straightaway in the next, resulting in a sort of 'standing on the shoulders of giants' effect. Anyway, here's the list:</p><p><a href=\"http://ninedof.files.wordpress.com/2013/03/dungeons.png\"><img class=\"size-full wp-image\" id=\"i-39\" alt=\"Image\" src=\"http://ninedof.files.wordpress.com/2013/03/dungeons.png?w=487\" /></a></p><ul><li><span style=\"line-height:14px;\">'dungeons' (Working Title) - A simple 2D top-down Java dungeon crawler used as a vehicle for exploring procedural generation of game maps, enemy AI and game development in general.</span></li></ul><p><a href=\"http://ninedof.files.wordpress.com/2013/03/imageanalyser.png\"><img class=\"size-full wp-image\" id=\"i-41\" alt=\"Image\" src=\"http://ninedof.files.wordpress.com/2013/03/imageanalyser.png?w=487\" /></a></p><ul><li>'ImageAnalyser' - A scalable Java image analyzer that will find the one or three brightest areas of an image, and return the locations of these, the average brightness of the image and a bearing clockwise from north towards the brightest area. This was used on a recent University project that involved developing an automated tracking system for guiding a quadcopter to an arbitrary target. More details when I write that one up. </li></ul><p><a href=\"http://ninedof.files.wordpress.com/2013/03/pea.png\"><img class=\"size-full wp-image\" id=\"i-44\" alt=\"Image\" src=\"http://ninedof.files.wordpress.com/2013/03/pea.png?w=487\" /></a></p><ul><li>'PEA' - An attempt to implement a larger game world, while showing only the player's range of sight withing the game window. This involves turning world coordinates into on-screen pixel coordinates, and at last count, also a set of mini-map (showing all world space) coordinates in the corner.</li><li>'FilingCabinet' - Undoubtedly been done before, but more for personal use. Inspired by the brief structure thrown together for humorous purposes in the first post, a command line way of organizing 'notes' within virtual filing cabinet 'drawers', mainly an exercise in managing file system files. </li></ul>",
    "tags": [
      "Java"
    ]
  },
  {
    "id": "62",
    "title": "Filing Cabinet Initial Release",
    "link": "https://ninedof.wordpress.com/2013/03/25/filing-cabinet-release-v0-1/",
    "pubDate": "Mon, 25 Mar 2013 18:43:34 +0000",
    "postDate": "2013-03-25 18:43:34",
    "body": "Just for laughs, here is a release for the Filing Cabinet. Its pretty basic software, but I've been using it to organize notes that were previously fragmented between Google Tasks, Windows 7 Sticky Note gadget and a plain text file. For me, having these notes all in one place seems like a good idea, and doing it myself helps me learn in the process. Without further ado, <a title=\"here is the link\" href=\"https://www.dropbox.com/s/fn2z12rfd21qkcw/FilingCabinet%20release%200.1.zip\">here is the link</a>.\n\nIf you're Java literate enough to read the source files you may want to figure out how it works for yourself, but if not, here is a brief summary:\n<ol>\n\t<li><span style=\"line-height:12px;\">All 'notes' are an Entry. These have three fields: ID, Label and Content, all represented as strings. These fields are saved in a '.entry' file.</span></li>\n\t<li>All 'drawers' in the Filing Cabinet are Drawers. These can have any number (though at the moment set to 100) of Entries, and manage creating, listing and deleting individual Entries. These are identified in the respective folder via a '.drawer' file.</li>\n\t<li>The 'Filing Cabinet' itself manages the drawers (currently six) in the same manner as mentioned above. After each create or delete operation, all entries and drawers are saved to disk in the path specified. The path can be changed using 'change path'. If the path is changed, the existing files are reloaded from disk straight away from the new location.</li>\n</ol>\nThere are quite a few bugs, so please let me know what you find. I'm still adding features, and if it proves useful to me I'll probably make a GUI for it.\n\nEnjoy!",
    "tags": [
      "Releases"
    ]
  },
  {
    "id": "75",
    "title": "A Brief Overview of 'dungeons' so far",
    "link": "https://ninedof.wordpress.com/2013/03/27/a-brief-overview-of-dungeons-so-far/",
    "pubDate": "Wed, 27 Mar 2013 01:11:21 +0000",
    "postDate": "2013-03-27 01:11:21",
    "body": "'dungeons' is the 2D dungeon crawler I<a title=\"Current Projects\" href=\"http://ninedof.wordpress.com/2013/03/24/current-projects/\"> mentioned earlier</a>. The main focus is on procedural generation of 'levels' with a number of randomly scattered features; rooms, keys, gold and enemies, for the moment.\n\nAt the moment, when a level is generated, the following events occur:\n<ol>\n\t<li><span style=\"line-height:12px;\">Rooms are generated with a random size in random locations. Each room has a random number of doors cut into the walls. <a href=\"http://ninedof.files.wordpress.com/2013/03/doors1.png\"><img class=\"aligncenter  wp-image-127\" alt=\"doors\" src=\"http://ninedof.files.wordpress.com/2013/03/doors1.png\" width=\"430\" height=\"209\" /></a></span></li>\n\t<li>The each door is randomly connected to another randomly chosen door using a simple implementation of A* Pathfinding (<a title=\"inspired from this helpful article\" href=\"http://www.policyalmanac.org/games/aStarTutorial.htm\">inspired from this helpful article</a>). After being connected, the door is marked as such, so that it cannot be chosen again. This has two downsides: 1 - There will always be a door that is the last one standing and permanently unconnected. This could be a room with one door. 2 - Paths cannot currently overlap, so it is somewhat messy.<a href=\"http://ninedof.files.wordpress.com/2013/03/connected-doors1.png\"><img class=\"aligncenter size-full wp-image-128\" alt=\"connected doors\" src=\"http://ninedof.files.wordpress.com/2013/03/connected-doors1.png\" width=\"545\" height=\"265\" /></a></li>\n\t<li>The middle start area of each level is created at the center. This contains the up and downstairs to the previous or next level. The top most level never has an upstairs, for obvious reasons.<a href=\"http://ninedof.files.wordpress.com/2013/03/stairs.png\"><img class=\"aligncenter size-medium wp-image-80\" alt=\"stairs\" src=\"http://ninedof.files.wordpress.com/2013/03/stairs.png?w=300\" width=\"300\" height=\"260\" /></a></li>\n\t<li>Gold is scattered around for points, keys are scattered around to unlock the trapdoor leading down to the next level. Both are spawned only within rooms, and having more than one key (currently up to five) combats the first disadvantage mentioned in point 2 above.<a href=\"http://ninedof.files.wordpress.com/2013/03/keysandgold.png\"><img class=\"aligncenter size-medium wp-image-79\" alt=\"keysandgold\" src=\"http://ninedof.files.wordpress.com/2013/03/keysandgold.png?w=300\" width=\"300\" height=\"152\" /></a></li>\n\t<li>The corridors and room walls are decorated, sort of <a title=\"Dungeon Keeper styel\" href=\"http://image.com.com/gamespot/images/screenshots/8/176198/dkeeper2_screen006.jpg\">Dungeon Keeper style</a>. This is done by recognizing the 'passability' of tiles surrounding each tile and deciding on which type of layout it is. An example is a right hand corner.<a href=\"http://ninedof.files.wordpress.com/2013/03/decor.png\"><img class=\"aligncenter size-medium wp-image-78\" alt=\"decor\" src=\"http://ninedof.files.wordpress.com/2013/03/decor.png?w=300\" width=\"300\" height=\"115\" /></a></li>\n\t<li>Finally, monsters are spawned. These are passed the current level tile data to decide where they can move, and move with a bias towards their current directions rather than turning, so are decorated like zombies for now.<a href=\"http://ninedof.files.wordpress.com/2013/03/zombs.png\"><img class=\"aligncenter size-medium wp-image-82\" alt=\"zombs\" src=\"http://ninedof.files.wordpress.com/2013/03/zombs.png?w=300\" width=\"300\" height=\"180\" /></a></li>\n</ol>\nWhen the player plays the level, all tiles are hidden except those they have just passed. These are revealed with a cardinal line of sight of 5, then forgotten on a tile by tile basis after five seconds, unless a torch item is placed down. <a href=\"http://ninedof.files.wordpress.com/2013/03/visibility.png\"><img class=\"aligncenter size-medium wp-image-81\" alt=\"visibility\" src=\"http://ninedof.files.wordpress.com/2013/03/visibility.png?w=300\" width=\"300\" height=\"211\" /></a>\n\nThat's all for now. I'll release a playable version as soon as its a bit less buggy and a bit more interesting to play. If you want to play it now anyway, send me a tweet and I'll get back to you soon.",
    "tags": [
      "Java"
    ]
  },
  {
    "id": "104",
    "title": "Android Engine on the way?",
    "link": "https://ninedof.wordpress.com/2013/03/28/android-engine-on-the-way/",
    "pubDate": "Thu, 28 Mar 2013 17:56:48 +0000",
    "postDate": "2013-03-28 17:56:48",
    "body": "For a while I've wanted to make a simple game in Android. I've done simple apps before, such as a scalable test app for A* Pathfinding (which I will write about later) and silly soundboards, but nothing that can actually be played like a game.\n\nThe main element any game needs is a 2D canvas on which all the graphics are drawn. It is understanding how to make one, update the contents and render it that kept me back. I've also created a few simple Live Wallpapers, but with these all the hard work is done for you by extending an existing class, <code>android.service.wallpaper.WallpaperService</code> (and in-turn extending <code>WallpaperService.Engine</code>).\n\nIn order to create an interactive graphical experience outside a pre-built Live Wallpaper Engine, I had to understand how Android handles Canvases, drawing calls and how these are displayed. I had tried doing a similar <code>update() -&gt; render() -&gt; fpsDelay()</code> approach as in my Java games, but an endless loop such as this created in the Constructor of an Android app halts everything.\n\nAnd I mean everything.\n\nYou can't do any other work in an Android app until the Constructor is done, unlike Java. This is because all the drawing activity is done asynchronously AFTER the application has been created (that is, <code>onCreate()</code> has completed).\n\nTo get round this, I found out I could extend <code>SurfaceView</code> and call my <code>update()</code> function in the <code>onDraw()</code> call to keep a cycle going. After some attempts at this, I am pleased to discover it works! Maybe I could make a port of 'dungeons' or something similar...\n\nHere is a screenshot from my AVD (Android 2.3.3 Gingerbread), next to a screenshot from my Galaxy S (Android 4.1.2 Jelly Bean, thanks to <a title=\"Cyanogenmod\" href=\"http://www.cyanogenmod.org/\">Cyanogenmod</a>) running the engine:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/03/enginetestfpsemu.png\"><img class=\"aligncenter size-large wp-image-107\" alt=\"EngineTestFPSEmu\" src=\"http://ninedof.files.wordpress.com/2013/03/enginetestfpsemu.png?w=545\" width=\"545\" height=\"442\" /></a>\n\nYou can see that performance is much greater on actual hardware!\n\nIn the end, the line that gave me most trouble was <em>not</em> including this:\n\n<code>setWillNotDraw(false);</code>\n\nHuh.\n\nI also found that after I'd 'closed' the app, my phone was extremely unresponsive until I re-opened it and killed it manually. Hence, this is needed for now:\n\n<code>\n@Override\npublic void onPause() {\n    finish();\n}\n</code>\n\nWhich causes a Force Close but I can live with that for now. ",
    "tags": [
      "Android"
    ]
  },
  {
    "id": "117",
    "title": "Raiders for Android",
    "link": "https://ninedof.wordpress.com/2013/03/31/raiders-for-android/",
    "pubDate": "Sun, 31 Mar 2013 00:22:33 +0000",
    "postDate": "2013-03-31 00:22:33",
    "body": "After my breakthrough with the primitive game engine for Android in the last post, I've ported and adapted Raiders (still yet to write about!). I'll release it here once its faster, neater and more feature filled, but for now, here is an image!\n\nGame screen:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/03/raider-gameplay1.png\"><img src=\"http://ninedof.files.wordpress.com/2013/03/raider-gameplay1.png\" alt=\"Raider gameplay\" width=\"545\" height=\"327\" class=\"aligncenter size-full wp-image-122\" /></a>\n\nDespite what the screenshot shows (I took it while debugging, which slows the phone down as it reports everything internal to the PC), the framerate I average on my fairly old Galaxy S is around 55 Frames Per Second. I can't wait to try it on a Galaxy S3.",
    "tags": [
      "Android"
    ]
  },
  {
    "id": "133",
    "title": "Raiders for Android Initial Release!",
    "link": "https://ninedof.wordpress.com/2013/03/31/raiders-alpha-release/",
    "pubDate": "Sun, 31 Mar 2013 23:17:45 +0000",
    "postDate": "2013-03-31 23:17:45",
    "body": "<a href=\"http://ninedof.files.wordpress.com/2013/03/raiders-title1.png\"><img class=\"aligncenter size-full wp-image-121\" alt=\"Raiders Title\" src=\"http://ninedof.files.wordpress.com/2013/03/raiders-title1.png\" width=\"545\" height=\"327\" /></a>\n\nAfter much work, I feel that Raiders is ready for an initial release. I've minimised re-allocation as much as I'm able, and separated the calculations and drawing using a new <code>Thread</code>. This actually boosted the framerate on my brother's Galaxy Ace from around 25 to over 50!\n\nI may never get round to posting a summary of the PC version, so I'll do it here. Raiders is a basic arcade-shoot-em-up. The vague plot (if any) is that the player shoots as many enemy ships as possible. As you level up, more valuable ships appear. The score counter counts in the pending score accumulated and multiplies it based on the current Combo value, so if you're on a 4x combo, each point counted in is worth 4 on the main counter. Destroying a ship adds to a 'timeout' counter that has a maximum value of 500 frames, after which the pending score is decimated per frame, and so totted up.\n\nIn its current form there are three enemy ship types and no possibility of player death or winning, just a seven figure score counter. After showing both my parents (who are not gamers at all), they both ended up spending a good five or so minutes shooting ships before they got bored. I consider that an achievement!\n\nHere is a <a title=\"download link\" href=\"https://www.dropbox.com/s/7is07qt9ppex7zr/RaidersAndroid.apk\">download link</a> for a side-loadable .apk. In Android, enable 'Install from Unknown Sources', then open the .apk on the phone. Enjoy!\n\nI'll continue to add more features from the PC version (player and enemy health, more ships, mines, a boss etc) and post the next release here.",
    "tags": [
      "Android",
      "Releases"
    ]
  },
  {
    "id": "146",
    "title": "Why not code to enable easier coding?",
    "link": "https://ninedof.wordpress.com/2013/04/04/why-not-code-to-enable-easier-coding/",
    "pubDate": "Thu, 04 Apr 2013 00:51:35 +0000",
    "postDate": "2013-04-04 00:51:35",
    "body": "In a moment not quite unlike hearing your programming lecturer has written a debugger for debugging a debugger, I decided to have a delve into Swing and AWT to produce a small tool that would enable me to make better use of Eclipse and the Android SDK's features. \n\nWhen I test an Android app, I can see the phone's logcat of events via ADB (Android Debug Bridge). In the past, this has involved using the Android Dropbox app to download the .apk file generated by Eclipse whenever I click 'Run' or 'Debug' onto the phone and installing it. For every revision. This didn't annoy me too much, because I had the Android SDK's Virtual Device Emulator to test apps. This emulator is very slow however, so I only used it for testing for <code>NullPointerException</code>s, which would render the time spent installing a revision via Dropbox a waste of time. \n\nI have recently learned that I can run a new revision directly on the phone wirelessly by using <code>cmd</code> at the Windows Run prompt, then using <code>adb connect address</code>. After doing this, the phone shows up in Eclipse's DDMS perspective, including the logcat!\n\nTherefore, the only logical conclusion is to make a Java application that can do this for me. Presenting the latest in SELNP (Slightly Enhanced Late Night Productivity) technology, 'ADB Connect'!\n\n<a href=\"http://ninedof.files.wordpress.com/2013/04/adb-connect.png\"><img src=\"http://ninedof.files.wordpress.com/2013/04/adb-connect.png\" alt=\"ADB Connect\" width=\"545\" height=\"274\" class=\"aligncenter size-full wp-image-147\" /></a>\n\nIt basically runs the command prompt command for me. Useful, and saves a minute or two. I learned a good deal about Swing and AWT doing it, so time well spent for future endeavours. ",
    "tags": [
      "Android"
    ]
  },
  {
    "id": "177",
    "title": "Threaded PC Engine",
    "link": "https://ninedof.wordpress.com/2013/04/10/threaded-pc-engine/",
    "pubDate": "Wed, 10 Apr 2013 13:40:44 +0000",
    "postDate": "2013-04-10 13:40:44",
    "body": "After a misadventure into making my Android game engine threaded for higher performance, (A two threaded app on a single core phone was destined to fail!), I decided to do the same on PC, where multi-core processors are the norm nowadays.\n\nThere are two threads: a renderer and a worker. The worker does all the calculations for the next frame, and the renderer draws all the game objects to the window. The worker starts the renderer at the same time as it starts itself, then waits for the renderer to complete before starting the cycle again.\n\nOn Android with a single core, the switching between threads contained so much overhead that the performance suffered greatly. However, on PC, it still seems to be good, at least for a simple scene. I'll see how things pan out as the scene gets more complicated.\n\nHere is a screenshot, with the worker thread limited to 65 FPS, for good measure.\n\n<a href=\"http://ninedof.files.wordpress.com/2013/04/threadedpcenginetest1.png\"><img class=\"aligncenter size-large wp-image-181\" alt=\"ThreadedPCEngineTest\" src=\"http://ninedof.files.wordpress.com/2013/04/threadedpcenginetest1.png?w=545\" width=\"545\" height=\"309\" /></a>",
    "tags": [
      "Java"
    ]
  },
  {
    "id": "185",
    "title": "Java Networking",
    "link": "https://ninedof.wordpress.com/2013/04/10/java-networking/",
    "pubDate": "Wed, 10 Apr 2013 20:43:47 +0000",
    "postDate": "2013-04-10 20:43:47",
    "body": "The next step in any game development methodology is investigating networked games, ones that run on multiple computers and communicate to coordinate a shared experience for players. To this end, I started looking into <code>java.net</code> for communicating in Java program. This yielded good results, and after about an hour of tinkering, I can show the fruits of this surprisingly easy labor:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/04/server.png\"><img src=\"http://ninedof.files.wordpress.com/2013/04/server.png?w=545\" alt=\"Server\" width=\"545\" height=\"551\" class=\"aligncenter size-large wp-image-186\" /></a>\n\nEagle eyed readers will be able to figure out the chronology of events. Simply, its a brief back and forth, with me entering commands in the bottom window, and the server program on top reporting the reception of these commands. The client also shows the time taken for the round trip. I have tested this on another computer in my local network and it works! \n\nNext step, a networked game! But first I think I should clean up the format of the messages here, as it maybe a tad confusing...",
    "tags": [
      "Java"
    ]
  },
  {
    "id": "193",
    "title": "Multi-Client Server",
    "link": "https://ninedof.wordpress.com/2013/04/12/multi-client-server/",
    "pubDate": "Fri, 12 Apr 2013 01:24:04 +0000",
    "postDate": "2013-04-12 01:24:04",
    "body": "Working on the server software some more, with some help from a friend, it now accepts up to an arbitrary (currently 10) connections, each one handled in its own thread. When the server manager gets a new connection, it passes the <code>Socket</code> to the new thread, which then handles all the I/O for that connection. When that client disconnects, it sets a 'in use' flag, which the server manager can then use to re-allocate it if all the other threads are busy. \n\nHere's a demo image! I'll also release some source code for this stage, as a simple proof of concept before it gets too much more complicated. \n\n<a href=\"http://ninedof.files.wordpress.com/2013/04/multiclient.png\"><img src=\"http://ninedof.files.wordpress.com/2013/04/multiclient.png?w=545\" alt=\"multiclient\" width=\"545\" height=\"825\" class=\"aligncenter size-large wp-image-194\" /></a>\n\nThe next step is to set up server sending messages from one client to another, and become a real server! At the moment its just a listener...\n\nHere's a <a href=\"https://www.dropbox.com/s/br5dldu1rqrejz2/Server%20and%20Client.zip\" title=\"link\">link</a> to the source code.",
    "tags": [
      "Java"
    ]
  },
  {
    "id": "204",
    "title": "All ready for Pebble",
    "link": "https://ninedof.wordpress.com/2013/04/13/all-ready-for-pebble/",
    "pubDate": "Sat, 13 Apr 2013 21:48:15 +0000",
    "postDate": "2013-04-13 21:48:15",
    "body": "If you haven't heard, <a title=\"Pebble Watch\" href=\"http://getpebble.com/\">this is a Pebble Smartwatch</a>. Mine is in the post somewhere between Heathrow and my house... But there is no post on weekends!\n\nInstead, I've spent a lot of today setting up the Pebble SDK toolchain and dependencies on a Ubuntu Virtual Machine, and brushing up on my C++ so that when it arrives, I can make my own watch apps!\n\nThe fantastic thing about it is that it is completely open, and there are lots of code examples, which I can understand thanks to my tinkering with C and Java.\n\nAs a sample of what the community has already achieved, here is John Cleese as a watchface app. <a title=\"Watchface\" href=\"http://www.reddit.com/r/pebble/comments/1c8bho/swalks_watch_face_loads_fine_with_current_pebble/\">Source here</a>.\n\n[caption id=\"\" align=\"aligncenter\" width=\"2448\"]<a href=\"http://i.imgur.com/zr92fnO.jpg\"><img alt=\"\" src=\"http://i.imgur.com/zr92fnO.jpg\" width=\"2448\" height=\"2448\" /></a> John Cleese Silly Walks Watchface[/caption]",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "216",
    "title": "First Pebble Watchface (Spoiler: It's not very exciting)",
    "link": "https://ninedof.wordpress.com/2013/04/14/first-pebble-watchface-spoiler-its-not-very-exciting/",
    "pubDate": "Sun, 14 Apr 2013 22:45:33 +0000",
    "postDate": "2013-04-14 22:45:33",
    "body": "Even though the watch isn't here yet, I've gone and managed to compile a simple watchface anyway. All it does is show the text 'Text'. I did warn you it wasn't very exciting!\n\n<a href=\"http://ninedof.files.wordpress.com/2013/04/texttestbuild.png\"><img class=\"aligncenter size-large wp-image-217\" alt=\"texttestbuild\" src=\"http://ninedof.files.wordpress.com/2013/04/texttestbuild.png?w=545\" width=\"545\" height=\"443\" /></a>\n\n&nbsp;\n\nSource code: <a title=\"Source\" href=\"https://www.dropbox.com/s/9ye60qdb25svoys/TextTest.zip\">here</a>.",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "227",
    "title": "Note to self",
    "link": "https://ninedof.wordpress.com/2013/04/17/note-to-self/",
    "pubDate": "Wed, 17 Apr 2013 23:00:32 +0000",
    "postDate": "2013-04-17 23:00:32",
    "body": "<code>\"toClient.print(message);\" != \"toClient.println(message);\"</code>\n\n*sigh*",
    "tags": [
      "Java"
    ]
  },
  {
    "id": "235",
    "title": "First Network Game Implemented",
    "link": "https://ninedof.wordpress.com/2013/04/18/first-network-game-implemented/",
    "pubDate": "Thu, 18 Apr 2013 23:31:10 +0000",
    "postDate": "2013-04-18 23:31:10",
    "body": "Today is an exciting day. Why? Because I played a game with someone in <a class=\"zem_slink\" title=\"Germany\" href=\"http://maps.google.com/maps?ll=52.5166666667,13.3833333333&amp;spn=10.0,10.0&amp;q=52.5166666667,13.3833333333 (Germany)&amp;t=h\" target=\"_blank\" rel=\"geolocation\">Germany</a>.\n\nWhy is this exciting you may ask? Good question. It wasn't just any game. It was a 'game' I wrote! That makes it special, even if it is just moving a red circle around.\n\nWhen another red circle appears with another player's name above it, that circle is elevated beyond mere <em>geometry</em> and into an extension of that person.\n\nHow it is moved by that person becomes the first form of expression, beyond any language.\n\nAnyway, dramatics aside, here's a screenie of me playing against myself. When I have one of a proper multiplayer session I'll add it:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/04/multiplayersuccess.png\"><img class=\"aligncenter size-large wp-image-236\" alt=\"multiplayersuccess\" src=\"http://ninedof.files.wordpress.com/2013/04/multiplayersuccess.png?w=545\" width=\"545\" height=\"547\" /></a>\n\nBrief details for those interested:\n<ol>\n\t<li><span style=\"line-height:12px;\">When a player is moved locally, it sends \"#playerposition\", followed by its location x and y to the server. </span></li>\n\t<li>This information is then sent to all connected clients in the form \"#playerupdate\", followed by that player's name, x and y. The name of each player is associated with each listening thread on the server.</li>\n\t<li>When each client receives \"#playerupdate\", it updates that player's local entity's target position with the new x and y. If that player doesn't exist, it is spawned and immediately given its current target.</li>\n\t<li>Each frame, every local entity representing another network player is moved linearly towards its last target position received from the server. This gets around continuously streaming all positions all over the place, and each client need only send data when the local player actually moves.</li>\n\t<li>When a player disconnects, it sends \"#disconnect\". The server then issues a \"#despawn\" command to all connected clients, followed by the disconnecting player's name. Each client then removes the corresponding local entity.</li>\n</ol>\nI am aware that this is a very crude 'move to target' system that will only really work in obstruction free scenes. Anything more complicated like an environment made of corridors and squares like '<a title=\"A Brief Overview of ‘dungeons’ so far\" href=\"http://ninedof.wordpress.com/2013/03/27/a-brief-overview-of-dungeons-so-far/\">dungeons</a>' and pathfinding will have to rear its ugly head once again.\n\nBut thats okay, because it seems to get easier and simpler to implement each time it comes around.\n\nIf you'd like to help me test this, send me a tweet and we can arrange something!",
    "tags": [
      "Java"
    ]
  },
  {
    "id": "243",
    "title": "First Pebble Watchface Implemented",
    "link": "https://ninedof.wordpress.com/2013/04/20/first-pebble-watchface-implemented/",
    "pubDate": "Sat, 20 Apr 2013 10:52:41 +0000",
    "postDate": "2013-04-20 10:52:41",
    "body": "Remember that Pebble I was talking about the other day? Well despite the fact that half the time the display looks like this:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/04/img_20130416_133617.jpg\"><img class=\"aligncenter size-large wp-image-244\" alt=\"SAMSUNG\" src=\"http://ninedof.files.wordpress.com/2013/04/img_20130416_133617.jpg?w=545\" width=\"545\" height=\"408\" /></a>\n\nI've managed to compile and run this:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/04/img_20130420_114741.jpg\"><img class=\"aligncenter size-large wp-image-245\" alt=\"SAMSUNG\" src=\"http://ninedof.files.wordpress.com/2013/04/img_20130420_114741.jpg?w=545\" width=\"545\" height=\"408\" /></a>\n\nThe key to being able to use the screen is to hold the Down button quite hard... But unfortunately this isn't always practical, like when I want to use the Down button repeatedly on a list. I have contacted Support but have yet to receive a reply...\n\nBut in the meantime I can keep writing watchfaces, just can't use 'em.\n\nBut what if we wanted to change it? Well, here's how you'd go about it:\n<ol>\n\t<li><span style=\"line-height:12px;\">Load up Ubuntu Linux or a suitable VM, download the Pebble SDK (including dependencies and libraries) and set it all up <a title=\"Pebble SDK\" href=\"http://developer.getpebble.com/1/welcome\">as described here</a>.</span></li>\n\t<li>Write the source file, with guidance from the SDK documentation. I've already done this (and you can <a title=\"Source for basic watchface\" href=\"https://www.dropbox.com/s/yp02w4zcf6j9w5s/textTest.c\">read it in full here</a>).</li>\n\t<li>Change this line to whatever you want this very basic watchface to say. <a href=\"http://ninedof.files.wordpress.com/2013/04/1.jpg\"><img class=\"aligncenter size-full wp-image-250\" alt=\"1\" src=\"http://ninedof.files.wordpress.com/2013/04/1.jpg\" width=\"471\" height=\"53\" /></a></li>\n\t<li>Navigate to the watchface's directory in a Terminal. For example: <code>cd ./~pebble-dev/myWatchfaces/TextTest</code> and build the watchface using <code>./waf configure build<a href=\"http://ninedof.files.wordpress.com/2013/04/2.jpg\"><img class=\"aligncenter size-large wp-image-251\" alt=\"2\" src=\"http://ninedof.files.wordpress.com/2013/04/2.jpg?w=545\" width=\"545\" height=\"99\" /></a></code></li>\n\t<li>Find the resulting package file in the 'build' directory. For example: <code> ~/pebble-dev/myWatchfaces/TextTest/build</code></li>\n\t<li>Copy this file from Ubuntu to Windows if you're using a VM (I couldn't get the next step to work when inside a VM.) <a href=\"http://ninedof.files.wordpress.com/2013/04/3.jpg\"><img class=\"aligncenter size-full wp-image-252\" alt=\"3\" src=\"http://ninedof.files.wordpress.com/2013/04/3.jpg\" width=\"273\" height=\"124\" /></a></li>\n\t<li>You need to get to the package file directly on the phone. The suggested method is to use a Python HTTP Server, which comes pre-written as part of the Python distribution.<a href=\"http://ninedof.files.wordpress.com/2013/04/4.jpg\"><img class=\"aligncenter size-full wp-image-253\" alt=\"4\" src=\"http://ninedof.files.wordpress.com/2013/04/4.jpg\" width=\"392\" height=\"128\" /></a></li>\n\t<li>On the phone, open a Browser and go to the LAN address of the computer running the server. On my network this would be <code>http://192.168.1.69:8000<a href=\"http://ninedof.files.wordpress.com/2013/04/5.jpg\"><img class=\"aligncenter  wp-image-254\" alt=\"5\" src=\"http://ninedof.files.wordpress.com/2013/04/5.jpg\" width=\"384\" height=\"266\" /></a></code></li>\n\t<li>There you will find the file. Tap the file name and the Pebble app will open and install the watchface in seconds. <a href=\"http://ninedof.files.wordpress.com/2013/04/6.jpg\"><img class=\"aligncenter  wp-image-255\" alt=\"6\" src=\"http://ninedof.files.wordpress.com/2013/04/6.jpg\" width=\"336\" height=\"560\" /></a></li>\n\t<li>Now you should see the watchface with its changes on the watch!<a href=\"http://ninedof.files.wordpress.com/2013/04/7.jpg\"><img class=\"aligncenter size-full wp-image-256\" alt=\"7\" src=\"http://ninedof.files.wordpress.com/2013/04/7.jpg\" width=\"545\" height=\"423\" /></a></li>\n</ol>\nNow to work on some other ideas I've had...",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "281",
    "title": "Interlude: Cross platform idea",
    "link": "https://ninedof.wordpress.com/2013/05/01/interlude-cross-platform-idea/",
    "pubDate": "Wed, 01 May 2013 22:18:54 +0000",
    "postDate": "2013-05-01 22:18:54",
    "body": "So while the exams are going on, I don't have a lot of time for long coding sessions, but I am working on a small side project that builds on earlier work, and therefore requires minimal effort.\n\nThe idea is this: Modify the Java server to run <code>cmd</code> commands from my Android phone. First stage is creating a networking class for Android use. This could be useful for commands such as <code>shutdown</code> without having to use the slow TeamViewer app, for example. \n\nHere we go!",
    "tags": [
      "Android",
      "Java"
    ]
  },
  {
    "id": "284",
    "title": "And the side project is done! T +1 hour 35 minutes",
    "link": "https://ninedof.wordpress.com/2013/05/01/and-the-side-project-is-done-t-1-hour-35-minutes/",
    "pubDate": "Wed, 01 May 2013 23:59:22 +0000",
    "postDate": "2013-05-01 23:59:22",
    "body": "UPDATE: Source link now actually includes ALL the source code...\n\nThat proved to be much easier than expected... All it needed was modifying the Java server and implementing a NetConnection <code>Thread</code> class in an almost verbatim reproduction from the Networked Java game. I'm almost disappointed!\n\nSo without further adieu, here are the screenshots, with an explanation and source code below:\n\nThe PC runs the AndroidCommandServer jar file, and waits for a connection from the Android phone. Once a connection has been made, it waits for plain text 'cmd' commands and executes them when they arrive. For this demonstration, I simply sent 'notepad' to conjure up (almost as if by magic) a Notepad window! More usefully, this could be used for remotely locking the PC etc.\n\n<a href=\"http://ninedof.files.wordpress.com/2013/05/androidcommandserver-console.png\"><img class=\"aligncenter size-large wp-image-285\" alt=\"AndroidCommandServer Console\" src=\"http://ninedof.files.wordpress.com/2013/05/androidcommandserver-console.png?w=545\" width=\"545\" height=\"228\" /></a>\n\nHere is a screenshot of the phone, post command issue (click for full size):\n\n<a href=\"http://ninedof.files.wordpress.com/2013/05/screenshot_2013-05-02-00-42-26.png\"><img class=\"aligncenter size-medium wp-image-286\" alt=\"Screenshot_2013-05-02-00-42-26\" src=\"http://ninedof.files.wordpress.com/2013/05/screenshot_2013-05-02-00-42-26.png?w=180\" width=\"180\" height=\"300\" /></a>\n\nAs you can see, the app is very rough and ready (and actually my first time using the Eclipse plugin's graphical element editor, as previously for soundboards and the A* pathfinder I'd always done it in the pure XML view), and I may implement the reception of text from the PC (Which would appear where 'TextView' currently rears it's ugly head) but it's not needed at the moment.\n\nAlso, for simplicity and cleanliness the phone will terminate the connection on app suspend (<code>onPause()</code>) by sending <code>#disconnect</code> which instructs the server to end the I/O streams that side.\n\n<a title=\"Source code\" href=\"https://www.dropbox.com/s/bq8zrj8t9r0h2k0/AndroidCommandServer%20release.zip\">Here is the source</a>, also a good clean first time app for any speculative Android app writers that want a simple example (excluding the Socket stuff, but that is simple enough to be instructive too, I guess)",
    "tags": [
      "Android",
      "Java"
    ]
  },
  {
    "id": "301",
    "title": "Thoughts on the Android CMD Client",
    "link": "https://ninedof.wordpress.com/2013/05/03/thoughts-on-the-android-cmd-client/",
    "pubDate": "Fri, 03 May 2013 15:33:27 +0000",
    "postDate": "2013-05-03 15:33:27",
    "body": "Since creating the client and server (detailed in the last post) I have made a few observations. Firstly, there was no security whatsoever. This means that if someone who had compiled the source code I released an knew my Internet IP address and when the server was up could have in theory obliterated my PC!\n\nSo for now I have put in a check using certain hardware characteristics of the incoming connection's device against known values for my own phone. Thus in theory, only my phone can now use the server. I'll verify this behavior once I get a hold of another device from a friend in the coming days.\n\nAlso, issuing the command <code>'cmd'</code> appeared to be the only command that did nothing, but after a few button presses on the phone and some head scratching I came to realise that this was because the server was creating a silent cmd window using the silent cmd window. A look at Task Manager revealed this to be true.\n\nLuckily, at the moment the server code waits for the <code>ProcessBuilder</code> that executed <code>'cmd'</code> to wait for that child process to finish before returning, or I would have had quite a few processes to kill! Although while writing this it occurs to me that once the host <code>java.exe</code> process was ended, the child process would follow suit.\n\n<strong>If you do compile and run the source code I released, please bear in mind that it is still UNSECURE in the manner I just described. If you would like the more secure version please send me a tweet. </strong>",
    "tags": [
      "Android",
      "Java"
    ]
  },
  {
    "id": "311",
    "title": "Android Server Use Case",
    "link": "https://ninedof.wordpress.com/2013/05/05/android-server-use-case/",
    "pubDate": "Sun, 05 May 2013 12:33:07 +0000",
    "postDate": "2013-05-05 12:33:07",
    "body": "So I was in town earlier today, and I remembered that I'd forgotten to lock my laptop. No worries, I got out my phone and launched the Android Command App, typed in my IP and hit connect.\n\nNow, I'd never tried it over HSDPA before, but I was delighted to see the top status bar turn green, and allow me to press the LOCK button. I then used the TeamViewer button to remotely launch TeamViewer and allow me to verify the LOCK command had worked. And it had!\n\nHere is a screenshot showing a connection made over HSDPA (IP is changed for security, or something)\n<p style=\"text-align:center;\"><a href=\"http://ninedof.files.wordpress.com/2013/05/screenshot_2013-05-05-12-11-21.png\"><img class=\"aligncenter  wp-image-312\" alt=\"Screenshot_2013-05-05-12-11-21\" src=\"http://ninedof.files.wordpress.com/2013/05/screenshot_2013-05-05-12-11-21.png\" width=\"384\" height=\"640\" /></a></p>",
    "tags": [
      "Android",
      "Java"
    ]
  },
  {
    "id": "322",
    "title": "New App: One-Shot Wi-Fi Lock",
    "link": "https://ninedof.wordpress.com/2013/05/07/new-app-one-shot-wi-fi-lock/",
    "pubDate": "Tue, 07 May 2013 16:42:39 +0000",
    "postDate": "2013-05-07 16:42:39",
    "body": "<a href=\"http://ninedof.files.wordpress.com/2013/05/oswl-icon.png\"><img class=\"aligncenter size-full wp-image-323\" alt=\"OSWL icon\" src=\"http://ninedof.files.wordpress.com/2013/05/oswl-icon.png\" width=\"250\" height=\"250\" /></a>\n\nSo being forgetful sometimes, (not to mention opportunistic when I see one) I have been known to walk away from my laptop without locking it. Not that I have anything to hide, but I do have some frightening stories from a few years ago, when people would come across my session and take the opportunity to be deviant (be it people who might be of the disposition to enjoy a good Facebook hijacking session, or kids back in school who would take the opportunity when I was at the printer to send a few more hundred pages for kicks).\n\nSo with that slight character flaw in mind, and the fact I'd recently created an authenticated Android -&gt; PC link capable of executing anything at all, I had an idea for what I've named the One-Shot Wi-Fi Lock app. Put simply, it uses all the classes I've developed over the last couple of projects to connect to my laptop over Wi-Fi, send the CMD lock command, then disconnect and quit the app. My student house Wi-Fi address always appears to be static in the form 192.168.1.XX, so it is hard coded in as a String.\n\nSo, if I walk away and forget to lock the session, I can just take out my phone, tap the app icon on my homescreen and after a brief flicker of an Activity, can be sound in the knowledge that the screen is now locked (After seeing the 'Successful!' toast, of course).",
    "tags": [
      "Android",
      "Java"
    ]
  },
  {
    "id": "340",
    "title": "Java to Arduino LCD Output",
    "link": "https://ninedof.wordpress.com/2013/05/22/java-to-arduino-lcd-output/",
    "pubDate": "Wed, 22 May 2013 22:01:40 +0000",
    "postDate": "2013-05-22 22:01:40",
    "body": "So, seeing as I enjoy programming and system integration more than semi-conductor physics (Here's looking at you, exam!) I decided to find a new use for an old GDM1601c 16x1 LCD display from an old kit I had when I was younger.\n\nFrom experience (Digital Logic labs from the second year of university) I know that these types of displays have a standard interface, so it was easy enough to make whatever text I wanted come up on the display, especially with help from the Arduino LCD library, which replicates the protocol I reverse engineered (almost) in that second year lab experiment. If there's one thing you learn from practical electronic system integration, it's never to trust a datasheet!\n\nThe main quirk with this 'type' of display is that the memory locations for the left half and right half of the display are not analogous with their real world counterparts. This means that characters 1 - 8 are the 'top line' and characters 9 - 16 are the 'bottom line'. Apparently this means they are easier to manufacture (<a href=\"http://web.alfredstate.edu/weimandn/lcd/lcd_addressing/lcd_addressing_index.html\">source: this article</a>), and once again highlights the quirks of electronic manufacturing, another example being that CMOS logic used in most integrated circuits is all inverted (NAND instead of AND!). To get around this limitation (as can be seen in the source code attached), I wrote a function that decides how to display the input text based on its length. If its between 8 and 16, the function splits up the text into two halves, and draws them on the screen accordingly (Curse wordpress and not allowing indents in code sections!):\n\n<code>\n/* Print a string between 7 and 16 characters to a 'Type 1' 16x2 LCD\n* Author: Chris Lewis\n*/\nvoid printToLCD(String input) {\n//Clear both sections\nlcd.setCursor(0,0);\nlcd.print(\" \");\nlcd.setCursor(0,8);\nlcd.print(\" \");\n\n//Check message will fit\nif(input.length() &gt; 16) {\nlcd.setCursor(0,0);\nlcd.print(\"TooLong\");\n}\n\n//If length between 8 and 16, split it up for displaying\nelse if(input.length() &gt; 8) {\nString firstHalf = input.substring(0,8);\nString secondHalf = input.substring(8);\n\nlcd.setCursor(0,0);\nlcd.print(firstHalf);\nlcd.setCursor(0,8); //Crazy Type 1 Addressing...\nlcd.print(secondHalf);\n}\n\n//If length less than 8, just print it!\nelse if(input.length() &lt; 8) {\nlcd.setCursor(0,0);\nlcd.print(input);\n}\n}\n</code>\n\nAnyway, the real fun came when I modified the Arduino sketch to accept Serial data from a computer (a lá what was achieved in the third year MEng group project this year, which I may get around to writing an entry about, although it was the bane of my life for about six months, but well worth it in terms of what I learned from it) and show that Serial data on the display.\n\n<a href=\"http://ninedof.files.wordpress.com/2013/05/lcdoutput2.jpg\"><img class=\"aligncenter size-large wp-image-341\" alt=\"LCDoutput2\" src=\"http://ninedof.files.wordpress.com/2013/05/lcdoutput2.jpg?w=545\" width=\"545\" height=\"377\" /></a>\n\nAgain, this wasn't a huge challenge, so I took it one step further, which to me was to write a Java class I could use in any general project to send text from a Java application to the LCD display. After some experimentation with the <a href=\"http://users.frii.com/jarvi/rxtx/\">RXTX library</a> I got this to work, and it was a nice novelty to type something into the command prompt and see it appear instantaneously on the LCD display.\n\nSo far so good, the class is ready for use in a more advanced project, such as a network enabled application. Examples that come into my head right now are:\n<ul>\n\t<li>An external health meter, ammo counter or score counter for a single/multiplater Java game</li>\n\t<li>A notification display for received chat messages if I get around to finishing my Java chat client</li>\n\t<li>Some sort of readout for a future project involving my Pebble watch, once I get my hands on the replacement.</li>\n</ul>\nSo, without further adieu, here are some more pictures, and <a href=\"https://www.dropbox.com/s/r4lgnvx8y9qwykg/LCDoutput.zip?v=0mcn\">source code</a>!\n\n<a href=\"http://ninedof.files.wordpress.com/2013/05/lcdoutput4.png\"><img class=\"aligncenter size-large wp-image-342\" alt=\"LCDoutput4\" src=\"http://ninedof.files.wordpress.com/2013/05/lcdoutput4.png?w=545\" width=\"545\" height=\"276\" /></a>\n\n<a href=\"http://ninedof.files.wordpress.com/2013/05/lcdoutput1.jpg\"><img class=\"aligncenter size-large wp-image-343\" alt=\"LCDoutput1\" src=\"http://ninedof.files.wordpress.com/2013/05/lcdoutput1.jpg?w=545\" width=\"545\" height=\"408\" /></a><a href=\"http://ninedof.files.wordpress.com/2013/05/lcdoutput3.jpg\"><img class=\"aligncenter size-large wp-image-344\" alt=\"LCDoutput3\" src=\"http://ninedof.files.wordpress.com/2013/05/lcdoutput3.jpg?w=545\" width=\"545\" height=\"364\" /></a>",
    "tags": [
      "Integration",
      "Java"
    ]
  },
  {
    "id": "359",
    "title": "Pebble Watchface: Potential Divider",
    "link": "https://ninedof.wordpress.com/2013/05/26/pebble-watchface-potential-divider/",
    "pubDate": "Sun, 26 May 2013 23:34:57 +0000",
    "postDate": "2013-05-26 23:34:57",
    "body": "So, after receiving my replacement watch from the guys at <a href=\"http://getpebble.com\">Pebble</a>, I cracked on with an idea for a watch face I've had since I backed the project last May. Presenting the 'Potential Divider' watchface!\n\n<a href=\"http://ninedof.files.wordpress.com/2013/05/divider.png\"><img class=\"aligncenter size-large wp-image-361\" alt=\"Divider\" src=\"http://ninedof.files.wordpress.com/2013/05/divider.png?w=545\" width=\"545\" height=\"331\" /></a>In electronics, the potential divider is a simple circuit that lets you take one input voltage (here seen as a static 24 volts and step it down to a smaller value by dropping it across two resistors. The salient facts are that the larger of the two resistors gets the larger share of the input voltage. By choosing correct values for the two resistors, you can change (for example) the 24 volts to 12 volts on the output (right hand side) by setting the two resistances exactly equal. Half and half.\n\nWhat I've done here is set the top resistor to the hours value, and the lower resistor to the minutes value, making the time shown here to be 20:46, or 8:46 PM. Thus R1 (top) has the value of 20 ohms, and R2 (bottom) a value of 46 ohms. The calculation of the output voltage is just an added detail that amuses me as an electronics student, but also has value in saying \"Oh yes, it's 17.6 volts o'clock\", to many facepalms. The maths is simple:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/05/dividermaths.png\"><img class=\"aligncenter size-full wp-image-363\" alt=\"DividerMaths\" src=\"http://ninedof.files.wordpress.com/2013/05/dividermaths.png\" width=\"192\" height=\"150\" /></a>The real challenges were getting that output voltage onto the screen. If you don't know, at the moment Pebble watch faces are written in standard C, which is quite a complex, low level and generally confusing language to be introduced to programming in. It involves a lot of complexities that aren't necessary to get across to someone starting their programming journey what a language is and how it works. But personal minor grievances aside, in C if you want to store text, it isn't a simple <code>String text = \"This is my text!\";</code> , it's an array of characters: <code>static char text[17] = \"This is my text\"; </code>.\n\nSo what, you might ask? How does that make putting a number on the screen a challenge? Well the answer to that question is this: To take '17.6V' and store it in a character array, because C is such a low level language, there is usually a pre-written function to take the floating point value and store it in a character array. But with the Pebble SDK in its current state, these standard string libraries aren't linked, so they can't be used (yet)!. So the solution was to do each character separately.\n\nIn the five character array used for 17.6V for example, characters 3 and 5 are always the same. 3 is always a decimal point, and 5 is always 'V'. So <code>outputText[3] = '.';</code> and <code>outputText[5] = 'V';</code> are done. Easy. The others are not so simple. A method I already knew to get a character from a number is to simply do the modulo of that number by 10. So for the second character, I'd do <code>int secondCharacter = 17.6 % 10;</code> which would yield the remainder of 17.6 divided by 10, which equals 6. For the first character I'd divide the voltage by 10, then repeat the process. 17.6 / 10 = 1.76. 1.76 % 10 = 1. So now I can use <code>outputText[1] = '0' + secondCharacter;</code> for example. Same for the first decimal place, except that would require multiplying by 10 to get 176 % 10 = 6.\n\nBut once again the infantile nature of the Pebble SDK flies in the face of my ambitions. It also turns out that the Math.h library (also standard in C) isn't linked either! So I would have to do the modulo function manually. This is easy. It can be seen in full in the source code at the end of this post, but the essence is this: for 17.6 modulo (%) 10, divide 17.6 by 10, subtract the integer part (1), then multiply by 10 again to get the remainder, which is 7. This 'integer stripping' part is done by iteratively comparing the result of the first division against one. When the iterative divisor results in less than one, the integer part is found. Here is the code fragment:\n\n<code>\nfloat stripInteger(float input) {\nfloat stripLoopTemp = 0.0F, intResult = 0.0F, result = 0.0F;\nfloat safeKeeping = input;\nfloat i = 1.0F;\nint maxInt = 100;\n\nfor(i=1.0F;i&lt;maxInt;i++) {\nstripLoopTemp = safeKeeping; //Keep original argument safe\n\nstripLoopTemp /= i; //Divide by this iteration's divisor\n\nif(stripLoopTemp &lt; 1.0F) { //Found integer part! intResult = i - 1.0F; //For i = 3 -&gt; 2.5/3 &lt; 0 ==&gt; integer part = i - 1 = 2\nresult = input - intResult;\nreturn(result);\n}\n}\n\n//Failed\nreturn(0.0F);\n}\n</code>\nThis, in combination with the manual modulo, enabled me to slot the individual characters of the result float voltage value into the character array slots for display by the watch. Job done! Whew!\n\nSo, finally, we can see the results. Here is a YouTube video, showing the watch face in action, plus a little 'electron seconds marker' that travels around the circuit. I'll leave the details on how that works for those who want to peek into the <a title=\"Divider source code\" href=\"https://www.dropbox.com/s/1stdwzel26vlsxy/Divider.zip?v=0mcn\">source code (link)</a>, because it is nothing innovative here. The source code download also includes the watchface package incase you want to use it yourself! Enjoy!\n\n&nbsp;\n\nhttp://www.youtube.com/watch?v=Zgwwcegn_Vc",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "398",
    "title": "New versions of Potential Divider Watch Face",
    "link": "https://ninedof.wordpress.com/2013/05/30/new-versions-of-potential-divider-watch-face/",
    "pubDate": "Thu, 30 May 2013 23:20:25 +0000",
    "postDate": "2013-05-30 23:20:25",
    "body": "<a href=\"http://ninedof.files.wordpress.com/2013/05/dividersizes.png\"><img class=\"aligncenter size-large wp-image-399\" alt=\"DividerSizes\" src=\"http://ninedof.files.wordpress.com/2013/05/dividersizes.png?w=545\" width=\"545\" height=\"352\" /></a>\n\nAfter receiving some encouraging comments from the Pebbler community, I've added some more details and branched out the Potential Divider watch face into two flavours: Small and Large text, for extra readability.\n\nThe install packages can be found at mypebblefaces.com: <a href=\"http://www.mypebblefaces.com/view?fID=3745&amp;aName=Bonsitm&amp;pageTitle=Potential+Divider&amp;auID=3905\">Small</a> and <a href=\"http://www.mypebblefaces.com/view?fID=3754&amp;aName=Bonsitm&amp;pageTitle=Potential+Divider+Large+Edition&amp;auID=3905\">Large</a>.\n\nSource code for both faces can be <a href=\"https://www.dropbox.com/s/iuynpy0tn3reg9r/Divider%20Small%20and%20Large.zip?v=0mcn\">found here</a>.",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "416",
    "title": "New Pebble Watch Face: Split Horizon",
    "link": "https://ninedof.wordpress.com/2013/06/03/new-pebble-watch-face-split-horizon/",
    "pubDate": "Mon, 03 Jun 2013 17:19:34 +0000",
    "postDate": "2013-06-03 17:19:34",
    "body": "Over the last year or so since I installed CM10.0 to my Galaxy S, I've noticed that it's become very sluggish, sometimes to the point of being completely unresponsive. However, this seems to happen in fits and bouts, so I reflashed CM10.0 and installed the bare minimum apps I regularly use, and once again I'm amazed how slick and responsive it is. Goes to show that a single core 1GHz Snapdragon with 358MB RAM is more than enough for a fast, snappy Android experience, if your phone hasn't accumulated a years worth of bulk and mess behind the scenes.\n\nAnyway, as I was looking through the list of apps on the <del>Market</del> Play Store to reinstall, I saw a very old live wallpaper that hadn't been maintained in over two years. It inspired me to create another watch face, which I have named 'Split Horizon', and it looks something like this:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/sh-preview.png\"><img class=\"aligncenter size-full wp-image-418\" alt=\"SH preview\" src=\"http://ninedof.files.wordpress.com/2013/06/sh-preview.png\" width=\"386\" height=\"392\" /></a>\n\nEvery 15 seconds, one of the four top markers slides into view, then on the minute two InverterLayers slide in like a camera shutter and retract again once the time changes.\n\nIt also comes in two other editions:\n\nMinutes Edition (without the top 15 second markers)\nPlain Edition (just the design without any animation at all)\n\nSource code for all three editions plus install packages can <a title=\"Source Code\" href=\"https://www.dropbox.com/s/cyeegx9l9fsg230/Split%20Horizon%20Source%20and%20Bundle.zip\">be found here</a>.\n\n&nbsp;",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "438",
    "title": "Updates to Split Horizon Watch Faces",
    "link": "https://ninedof.wordpress.com/2013/06/10/updates-to-split-horizon-watch-faces/",
    "pubDate": "Mon, 10 Jun 2013 13:02:13 +0000",
    "postDate": "2013-06-10 13:02:13",
    "body": "I've made new versions of the Split Horizon watch faces to have a sharper, more readable font and better alignment. Here's a preview image!\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/sh-prev-2.png\"><img class=\"aligncenter size-full wp-image-439\" alt=\"sH prev 2\" src=\"http://ninedof.files.wordpress.com/2013/06/sh-prev-2.png\" width=\"372\" height=\"390\" /></a>And here are the download pages:\n\n<a href=\"http://www.mypebblefaces.com/view?fID=3837&amp;aName=Bonsitm&amp;pageTitle=Split+Horizon%3A+Seconds+Edition&amp;auID=3905\">Seconds Edition</a>\n\n<a href=\"http://www.mypebblefaces.com/view?fID=3841&amp;aName=Bonsitm&amp;pageTitle=Split+Horizon%3A+Minutes+Edition&amp;auID=3905\">Minutes Edition</a>\n\n<a href=\"http://www.mypebblefaces.com/view?fID=3843&amp;aName=Bonsitm&amp;pageTitle=Split+Horizon%3A+Plain+Edition&amp;auID=3905\">Plain Edition</a>\n\nAs always, source code can be <a title=\"Source!\" href=\"https://www.dropbox.com/s/4odorffmdnb00yg/Split%20Horizon%20Source%20and%20Bundle%20v2.zip\">found here</a>!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "460",
    "title": "Preview: Railways",
    "link": "https://ninedof.wordpress.com/2013/06/14/preview-railways/",
    "pubDate": "Fri, 14 Jun 2013 00:45:05 +0000",
    "postDate": "2013-06-14 00:45:05",
    "body": "Here's a preview of something interesting I've been working on. All I'll say right now (until I have more to show) is that is uses my newest multi-threaded, TCP enabled Java 2D game engine, and it's like having a model railway on your PC. And after swapping a few <code>BufferedImages</code> for <code>Bitmaps</code>, possibly in your pocket!\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/preview1.png\"><img class=\"aligncenter size-large wp-image-461\" alt=\"Preview1\" src=\"http://ninedof.files.wordpress.com/2013/06/preview1.png?w=545\" width=\"545\" height=\"319\" /></a>Summary of features so far:\n<ul>\n\t<li>Sixteen types of placeable track (straight, curves, crossrails, points)</li>\n\t<li>A depot with GUI that enables creation of services from the top left</li>\n\t<li>Intelligent navigation of all track and points, including stop signals</li>\n\t<li>Text file saving/loading of complete maps, except services.</li>\n</ul>\nMore details soon!",
    "tags": [
      "Java"
    ]
  },
  {
    "id": "486",
    "title": "New Watch Face: Beam Up",
    "link": "https://ninedof.wordpress.com/2013/06/17/new-watch-face-beam-up/",
    "pubDate": "Mon, 17 Jun 2013 21:16:47 +0000",
    "postDate": "2013-06-17 21:16:47",
    "body": "I've had another watch face idea! And it's almost completely implemented. This time around, any digit about to change gets 'beamed up' by an <code>InverterLayer</code>, changed, then replaced a moment later. Before I go into the interesting specifics, here's a preview image (although rather crudely created):\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/mockup.gif\"><img class=\"aligncenter size-full wp-image-487\" alt=\"mockup\" src=\"http://ninedof.files.wordpress.com/2013/06/mockup.gif\" width=\"144\" height=\"168\" /></a>I'll post it for download on mypebblefaces when I feel its ready, but its pretty close now, and there is an interesting characteristic to a watch face of this nature that I'd like to discuss.\n\nThe rough logic for the 'digit changing' code goes like this:\n\n1. Any digit about to change has the 'beam comes down, digit goes up' animations applied to it.\n\n2. Those digits are changed to the new ones at seconds == 0 time\n\n3. Those new digits are then replaced with the 'digit comes down, beam goes up'  animations.\n\nNow, in order to make sure only those digits that ARE about to change actually have the animation applied to them, we need to predict which ones are about to change. This is because the condition 'new digit does not equal old digit' (12:39 changing to 12:40) for example, can only be known once the new minute has elapsed at the seconds == 0 time. But by this time, the changed digit specific 'hide' animations are supposed to already have taken place! Hence the need for digit change prediction a second before, at seconds == 59 time.\n\nTo do this, we look at each digit and the conditions under which each one will change. For example, for the '2' digit in '13:29', which I call 'minutes tens', the condition is that the 'minutes units' digit will be '9'. Thus, this is incremented behind the scenes to trigger the correct 'hide' animations before the time change has actually taken place. When the minute changes, the new time overwrites this little 'hack' and so synchrony is never lost to the user.\n\nSimilar conditions exist for the other two left hand digits. For the 'hours minutes', the condition is that  the 'minutes tens' digit is '5' and the 'minutes units' digit is '9' (12:59 for example).\n\nFinally, for the left hand most digit, 'hours tens', the condition is a little more complex. There are three times at which this digit changes.\n<ol>\n\t<li>At 09:59, it changes to a '1' in 10:00.</li>\n\t<li>At 19:59, it changes to a '2' in 20:00.</li>\n\t<li>At 23:59, it changes to a '0' in 00:00.</li>\n</ol>\nBy using this simple prediction algorithm on the second tick before any animation is due to take place, the watch face code knows which digits will change before the time change has even taken place!\n\nI'll need to think about how this can be generalised even further for 12-hour time, so that will be included in the eventual release, hopefully very soon!\n\nUntil next time.",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "497",
    "title": "Pebble Watch Face SDK Tutorial #1: Beginner's Primer to the C Language",
    "link": "https://ninedof.wordpress.com/2013/06/19/pebble-watch-face-sdk-tutorial-1-beginners-primer-to-the-c-language/",
    "pubDate": "Wed, 19 Jun 2013 17:00:11 +0000",
    "postDate": "2013-06-19 17:00:11",
    "body": "<strong>Introduction</strong>\n\nAfter using the <a title=\"PebbleKit\" href=\"http://developer.getpebble.com/\">Pebble Watch Face SDK (aka PebbleKit)</a> to create a number of my own watch faces, and considering that being able to do so as an owner of one of these marvellous devices is one of it's main unique selling points, I'd like to use this position to help others get their foot on the ladder in terms of getting started creating their own watch faces.\n\nThis first part of the tutorial will focus on conveying the basics of the C language, which is the language of choice for writing watch faces, so that hopefully a non-programmer can pick them up and start using them to write a watch face.\n\nAt the moment, there are two viable environments for writing a watch face that I'm aware of. If you know your way around a Linux OS, such as <a title=\"Ubuntu\" href=\"http://www.ubuntu.com/\">Ubuntu</a> at a basic level, you can <a title=\"Pebble SDK Install Steps\" href=\"http://developer.getpebble.com/1/01_GetStarted/01_Step_2\">follow the steps provided by the Pebble Team</a> to set up all the tools you'll need to write, compile and install your new watch face. The alternative method is to write the code and upload resources (images, fonts etc) to <a title=\"cloudpebble\" href=\"https://cloudpebble.net\">cloudpebble.net</a>, a site that does all this for you, if you don't want to work with Ubuntu.\n\nIn either case, the program code is entered in to a file with the extension '.c', instead of '.jpg' or '.txt' for example. This file is then used by a piece of software supplied by Pebble in the SDK called a 'compiler' that processes your program code and produces a watch install package as a '.pbw', ready for sharing and uploading, to your watch or the web.\n\n<strong>Variables</strong>\n\nThe C programming language is one of the most widely used and flexible around, because it can be  adapted for almost any purpose (including Pebble Smartwatches!) and allows low level control of whatever hardware it's implemented on.\n\nLike almost any language, C consists of variables, functions and structures. A variable can be thought of as a container for a piece of information, and comes in many types depending on what sort of information you want it to hold. For example, if you want to store a number, such as the number of minutes past the hour, you would use an <code>int</code>. This stands for integer, which is just another name for a number.\n\nIf you wanted to store a number with a decimal point, you can use a <code>float</code> type. The decimal point is here called a floating point\n\nAnother type is a string of characters, called (you guessed it) a 'string', but it's representation in C is slightly more complex. You can think of the string \"Hello, world!\" as a collection of individual characters. Due to the low level nature of C, this is stored in a character array. You can think of an array as just such a collection. In C, an array is declared by the number of 'slots' in the array after it's name, or can be left empty if the size is known by what you initially store in it.\n\nHere are a couple of examples:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-11.png\"><img class=\"aligncenter size-full wp-image-515\" alt=\"Image 1\" src=\"http://ninedof.files.wordpress.com/2013/06/image-11.png\" width=\"545\" height=\"219\" /></a>\n\nUsing these types of variable, most kinds of data can be stored.\n\n<strong>Functions</strong>\n\nFunctions can be thought of as tasks that be started at any time. They're a good way of grouping statements (another word for a line of code or command) to act on data that you're going to be doing frequently. As a very basic example, imagine you wanted to add one to an integer. When your code is running, you don't know what that number will be, but you know where it will be coming from. It could be a literal value, or the result of a function call, so it needs to be supplied to the function.\n\nA function declaration has three main parts:\n<ol>\n\t<li>The return type, which is the type of data the function will supply us with when we call it to run.</li>\n\t<li>The name of the function</li>\n\t<li>The variables we supply to the function for it to work on. These are called arguments. There can be as many arguments as you need.</li>\n</ol>\nYou can see these parts shown in the 'pseudo-function' below:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-21.png\"><img class=\"aligncenter size-full wp-image-516\" alt=\"Image 2\" src=\"http://ninedof.files.wordpress.com/2013/06/image-21.png\" width=\"411\" height=\"154\" /></a>\n\nFor all intents and purposes, a function must be declared in the file BEFORE it is used.\n\nFor our example of adding one to a number, there are two ways of doing it. The first is by specifying the integer as the function argument, and this is known as 'pass by value'. The value is copied from the call argument into the variable supplied in the function declaration ready to be used however you want. So, here is our example. See if you can follow the train of thought.\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-31.png\"><img class=\"aligncenter size-full wp-image-517\" alt=\"Image 3\" src=\"http://ninedof.files.wordpress.com/2013/06/image-31.png\" width=\"545\" height=\"155\" /></a>\n\nThe value we use is 'number' and is supplied to the function in the call 'addOne(number)' by putting it in the brackets. The value then 'appears' in the function declaration as 'input', where it is incremented by one, before being returned by the function.\n\nHere's the clever bit: As the function returns an integer type, we can assign it into the integer 'result'! It can be said that the function itself represents the integer type it returns.\n\nI hope you can follow that. If not, look back through the last example image and follow the flow of the value of 'number'.\n\n<strong>Pointers</strong>\n\nImagine a variable came with a tag, like a label on an item at a Lost Property Office. The tag or label would describe what was attached. For example, a lost wallet with a ten pounds inside might have a label attached saying \"Lost wallet\". By following the string from the label to the wallet, you could then look inside and find the value held within. Another example is Baggage Reclaim at the airport. To find the luggage that belongs to you, you look for the label and flight number you've been given, which leads you to the correct bags.\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-3-51.png\"><img class=\"aligncenter size-full wp-image-518\" alt=\"Image 3.5\" src=\"http://ninedof.files.wordpress.com/2013/06/image-3-51.png\" width=\"429\" height=\"447\" /></a>\n\nIt is in this way that C can reference variables by their location, but not necessarily by the actual instance of that variable. This type of 'pass by reference' is called a <code>pointer</code>, and is just a number of the memory location of where the variable is actually stored. This is especially useful for strings, where in C a string is often supplied to a function by a <code>pointer</code> to the location of the first slot in the string's character array. The rest of the string can then by read simply by incrementing the <code>pointer</code> to point to the next slot, and so on. An example of the addOne function discussed in the previous section using a pointer to the 'number' and not the actual value itself is shown below. <strong>Note the need for no return type!</strong>\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-43.png\"><img class=\"aligncenter size-large wp-image-641\" alt=\"Image 4\" src=\"http://ninedof.files.wordpress.com/2013/06/image-43.png?w=545\" width=\"545\" height=\"195\" /></a>\n\n<strong>Program flow</strong>\n\nEspecially relevant in the realm of watch faces that change depending on the time, is the control of how the program that is the watch face executes. You might only want an animation to fire on the turn of the hour, for example. Another example is that the watch face will show \"14:30\" if the user selects 'Time Display 24h' in the watch settings, and \"2:30\" if they select 'Time Display 12h'. Thankfully, the SDK lets you facilitate this preference in your watch face program using a combination of program flow and a function supplied by the SDK.\n\nThe two key statements for controlling program flow are almost self explanatory: <code>if</code> and <code>else</code>. Much like a function call, whatever condition is placed in the brackets after an <code>if</code> decides whether the code following is executed. An example of these types of conditional statements is shown below:<b>\n</b>\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-5.png\"><img class=\"aligncenter size-full wp-image-520\" alt=\"Image 5\" src=\"http://ninedof.files.wordpress.com/2013/06/image-5.png\" width=\"545\" height=\"147\" /></a>\n\nSo, if the value of 'number' is exactly 5, the top segment of code is executed, but if not, then the lower segment is executed.\n\nAs a sneak preview of the next section of this tutorial 'Applying the Primer to the Pebble SDK', see if you can decipher what this code segment does...\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-6.png\"><img class=\"aligncenter size-large wp-image-521\" alt=\"Image 6\" src=\"http://ninedof.files.wordpress.com/2013/06/image-6.png?w=545\" width=\"545\" height=\"79\" /></a>\n\nThanks for reading! Please ask any questions you have and I'll do my best to answer them!\n\nStay tuned for the next section of the tutorial!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "527",
    "title": "Pebble Watch Face SDK Tutorial #2: Applying the Primer to the Pebble SDK",
    "link": "https://ninedof.wordpress.com/2013/06/20/pebble-watch-face-sdk-tutorial-2-applying-the-primer-to-the-pebble-sdk/",
    "pubDate": "Thu, 20 Jun 2013 12:46:37 +0000",
    "postDate": "2013-06-20 12:46:37",
    "body": "<strong>Introduction:</strong>\n\nThe aim of this second section of the tutorial series is to show examples of how the primer theory from the last section appears in the real world application we're all looking at - the PebbleKit SDK. But first there is one more data storage convention in C we need to look at. But before that, a quick recap.\n\n<strong>Recap:</strong>\n<ul>\n\t<li>A watch face file is a C file (*.c) and is compiled by the compilers supplied with the Pebble SDK.</li>\n\t<li>Statements (or lines of code) are executed one after another, except where diverted by program flow statements such as <code>if</code> and <code>else</code>.</li>\n\t<li>Variables are where data is stored. Examples are types such as integers, strings and floating points.</li>\n\t<li>Functions perform repeated tasks on data supplied as the arguments. Sometimes the resulting values are returned, and used in assignments.</li>\n</ul>\nIf any of these things are completely foreign to you, please <a title=\"Pebble Watch Face SDK Tutorial #1: Beginner’s Primer to the C Language\" href=\"http://ninedof.wordpress.com/2013/06/19/pebble-watch-face-sdk-tutorial-1-beginners-primer-to-the-c-language/\">go back</a> and read the last section!\n\n<strong>Structures</strong>\n\nIn C, structures are a data type similar to <code>int</code> or <code>float</code>, but contain many different values and can be created for a specific purpose by the user or in this case the SDK developers. You can think of them as a collection of variables that come under one heading, or an Object, if you're coming from an Object Oriented Programming background.\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-12.png\"><img class=\"aligncenter size-full wp-image-545\" alt=\"image 1\" src=\"http://ninedof.files.wordpress.com/2013/06/image-12.png\" width=\"132\" height=\"96\" /></a>\n\nThe individual variables inside the structure can be accessed individually but are all declared at the same time by a single structure declaration. Let's make this a little clearer with an example. Suppose we used a structure to define the aspects of a car.\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-23.png\"><img class=\"aligncenter size-full wp-image-553\" alt=\"image 2\" src=\"http://ninedof.files.wordpress.com/2013/06/image-23.png\" width=\"342\" height=\"295\" /></a>\n\nThe reason that structures are included here are that they are especially important in relation to the Pebble SDK, and so form our first real examples. Luckily we don't have to access the individual variables inside a structure very often.\n\nThe final point on structures is that the key word <code>typedef</code> can be used to define your structure as it's own data type, and so avoid having to type <code>struct</code> before any declaration. Here's an example:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-2-5.png\"><img class=\"aligncenter size-full wp-image-547\" alt=\"image 2.5\" src=\"http://ninedof.files.wordpress.com/2013/06/image-2-5.png\" width=\"319\" height=\"148\" /></a>\n\n<strong>More Common Types To Know</strong>\n\nIn developing a watch face, there are a few more types of data constants to know (these are used as easy ways of specifying aspects of the watch face). The first example is the <code>GColor</code> (Graphics Color). These are defined in order to be used to set the colours of parts of Layers. Their <a title=\"GColor Types\" href=\"http://developer.getpebble.com/sdkref/group___graphics_types.html#gaafde3cb660d99f7fe83e40c86e67b6c4\">listing in the API documentation</a> lets you know which ones are available. You'll see how they fit in when we start to use them later.\n\nAnother common type you'll be using a lot is the <code>GRect</code>. This allows you to specify the dimensions of a rectangle for use in setting Layer frames, or starting and finishing positions for animations etc. It is crucial to enabling you to set where items appear on the watch face and how big they are.\n\nHere are two real examples of these types in use:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-2-6.png\"><img class=\"aligncenter size-full wp-image-548\" alt=\"image 2.6\" src=\"http://ninedof.files.wordpress.com/2013/06/image-2-6.png\" width=\"481\" height=\"151\" /></a>\n\nIf you see the <a title=\"GRect API Documentation\" href=\"http://developer.getpebble.com/sdkref/group___graphics_types.html#struct_g_rect\">API documentation for <code>GRect</code></a>, it is actually a structure consisting of a <code>GPoint</code> for the origin and a <code>GSize</code> for the width and height. I hope you can guess what those two new ones do!\n\n<strong>Structures in the PebbleSDK</strong>\n\nA large number of structures are used in the SDK to represent various elements that go into a watch face or app. An example is the Layer structure. The variables stored inside this structure are items such as it's geometry and the Window it is situated in. In the SDK reference material it <a title=\"Struct Layer Reference\" href=\"http://developer.getpebble.com/sdkref/group___layer.html#struct_layer\">looks like this</a>.\n\nAt a distance, the most basic watch face possible is just a collection of structures representing user interface elements and functions that manipulate these structures through their pointers (easier than returning an entire struct!)\n\nThe first two I'll introduce are Window and TextLayer. These are defined using <code>typedef</code>, so the key word <code>struct</code> is not needed when you use them.\n\nThe Window structure represents the 'fullscreen window' that IS your watch face. When you add an element such as a TextLayer to the Window, it is displayed in that Window. In order to be accessible to all parts of the watch face program, they are declared 'globally'. This just means outside any function, and so visible to them all, like so:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-32.png\"><img class=\"aligncenter size-full wp-image-549\" alt=\"image 3\" src=\"http://ninedof.files.wordpress.com/2013/06/image-32.png\" width=\"356\" height=\"63\" /></a>\n\nSo, the Window is the main place for all the parts of the watch face, and the TextLayer is a Layer that displays text to the user. Before either of these can be used, we must call <strong>functions</strong> provided by the SDK to set them up or 'initialise' them. The image below illustrates this process:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-42.png\"><img class=\"aligncenter size-full wp-image-550\" alt=\"image 4\" src=\"http://ninedof.files.wordpress.com/2013/06/image-42.png\" width=\"534\" height=\"150\" /></a>\n\nNotice throughout the process the Window structure the pointers are operating on is specified using a pointer to the structure, rather than the structure itself. This is done thought the '&amp;' symbol, used to specify the structure's pointer.\n\nOnce this is done, we can initialise and add a TextLayer to the Window for displaying our demo text.\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/image-51.png\"><img class=\"aligncenter size-large wp-image-551\" alt=\"image 5\" src=\"http://ninedof.files.wordpress.com/2013/06/image-51.png?w=545\" width=\"545\" height=\"194\" /></a>\n\nIt is important to note that the order in which Layers are added to a Window matters. Much like the new Window is added to the top of the 'stack' of windows, the most recent'y added Layer will be at the front, on top of everything else. If the background colour is specified as <code>GColorClear</code>, this is rarely an issue, but there could be times when this feature can be taken advantage of.\n\n<strong>Conclusion</strong>\n\nSo that's how the data types, functions and structures manifest themselves in creating a basic watch face. I hope I've made it clear enough, but if not, feel free to ask a question.\n\n<strong>Next Time</strong>\n\nIn the next section I'll show a brief overview of how to setup a Ubuntu environment for building watch faces, if you prefer that to the cloud based solution mentioned in the first section.\n\nAfter that, I'll walk through a basic first watch face!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "561",
    "title": "Pebble Watch Face SDK Tutorial #3: Setting up a Ubuntu Virtual Machine for Development",
    "link": "https://ninedof.wordpress.com/2013/06/20/pebble-watch-face-sdk-tutorial-3-setting-up-a-ubuntu-virtual-machine-for-development/",
    "pubDate": "Thu, 20 Jun 2013 19:28:03 +0000",
    "postDate": "2013-06-20 19:28:03",
    "body": "<strong>Links to Previous Sections:</strong>\n\nHere are links to the previous sections of this tutorial. Read them if you haven't to get up to speed!\n\n<a title=\"Pebble Watch Face SDK Tutorial #1: Beginner’s Primer to the C Language\" href=\"http://ninedof.wordpress.com/2013/06/19/pebble-watch-face-sdk-tutorial-1-beginners-primer-to-the-c-language/\">Part #1: Beginner's Primer to the C Language</a>\n\n<a title=\"Pebble Watch Face SDK Tutorial #2: Applying the Primer to the Pebble SDK\" href=\"http://ninedof.wordpress.com/2013/06/20/pebble-watch-face-sdk-tutorial-2-applying-the-primer-to-the-pebble-sdk/\">Part #2: Applying the Primer to the Pebble SDK</a>\n\n<strong>Introduction</strong>\n\nIn this section of the tutorial I'll do an almost click by click run-through of how to set up a Virtual Machine running Ubuntu Linux for developing watch faces and apps. This will be without any screenshots because it's a very linear 'click next to continue' sort of process. If you get stuck, there are numerous guides that are Google-able to achieve this goal.\n\nThe reason this is done is because the software tools and compilers used are only supported on Linux, and not Windows.\n\nAgain, if you would rather prefer not to do this you can use <a title=\"cloudpebble.net\" href=\"http://cloudpebble.net\">cloudpebble.net</a> to write the .c files and compile them, but it's always interesting to see a new facet of computing that you might not have done otherwise. It can also be said that this method of building watch faces and apps grants you more control, but it's up to  you.\n\nAn advantage of using cloudpebble instead of installing your own Virtual Machine is that if you wanted only to modify an existing watch face and study the effects, that is a simpler option. You can focus on writing watch face code and compilation. For example, you can make a small modification to an existing watch face to save bothering the developer, but in most case I'd hope they would be happy to help, unless they were inundated with requests!\n\n<strong>Important Downloads</strong>\n\nBefore you start, make sure you download both these files. You'll need them!\n<ol>\n\t<li><a title=\"VirtualBox\" href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a></li>\n\t<li><a title=\"Ubuntu Download\" href=\"http://www.ubuntu.com/download/desktop\">A DVD image file for Ubuntu OS</a>. I'd recommend 12.04 LTS. Pick the architecture version that is applicable. If you're unsure, select 32-bit. If you want to donate, that's great, but you don't have to. On the next page choose 'not now, take me to the download' to go straight there.</li>\n</ol>\n<strong>Setting Up the Virtual Machine</strong>\n<ol>\n\t<li>Install and open VirtualBox. Click 'New' at the top left corner.</li>\n\t<li>Enter a name for your Virtual Machine and select 'Type' as 'Linux' and 'Version' as 'Ubuntu' or 'Ubuntu 64', depending on your preference earlier.</li>\n\t<li>Choose a memory size. I'd recommend between 1 GB and 2 GB. (1024 MB - 2048 MB to be more precise)</li>\n\t<li>Choose 'Create a virtual hard drive now'.</li>\n\t<li>Choose the 'VDI' type.</li>\n\t<li>Select 'Dynamically allocated'. An explanation of the difference is given.</li>\n\t<li>Name your virtual hard drive and set the capacity. I'd recommend 8 GB if you have that much available, but Ubuntu itself recommends at least 4.5 GB. You'll need extra space for installing the Pebble SDK and tools.</li>\n\t<li>You should now be back at the main VirtualBox window you started in. Click 'Start'.</li>\n\t<li>When asked for the instal medium, click the 'folder with green arrow' icon on the right of the dialogue and navigate to the Ubuntu .iso you downloaded earlier.</li>\n\t<li>Press 'Start' and wait for the 'Welcome' window.</li>\n</ol>\n<strong>Setting up Ubuntu</strong>\n<ol>\n\t<li>Select your preferred language on the left pane and then choose 'Install Ubuntu'.</li>\n\t<li>If you prefer, select the box for 'Download updates while installing'. This will ensure the standard parts of Linux that the SDK may rely on are up-to-date, and I'd strongly recommend it. Press 'Continue'.</li>\n\t<li>Select 'Erase Disk and Install Ubuntu'. This is fine, as the whole machine is running on a virtual hard disk, which is merely a single file on your host OS. Your computer is safe!</li>\n\t<li>Press 'Continue', then 'Install now'.</li>\n\t<li>Wait for the installation to complete and answer the additional locale questions. This should take no more than ten minutes. (I remember waiting almost two hours for Windows XP to install back in the day).</li>\n\t<li>Click 'Restart Now' when asked, then press ENTER when asked. There is no CD to eject.</li>\n</ol>\n<strong>Set Up Toolchain</strong>\n\nNow you need to install the software tools and dependencies the SDK requires to work.\n\nI would go though it in detail here, but there really is only one correct way of doing it and that method is documented in fine detail <a title=\"Pebble Developer Site\" href=\"http://developer.getpebble.com/1/welcome\">over on the official Pebble Developer site</a>. Make sure you follow the instructions <strong>to the letter</strong> and make sure you resolve any problems you encounter before you try and proceed any further, or you'll be wasting your time!\n\nI'd say that only Step 1 and Step 2 on the left hand side are essential right now, then you will be ready for the next section of my tutorial, but if you're interested, a little extra reading is great.\n\n<strong>Next Time</strong>\n\nIn the next section there will be a detailed look at the key features of a basic watch face source file, and you'll end up with your first custom built watch face!\n\nBest of luck! Remember there are already lots of answered questions and solutions to common problems over on the Pebble <a title=\"SDK Install forum\" href=\"http://forums.getpebble.com/categories/sdk-install\">SDK Install</a> and <a title=\"SDK Help Forum\" href=\"http://forums.getpebble.com/categories/watchface-sdk-help\">SDK Help</a> forums.",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "577",
    "title": "Pebble Watch Face SDK Tutorial #4: Anatomy of Your First Watch Face",
    "link": "https://ninedof.wordpress.com/2013/06/21/pebble-watch-face-sdk-tutorial-4-anatomy-of-your-first-watch-face/",
    "pubDate": "Fri, 21 Jun 2013 21:46:34 +0000",
    "postDate": "2013-06-21 21:46:34",
    "body": "<strong>UPDATE: The section on setting text has been updated to reflect font name change in PebbleKit v1.12</strong>\n\n<code></code><strong>Links to Previous Sections:</strong>\n\nHere are links to the previous sections of this tutorial. Read them if you haven't to get up to speed!\n\n<a title=\"Pebble Watch Face SDK Tutorial #1: Beginner’s Primer to the C Language\" href=\"http://ninedof.wordpress.com/2013/06/19/pebble-watch-face-sdk-tutorial-1-beginners-primer-to-the-c-language/\">Part #1: Beginner's Primer to the C Language</a>\n\n<a title=\"Pebble Watch Face SDK Tutorial #2: Applying the Primer to the Pebble SDK\" href=\"http://ninedof.wordpress.com/2013/06/20/pebble-watch-face-sdk-tutorial-2-applying-the-primer-to-the-pebble-sdk/\">Part #2: Applying the Primer to the Pebble SDK</a>\n\n<a title=\"Pebble Watch Face SDK Tutorial #3: Setting up a Ubuntu Virtual Machine for Development\" href=\"http://ninedof.wordpress.com/2013/06/20/pebble-watch-face-sdk-tutorial-3-setting-up-a-ubuntu-virtual-machine-for-development/\">Part #3: Setting Up a Ubuntu Environment for Development</a>\n\n<strong>Introduction</strong>\n\nThis is the section you've all been waiting for, I suspect. Here, we'll examine the key functions and features of a basic watch face source file, and how it all fits together. By the end of this section, you should have assembled your very first watch face!\n\nIn summary:\n<ul>\n\t<li>Pre-processor statements</li>\n\t<li>Static allocation vs. Stack allocation</li>\n\t<li>Handler functions</li>\n\t<li>Getting the time from the system and 24 hour compatibility</li>\n\t<li>Minute ticks vs. seconds ticks</li>\n\t<li>The resource map</li>\n\t<li>Compiling and installing</li>\n</ul>\nLets begin!\n\n<strong>Pre-processor statements</strong>\n\nThese special statements let you give instructions to the compiler. There are two types I'll mention here, <code>#include</code> and <code>#define</code>. The former tells the compiler to include extra files that contain functions, data structure types and constant values provided by the Pebble SDK. The latter lets you specify a key word to represent a value (such as a left hand margin) so you can avoid typing that number over and over again.\n\nAnother big advantage of using a <code>#define</code>ed variable is that if you use it as (for example) a margin for all features of the watch face and then decide to change that value, you can simply just change the <code>#define</code> statement and not every single instance where it is used. Neat, eh?\n\nHere is how those statements are used for a Pebble watch face:\n\n[code language=\"cpp\"]\n//Include files from SDK\n#include &quot;pebble_os.h&quot;\n#include &quot;pebble_app.h&quot;\n#include &quot;pebble_fonts.h&quot;\n[/code]\n\nThe #define statement is used to define the Universally Unique Identifier, a random number that uniquely defines your watch face. It is used by the Pebble OS to let you overwrite your watch face with a new version.\n\n[code language=\"cpp\"]\n\n//Define Universally Unique Identifier\n//    88a97cfd-2377-463a-84bd-b85eb4964063\n#define UUID { 0x88, 0xa9, 0x7c, 0xfd, 0x23, 0x77, 0x46, 0x3a, 0x84, 0xbd, 0xb8, 0x5e, 0xb4, 0x96, 0x40, 0x63 }\n\n[/code]\n\nEach watch face MUST have a new one! Here is how you generate a new one in Ubuntu, using the 'uuidgen' command:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/06/uuidgen.png\"><img class=\"aligncenter size-full wp-image-589\" alt=\"uuidgen\" src=\"http://ninedof.files.wordpress.com/2013/06/uuidgen.png\" width=\"489\" height=\"256\" /></a>\n\n<strong>Static allocation vs. Stack allocation</strong>\n\nAs you saw in Part #2, if you declare a variable or structure outside ANY function (usually at the top of the file) then it is visible to all parts of the program (it is globally accessible). Once it is declared, that memory is kept safe for later use.\n\nThe opposite of this is called 'stack allocation' and is much different. With stack allocation, you can imagine a stack of variables in memory like a stack of cards. When you call a function, any declarations you put in there are added to the top of the stack of memory. When the function returns or exits, these variables are freed up to make more memory available, as it is assumed they are only needed for that function. The variable is declared 'locally'.\n\nSo, if you know you want to keep data for later, declare it globally. If you only need it for a single calculation, declare it locally!\n\nFor our watch face, we declare the watch face features globally, as well as memory for the string containing the current time (more on how we get that later):\n\n[code language=\"cpp\"]\n\n//Declare structures for watch face elements\nWindow window;\nTextLayer timeLayer;\n\n//Declare variable for storing time string\nstatic char hourText[] = &quot;00:00&quot;;\n\n[/code]\n\n<strong>Handler functions</strong>\n\nIn a Pebble watch face, there are certain functions that aren't called by the programmer (you), but by the system. An example is a function called every time a second ticks by. You can't know when this is, but the system does (it's a watch, after all!). What you can do as the programmer is specify what happens in this function, and leave the actual calling of it to the system. It 'handles' that scenario for you.\n\nThere are many different 'handler' functions, but the two main ones I'll introduce here are the 'init handler' and the 'tick handler'. There are also handlers for buttons, 2-way communication events and animation etc.\n\nThe 'init handler' is called as soon as you switch to your watch face. Any initialisation of watch face features and structures is placed in here, so it is all done for you in one go when you open the watch face.\n\nHere is the 'init handler' for our basic watch face. Try and read what each function call does. Their names should be pretty self explanatory:\n\n[code language=\"cpp\"]\n\n/**\n* Watch face initialisation handle function\n*/\nvoid handle_init(AppContextRef ctx) {\n(void)ctx;    //This is not needed. Convert to void (nothing)\n\n//Initialise window\nwindow_init(&amp;window, &quot;Window Name&quot;);\nwindow_stack_push(&amp;window, true);\nwindow_set_background_color(&amp;window, GColorBlack);\n\n//Initialise TextLayers\ntext_layer_init(&amp;timeLayer, GRect(30, 30, 150, 50));\ntext_layer_set_background_color(&amp;timeLayer, GColorClear);\ntext_layer_set_text_color(&amp;timeLayer, GColorWhite);\ntext_layer_set_font(&amp;timeLayer,\nfonts_get_system_font(FONT_KEY_BITHAM_30_BLACK));\ntext_layer_set_text_alignment(&amp;timeLayer, GTextAlignmentLeft);\n\n//Add to window\nlayer_add_child(&amp;window.layer, &amp;timeLayer.layer);\n\n//Set initial time so display isn't blank\nPblTm time;\nget_time(&amp;time);\nsetTime(&amp;time);\n}\n\n[/code]\n\nThe 'tick handler' is a function called when the watch face 'ticks', either every minute or every second. For saving power and helping keep the watch asleep as much as possible, it is wise to use a minute tick handler. If you want a more active watch face, use a second tick handler. We will start with a second tick handler in our basic watch face:\n\n[code language=\"cpp\"]\n\n/**\n* Handle function called every second\n*/\nvoid handle_second_tick(AppContextRef ctx, PebbleTickEvent *t) {\n(void)ctx;\n\nPblTm time;    //Structure to store time info\nget_time(&amp;time);    //Fill the structure with current time\n\nint seconds = time.tm_sec;    //Get the current number of seconds\n\nif(seconds == 0)\nsetTime(t-&gt;tick_time);    //Change the time on the 'zero seconds' mark\n}\n\n[/code]\n\nSo that the system can call these handler functions, we specify them in a function called 'pbl_main'. The exact details of how this function is laid out is not covered here, but how each handler is registered is done the same way, and can be seen in other examples. Here is the 'pbl_main' function for our basic watch face:\n\n[code language=\"cpp\"]\n\n/**\n* Main Pebble app loop\n*/\nvoid pbl_main(void *params) {\nPebbleAppHandlers handlers = {\n.init_handler = &amp;handle_init,    //Register initialisation function\n\n.tick_info = {\n.tick_handler = &amp;handle_second_tick,    //Register tick function\n.tick_units = SECOND_UNIT    //Specify to call every minute\n}\n};\napp_event_loop(params, &amp;handlers);    //Continue from there!\n}\n\n[/code]\n\nThis brings up an important point: The functions specified by the Pebble SDK <strong>MUST </strong>be named how they are specified in the examples and the API documentation. There is no flexibility here.\n\nHowever, the handler functions can be called whatever you like (as long as they are C legal) , but when you register them you must supply the exact same name.\n\n<strong>Getting the time (And 24 hour compatibility)</strong>\n\nThe one thing a watch face file must do is tell the time! To do this, there is a function supplied by the Pebble SDK called 'string_format_time', which uses:\n<ul>\n\t<li>A string you've declared to store the time as a string</li>\n\t<li>The size of the string (luckily there is a function supplied called 'sizeof'</li>\n\t<li>The format of the time you want (<a title=\"strftime\" href=\"http://php.net/manual/en/function.strftime.php\">According to the rules specified here</a>)</li>\n\t<li>The source of the time, which is a PblTm structure.</li>\n</ul>\nHere is an example here, in conjunction with another function that tells you what the user's Settings preference is, which returns type <code>bool</code> (<code>true</code> or <code>false</code>), so you can use it in the if else style with ease:\n\n[code language=\"cpp\"]\n\n/**\n* Function to set the time and date features on the TextLayers\n*/\nvoid setTime(PblTm *t) {\n\n//If user selects '24hr' in Settings on the watch\nif(clock_is_24h_style())\nstring_format_time(hourText, sizeof(hourText), &quot;%H:%M&quot;, t);\nelse\nstring_format_time(hourText, sizeof(hourText), &quot;%I:%M&quot;, t);\n\n//Set the TextLayer text\ntext_layer_set_text(&amp;timeLayer, hourText);\n}\n\n[/code]\n\n<strong>Minute ticks vs. seconds ticks</strong>\n\nAs I mentioned earlier, battery life can be saved by working with the watch's 'aggressive sleep' philosophy. By only calling the tick handler every minute, the watch can spend a good deal more of it's time asleep in a low power state. Here is how the tick handler would look after changing to a minute tick basis:\n\n[code language=\"cpp\"]\n\n/**\n* Handle function called every minute\n*/\nvoid handle_minute_tick(AppContextRef ctx, PebbleTickEvent *t) {\n(void)ctx;\n\nPblTm time;    //Structure to store time info\nget_time(&amp;time);    //Fill the structure with current time\nsetTime(t-&gt;tick_time);    //Change time on 'zero seconds' mark\n}\n\n[/code]\n\nNotice the differences with the image previous, which showed the second tick handler. It is simpler to implement. However, with the second handler, you can open the possibility of animations happening at different point.\n\nFor example, in one of my watch faces '<a title=\"Split Horizon Watch Face\" href=\"http://www.mypebblefaces.com/view?fID=3837&amp;aName=Bonsitm&amp;pageTitle=Split+Horizon%3A+Seconds+Edition&amp;auID=3905\">Split Horizon</a>' (shameless plug!) there is animation happening to tell the user how far thorough the minute they are with markers that slide into view showing 15, 30, 45 and 60 seconds past the minute. These are allowed through a second handler with <code>if(seconds == 15)</code> etc conditional statements.\n\nOnce again, the handle function name can be changed, so long as the name used in 'pbl_main' is kept in sync:\n\n[code language=\"cpp\"]\n\n/**\n* Main Pebble app loop\n*/\nvoid pbl_main(void *params) {\nPebbleAppHandlers handlers = {\n.init_handler = &amp;handle_init,    //Register initialisation function\n\n.tick_info = {\n.tick_handler = &amp;handle_minute_tick,    //Register tick function\n.tick_units = MINUTE_UNIT    //Specify to call every minute\n}\n};\napp_event_loop(params, &amp;handlers);    //Continue from there!\n}\n\n[/code]\n\nNotice the '.tick_units' field is different now, to reflect the new tick basis.\n\n<strong>Extra bits and pieces</strong>\n\nThere are a couple extra pieces each watch face file needs.\n\nThe first is the PBL_APP_INFO function call which contains information such as watch face name, author, version number, icons etc:\n\n[code language=\"cpp\"]\n\n//Set app info\nPBL_APP_INFO(UUID, &quot;First Watch Face&quot;, &quot;Chris Lewis&quot;, 0, 1, DEFAULT_MENU_ICON, APP_INFO_WATCH_FACE);\n\n//UUID, app name, author, minor version, major version,\n//use default icon, tell compiler this is a face\n\n[/code]\n\nThe second is the Resource Map. This is a file that is like a catalogue of all the resources you used in your watch face, such as custom images and fonts. Since there are none of those things in this basic example, it can be left as the dummy file supplied with the SDK examples, and included in the link to the finished project files at the end of this post.\n\n<b>Compiling</b><strong> and installing</strong>\n\nHere comes the fun bit: feeding your watch face source file into the compiler and receiving the install file to upload to your watch. If you've followed Step 1 and Step 2 in the API install instructions from Part 3 on Ubuntu then you should know how to do this, but here is brief summary if you have forgotten <strong>('&lt;path to PebbleKit&gt;' should be replaced with that path)</strong>:\n<ol>\n\t<li>Set up the new project folder to include all the requisite links to the sdk using the following Terminal commands: <code>cd ~/&lt;path to the folder above your project folder&gt;</code> and then <code>~/&lt;path to PebbleKit&gt;/Pebble/tools/create_pebble_project.py --symlink-only ~/&lt;path to PebbleKit&gt;/Pebble/sdk &lt;newprojectfolder&gt;</code></li>\n\t<li>Go to the new project folder with <code>cd &lt;newprojectfolder&gt;</code></li>\n\t<li>Configure and build with <code>./waf configure build</code></li>\n</ol>\nThe output file will be found in &lt;project folder&gt;/build and has the extension '.pbw'.\n\nOn cloudpebble.net, this can all be done by selecting 'compilation' and then 'run build'.\n\nCopy this to your Dropbox, or use the python script from the Pebble SDK (instructions in the API documentation) or any other method of navigating to it on your phone (such as copying to SD card and a file manager), and the Pebble App will do the rest!\n\n<strong>Conclusion</strong>\n\nSo, hopefully you'll have all the information you need to build your first Pebble watch face. Tweak the values in the example code segments to see their effect (such as layer GRect co-ordinates and GColors), or tweak some other examples from the SDK and the Web.\n\n<a title=\"Source code!\" href=\"https://www.dropbox.com/s/4b3k0cosg1u1q4k/FirstWatchFace.zip\"><strong>HERE IS A LINK TO THE COMPLETE EXAMPLE PROJECT!</strong></a>\n\n<strong>Next time</strong>\n\nNext section I'll show you how to use your own fonts, display bitmap images and do simple animations.\n\n<strong>Announcement</strong>\n\nFor the next ten days, I'll won't be able to write. I'm glad I've managed to get Parts 1 to 4 done so you can do the complete basic journey, but be assured that while I'm away I'll be making copious notes on the next Parts! I'd be very grateful if you could bear with me! If I find time I'll try and check back here and answer any questions that have arisen.\n\nBest of luck!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "629",
    "title": "Pebble Watch Face SDK Tutorial #5: Animations, Images and Fonts",
    "link": "https://ninedof.wordpress.com/2013/07/07/pebble-watch-face-sdk-tutorial-5-animations-images-and-fonts/",
    "pubDate": "Sun, 07 Jul 2013 13:29:34 +0000",
    "postDate": "2013-07-07 13:29:34",
    "body": "<strong>Links to Previous Sections:</strong>\n\nHere are links to the previous sections of this tutorial. Read them if you haven’t to get up to speed!\n\n<a title=\"Pebble Watch Face SDK Tutorial #1: Beginner’s Primer to the C Language\" href=\"http://ninedof.wordpress.com/2013/06/19/pebble-watch-face-sdk-tutorial-1-beginners-primer-to-the-c-language/\">Part #1: Beginner’s Primer to the C Language</a>\n\n<a title=\"Pebble Watch Face SDK Tutorial #2: Applying the Primer to the Pebble SDK\" href=\"http://ninedof.wordpress.com/2013/06/20/pebble-watch-face-sdk-tutorial-2-applying-the-primer-to-the-pebble-sdk/\">Part #2: Applying the Primer to the Pebble SDK</a>\n\n<a title=\"Pebble Watch Face SDK Tutorial #3: Setting up a Ubuntu Virtual Machine for Development\" href=\"http://ninedof.wordpress.com/2013/06/20/pebble-watch-face-sdk-tutorial-3-setting-up-a-ubuntu-virtual-machine-for-development/\">Part #3: Setting Up a Ubuntu Environment for Development</a>\n\n<a title=\"Part 4\" href=\"http://ninedof.wordpress.com/2013/06/21/pebble-watch-face-sdk-tutorial-4-anatomy-of-your-first-watch-face/\">Part #4: Anatomy of your First Watch Face</a>\n\n<strong>Introduction</strong>\n\nIn this section we will be looking at some more advanced features of the Pebble SDK you can apply to your watch faces. These are animations, images and fonts.\n\nAnimations allow you to create smooth movement of Layers on screen. Images can  enhance the look and feel of your watch face but come with a few constraints. Fonts offer the easiest real customisation of the text elements of the watch face, most importantly those that tell the time!\n\nAs each new feature type is introduced, I'll explain the conditions and limitations, the functions used to implement the them as well as sample functions I've written as 'wrappers' to the lines of code you may find yourself writing together over and over again, to make things simpler.\n\n<strong>The Resource Map</strong>\n\nFirst, a key part of any watch face that uses outside resources such as bitmap images and fonts is the Resource Map file. This is a JSON file that tells the compiler where all the resources you have used in your watch face are, so it can include them in the install package.\n\nWhereas your source file lives in <code>/src/</code>, the resource map lives in <code>/resources/src/</code>. The resources themselves are easiest located along side, for example, an image might go in <code>/resources/src/images/</code> and a font in <code>/resources/src/fonts/</code>.\n\nThe exact syntax of each resource referenced in this file <a title=\"JSON syntax\" href=\"http://www.w3schools.com/json/json_syntax.asp\">can be found here</a>, but the form is easy to copy or mimic for each new resource you add, with a couple of example below:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/json-example.png\"><img class=\"aligncenter size-full wp-image-643\" alt=\"JSON example\" src=\"http://ninedof.files.wordpress.com/2013/07/json-example.png\" width=\"456\" height=\"499\" /></a>\n\nDon't worry if you can't make complete sense of straight away!\n\nIn the source file side of things, you must initialise the resources you plan to use in the 'handle_init' function before you can use them. This is shown below:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/resource-init.png\"><img class=\"aligncenter size-full wp-image-644\" alt=\"Resource init\" src=\"http://ninedof.files.wordpress.com/2013/07/resource-init.png\" width=\"396\" height=\"46\" /></a>\n\nMake sure the APP_RESOURCES name matches that in the versionDefName in the JSON file itself.\n\nThis function call allows you to use the resources as named in the JSON file when functions ask you for the RESOURCE_ID.\n\n<strong>Animations</strong>\n\nAnimations allow a static watch face to come alive and become more expressive. An example of an implementation of these can be found in my <a title=\"Split Horizon\" href=\"http://www.mypebblefaces.com/view?fID=3837&amp;aName=Bonsitm&amp;pageTitle=Split+Horizon%3A+Seconds+Edition&amp;auID=3905\">Split Horizon: Seconds Edition</a> watch face. Blocks slide in from the top to mark the 15, 30, 45 and 60 second marks, and two half-screen-sized InverterLayers come in and out again to reveal the new time when the minute ticks over.\n\nTo do all this, you need to use a structure called PropertyAnimation. When using this to animate a Layer of your choice, you must do a number of steps in a certain order.\n<ol>\n\t<li>First, initalise the PropertyAnimation with the PropertyAnimation structure, the Layer to be moved and start and end locations (GRects)</li>\n\t<li>Set the duration of the animation (in milliseconds) and the curve type (Easing in or out for example)</li>\n\t<li>Schedule the animation. As soon as this is called, the animation will start pretty much instantaneously.</li>\n</ol>\nAs promised earlier, here is a function that neatly wraps up all this into one function call you can use to make the main function easier to read (Click the image to see it better):\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/animatelayer.png\"><img class=\"aligncenter size-large wp-image-645\" alt=\"AnimateLayer\" src=\"http://ninedof.files.wordpress.com/2013/07/animatelayer.png?w=545\" width=\"545\" height=\"82\" /></a>\n\nAn extra stage you can take to make the animations more complex is to use the delay feature. With a second tick handler, the fastest you can have animations start is on each second tick. But with the delay feature, you can add, say, a 500 ms delay and have one animation start half a second after the first. Here is another wrapper function, see if you can spot the difference:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/animatelayerlater.png\"><img class=\"aligncenter size-large wp-image-646\" alt=\"AnimateLayerLater\" src=\"http://ninedof.files.wordpress.com/2013/07/animatelayerlater.png?w=545\" width=\"545\" height=\"138\" /></a>\n\nThe final note on this is that at the moment the PropertyAnimation can only animate properties of a Layer. There are details in the API documentation the show you how to implement an animation for pretty much anything, but it is beyond the scope of this tutorial series.\n\n<strong>Images (Bitmaps)</strong>\n\nAnother way to add detail to your watch  face is to include some images. Some traditional watch faces use a bitmap background with hands or text time drawn on top for added effect.\n\nThe recommended format of images to be used is a 2-colour (black and white in other words) '.png' file that is less than the size of the screen (common sense, to save space). Here is an example image:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/bnw-png-12.png\"><img class=\"aligncenter size-full wp-image-656\" alt=\"BNW PNG 1\" src=\"http://ninedof.files.wordpress.com/2013/07/bnw-png-12.png\" width=\"144\" height=\"168\" /></a>\n\nDue to the black and white nature of these images, shades of gray are impossible. The next best thing however is to use a technique known as 'dithering', which alternates black and white pixels to emulate a shade of gray from a distance.\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/bnw-png-2.png\"><img class=\"aligncenter size-full wp-image-648\" alt=\"BNW PNG 2\" src=\"http://ninedof.files.wordpress.com/2013/07/bnw-png-2.png\" width=\"144\" height=\"168\" /></a>\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/bnw-png-3.png\"><img class=\"aligncenter size-full wp-image-649\" alt=\"BNW PNG 3\" src=\"http://ninedof.files.wordpress.com/2013/07/bnw-png-3.png\" width=\"144\" height=\"168\" /></a>\n\nGetting the balance right with dithering is all trial and error, but I find that 60% or 80% is a good value, depending on the nature of the image.\n\nNow that you have your image, place it in the right directory. You can choose this but the path must be mentioned relative to the project root folder (The folder containing the <code>/src/</code> and <code>/resources/</code> directories). Once this is done, add a reference to it in the JSON file, with a memorable name. An example is below:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/png-def.png\"><img class=\"aligncenter size-full wp-image-650\" alt=\"png def\" src=\"http://ninedof.files.wordpress.com/2013/07/png-def.png\" width=\"283\" height=\"95\" /></a>\n\nThe 'type' is the file type. The 'defName' is the name you will use in the source file. The 'file' is the path of the resource file relative to the JSON file.\n\nThe next step is to make sure you are initialising the Resources in your main source file, as shown in the 'The Resource Map' section above.\n\nFinally, call the requisite functions from the API documentation to initialise and place your image on the watch face. Again, here is an annotated wrapper function as an example:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/setimage.png\"><img class=\"aligncenter size-large wp-image-651\" alt=\"setImage\" src=\"http://ninedof.files.wordpress.com/2013/07/setimage.png?w=545\" width=\"545\" height=\"356\" /></a>\n\n<strong>Fonts</strong>\n\nFinally we come to fonts. These are slightly easier to use than bitmaps, but still require the proper declaration in the JSON, initialising app resources etc.\n\nA font file to be used on a watch face should be a '.ttf' TrueType font. Many are available for free from sites on the web. Once you have one you like (You can install it and test it out in Word or the system font viewer), place it in the correct folder. Again, you can choose this, but it must be written precisely in the JSON declaration. Here is an example:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/def-font.png\"><img class=\"aligncenter size-full wp-image-652\" alt=\"def font\" src=\"http://ninedof.files.wordpress.com/2013/07/def-font.png\" width=\"319\" height=\"91\" /></a>\n\nIt is important to note that the point size of the font to be used is declared using the '_XX' at the end of  the defName in the JSON file. See the example image above for just that (This will be font size 30). Therefore you can have almost as many font sizes as you like from just <strong>one </strong>font file. You do not need to include multiple copies of the same '.ttf' file for each size font you want to use.\n\nOnce this is done, and the app resources have been initialised as mentioned in the last two sections, you can use it as a font in a TextLayer of your choosing in the watch face source file. Here is how that is done (This is another long one, click it to see it clearly):\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/setfont.png\"><img class=\"aligncenter size-large wp-image-653\" alt=\"setFont\" src=\"http://ninedof.files.wordpress.com/2013/07/setfont.png?w=545\" width=\"545\" height=\"8\" /></a>\n\n<strong>Conclusion</strong>\n\nSo there you have animations, images and fonts. Go wild. But not too wild, because there are file size limits on the install packages ('.pbw' files), although I've yet to hit them in normal use.\n\n<strong>Next Time</strong>\n\nIn the next part I will be detailing how to perform simple communications with a connected Android app. I'm afraid that due to available devices and iOS costs, Android will be the only perspective offered. Sorry!<strong></strong>\n\n<strong>If you are unfamiliar with Java and/or Android app development, speak up either here or on my <a title=\"General Discussion thread\" href=\"http://forums.getpebble.com/discussion/6054/who-wants-a-pebble-watch-face-tutorial-parts-1-to-4-released\">General Discussion</a> thread and I will fill in the gap with a Java and Android Primer!</strong>",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "663",
    "title": "Android Engine Update",
    "link": "https://ninedof.wordpress.com/2013/07/08/android-engine-update/",
    "pubDate": "Mon, 08 Jul 2013 11:50:28 +0000",
    "postDate": "2013-07-08 11:50:28",
    "body": "So, <a title=\"Android Engine on the way?\" href=\"http://ninedof.wordpress.com/2013/03/28/android-engine-on-the-way/\">a while ago now</a> I created an iterative Android game engine, and used it to <a title=\"Raiders for Android\" href=\"http://ninedof.wordpress.com/2013/03/31/raiders-for-android/\">port Raiders</a>. It went pretty well, and I got good performance out of it. But an almost inevitable truth I have come to accept in starting a new project based off an old (This time being porting Railways to Android) is that by the time I revisit the old code, I've learned so much more that it makes me wince to even read it.\n\nThere have been occasions where I've reduced the size of a source file by <strong>three times</strong> or more, simply by applying much more precise implementation conventions. It ends up faster, more memory efficient and easier to read and tweak. This is all good!\n\nWhile I was contemplating this new port, it occurred to me I could make things a lot simpler for myself by creating a general <code>Engine</code> class, and simply extending it whenever I wanted a specific game implemented.\n\nThe general philosophy I've adopted for making games on Java and Android has been an iterative game loop and render loop. This means that for each frame, every in-game object gets one <code>update()</code> call (so move once etc), then one <code>render()</code> call to draw it. When the Java engine was made threaded, performance increased even more, but the same could not be applied to my Android phone, which is only single core. After an attempted implementation, performance was pretty inconsistent, which I chalked up to perhaps the constant changing of Thread context. We may never know.\n\nGetting back to the new ideas, I've cleaned up my Android engine to the point where the state machine is internalised along with all the touch IO. To implement a new 'menu &lt;-&gt; in-game' style game all I have to do now is extend the engine and override six functions:\n<ul>\n\t<li><code>loadMenuMembers()</code> - Allocate all objects that appear in the menu</li>\n\t<li><code>loadGameMembers()</code> - Allocate all objects that appear in-game</li>\n\t<li><code>menuUpdateLoop()</code> - Update all interactive objects in the menu</li>\n\t<li><code>gameUpdateLoop()</code> - Update all the interactive objects in-game</li>\n\t<li><code>menuRenderLoop()</code> - Render all the menu objects</li>\n\t<li><code>gameRenderLoop()</code> - Render all the in-game objects</li>\n</ul>\nThese functions are called at the appropriate times by the superclass engine, and so the rest can be ignored by the coder, leaving them to focus on only the elements of their game.\n\nMuch simpler!",
    "tags": [
      "Android"
    ]
  },
  {
    "id": "680",
    "title": "Split Horizon Watch Face Update (v4)",
    "link": "https://ninedof.wordpress.com/2013/07/09/split-horizon-watch-face-update-v4/",
    "pubDate": "Tue, 09 Jul 2013 19:09:19 +0000",
    "postDate": "2013-07-09 19:09:19",
    "body": "Here's another update to the Split Horizon watch faces, this time adding a 'AM/PM' indicator when the watch is in 12 hour mode, by user request. Also, small font artefacts are fixed by reducing the month font size by a point.\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/split-v4.png\"><img class=\"aligncenter size-full wp-image-681\" alt=\"Split v4\" src=\"http://ninedof.files.wordpress.com/2013/07/split-v4.png\" width=\"365\" height=\"390\" /></a>Links to mypebblefaces to download all three editions <a title=\"Split Horizon on mypebblefaces.com\" href=\"http://www.mypebblefaces.com/view?fID=3837&amp;aName=Bonsitm&amp;pageTitle=Split+Horizon%3A+Seconds+Edition&amp;auID=3905\">can be found here</a>.\n\nSource code <a title=\"Split Horizon Source Code v4\" href=\"https://www.dropbox.com/s/00q0ky4qmmpj60k/Split%20Horizon%20Source%20and%20Bundle%20v3.zip\">can be found here</a>.\n\nEnjoy!\n\n&nbsp;",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "692",
    "title": "Upcoming Posts",
    "link": "https://ninedof.wordpress.com/2013/07/11/upcoming-posts/",
    "pubDate": "Thu, 11 Jul 2013 01:32:50 +0000",
    "postDate": "2013-07-11 01:32:50",
    "body": "Lots going on at the moment, so here's a list of what's coming soon (also a personal reminder!):\n<ol>\n\t<li>Pebble SDK Tutorial Part 6 is written, just needs images. 2 Way Communications.</li>\n\t<li>Java &lt;-&gt; Pebble text bridge Android Service.</li>\n\t<li>Raspberry Pi obtained, working on Java &lt;-&gt; Pi text bridge using Pi Python.</li>\n</ol>\nGot to do my best not to lose sight of a current project!",
    "tags": [
      "Uncategorized"
    ]
  },
  {
    "id": "700",
    "title": "Pebble Watch Face SDK Tutorial #6: 2 Way Communication with Android",
    "link": "https://ninedof.wordpress.com/2013/07/11/pebble-watch-face-sdk-tutorial-6-2-way-communication-with-android/",
    "pubDate": "Thu, 11 Jul 2013 21:20:47 +0000",
    "postDate": "2013-07-11 21:20:47",
    "body": "<strong>Previous Tutorial Sections</strong>\n\nAll five previous parts of this tutorial series can be found on the 'Pebble SDK Tutorial' page link at the top of the page. Please read them if you are not already up to speed!\n\n<strong>Introduction</strong>\n\nOne of the main selling points of the Pebble smartwatch is the fact that it can run apps that communicate with a companion app on an iPhone or Android smartphone. Indeed, it is impossible to get started without one. In the spirit of openness that is also a major selling point, this part of the tutorial series will describe how to accomplish such a task, enabling a much richer watch app experience.\n\nThanks to the remarkable amount of example code and documentation provided in the relatively early Pebble SDK v1.12, a lot of the code I will be using and showing here is derived from these examples. No need to fix what isn't broken, and all that! They've done an excellent job on this one already.\n\nAs I have mentioned previously, I will only be covering the phone app side from an Android perspective, due to the fact I don't own an iOS device or agree with Apple's pricing policy to enter the ecosystem, but that's just personal opinion.\n\nIt is assumed that the reader is already familiar with basic Android app development and the application lifecycle. If not, I could write an Android primer, which would in turn require a working knowledge of Java. We'll see if that is required! Please let me know so I can gauge demand.\n\n<b>AppMessage system overview</b>\n\nOn the Pebble platform, this is done using the AppMessage system. On the watch and on the phone, data is stored inside data structures called Dictionaries. When data is send or received, it is stored in data structures called Tuples. A Tuple contains a key and the data itself in what is known as a key-value pair. The key is a 'label' for that data and is constant.\n\nFor example, if you were writing an app to show the weather, you might have an <code>int</code> to store the temperature. You create a key (number) to identify this data, and all these keys are the same on both the watch app and the phone app. Lets set the key for the temperature variable to a value of '5'. The phone sends a Dictionary consisting of a tuple with the temperature data contained within, with a key value of '5'. When this data arrives on the watch app, because the key identifying the temperature variable is the same as on the phone app, the Dictionary is searched for the tuple with key value '5', and knows the accompanying data is the temperature to be displayed.\n\nIf that explanation leaves you wanting, here's an diagram that will hopefully make it clearer:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/key-and-data-life.png\"><img class=\"aligncenter size-full wp-image-710\" alt=\"key and data life\" src=\"http://ninedof.files.wordpress.com/2013/07/key-and-data-life.png\" width=\"500\" height=\"500\" /></a>\n\n<strong>Common App Features</strong>\n\nIn order to make sure that the phone app sends data to the correct watch app, both apps must use the same UUID to identify them. This has already been covered for the watch app, so here is how this is done on the phone app:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/uuid-member.png\"><img class=\"aligncenter size-large wp-image-711\" alt=\"UUID member\" src=\"http://ninedof.files.wordpress.com/2013/07/uuid-member.png?w=545\" width=\"545\" height=\"35\" /></a>\n\nHere is how the phone app would store the keys. Remember that these should be identical to those declared on the watch app!\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/keys.png\"><img class=\"aligncenter size-full wp-image-712\" alt=\"KEYS\" src=\"http://ninedof.files.wordpress.com/2013/07/keys.png\" width=\"442\" height=\"323\" /></a>\n\n<strong>Watch App Specifics</strong>\n\nOn the watch app side of things, as predicted there is a use of handler functions to manage the following events:\n<ul>\n\t<li>Send successful - AppMessage was sent successfully</li>\n\t<li>Send failed - AppMessage failed to send (or was not Acknowledged by phone app)</li>\n\t<li>Receive successful - AppMessage received from phone app</li>\n\t<li>Receive failed - AppMessage received but dropped due to lack of space or some other error</li>\n</ul>\nThe first stage to implement this new functionality is to add the following lines to the PebbleAppHandlers in <code>pbl_main()</code>:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/pbl_main-additions1.png\"><img class=\"aligncenter size-full wp-image-714\" alt=\"pbl_main additions\" src=\"http://ninedof.files.wordpress.com/2013/07/pbl_main-additions1.png\" width=\"472\" height=\"465\" /></a>\n\nNext, create the handler functions with <strong>matching names to those referenced in the '.message_info' callbacks section in pbl_main()</strong> for each of the four callback scenarios in the bullet points above. Four blank handlers are shown below:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/blank-handlers.png\"><img class=\"aligncenter size-large wp-image-715\" alt=\"blank handlers\" src=\"http://ninedof.files.wordpress.com/2013/07/blank-handlers.png?w=545\" width=\"545\" height=\"388\" /></a>\n\n<strong>Sending data to the phone app</strong>\n\nTo send data to the phone app, a Dictionary is constructed and filled with the tuples describing the data to be sent, using the appropriate keys. Here is an example function that takes an <code>int</code> and sends it to the phone app (adapted from the one provided in the SDK examples):\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/send_cmd.png\"><img class=\"aligncenter size-large wp-image-716\" alt=\"send_cmd\" src=\"http://ninedof.files.wordpress.com/2013/07/send_cmd.png?w=545\" width=\"545\" height=\"311\" /></a>\n\nThe argument sent here would be matched with a corresponding action on the phone app. In this example project (link to the source code will be at the end) each of the three buttons is given a key of 0, 1 or 2 (Select, Up, Down). When the up button is pressed,  the watch app sends '1' to the phone app. Because the keys are the same on both sides, when the phone app receives '1' it can use that to perform the action the programmer wants to perform upon an up button press.\n\n<strong>Receiving data from the watch on the phone</strong>\n\nOn the phone app side, the Dictionary is received in a callback method which is registered with the Android system when the app starts, in <code>onResume()</code>:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/onresume.png\"><img class=\"aligncenter size-large wp-image-717\" alt=\"onResume\" src=\"http://ninedof.files.wordpress.com/2013/07/onresume.png?w=545\" width=\"545\" height=\"476\" /></a>\n\nHopefully you can see that when the callback is triggered, the data is identified by the key, again it must correspond to the key on the watch app. This value is then used in a switch statement to decide what action to take. <strong>The phone app must first acknowledge (ACK) the data so the watch app doesn't report a timeout.</strong>\n\nAnother important note is that the callback must be unregistered in <code>onPause()</code> when the phone app is closed to prevent events being missed. Here is how that is done:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/onpause.png\"><img class=\"aligncenter size-large wp-image-718\" alt=\"onPause\" src=\"http://ninedof.files.wordpress.com/2013/07/onpause.png?w=545\" width=\"545\" height=\"130\" /></a>\n\n<strong>Sending data back to the watch app</strong>\n\nGoing back in the opposite direction, data is sent to the watch app by making use of a PebbleDictionary and key-value tuples. The methods used for this are provided by the PebbleKit SDK packages, which you can use and import by copying the packages into the 'src' folder of your Android project (shown here in Eclipse IDE for Java Developers):\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/packages.png\"><img class=\"aligncenter size-full wp-image-719\" alt=\"packages\" src=\"http://ninedof.files.wordpress.com/2013/07/packages.png\" width=\"254\" height=\"506\" /></a>\n\nThe process for sending data from the phone app to the watch app is largely similar to the same process started from the watch app:\n<ol>\n\t<li>Create the Dictionary (or PebbleDictionary in this case)</li>\n\t<li>Populate it with key-value tuples containing the data to be sent</li>\n\t<li>Send the Dictionary using the UUID (same as the watch app UUID)</li>\n</ol>\nThis process is summarised in the image below, with comments for clarity:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/send-to-pebble.png\"><img class=\"aligncenter size-large wp-image-720\" alt=\"send to pebble\" src=\"http://ninedof.files.wordpress.com/2013/07/send-to-pebble.png?w=545\" width=\"545\" height=\"284\" /></a>\n\n<strong>Receiving data on the watch app</strong>\n\nThe final part of this process is receiving data from the phone app. This is done by (you guessed it!) extracting data from a Dictionary sent from the phone app and provided by the callback handler as an argument.\n<ol>\n\t<li>A DictionaryIterator is used to search the Dictionary for data using the pre-defined key for that identifies the data received.</li>\n\t<li>This data is stored in a tuple</li>\n\t<li>The tuple contents can then be used as you wish</li>\n</ol>\nIn the example below, the Dictionary is searched for the string data associated with the DATA_KEY, which was send from the phone app using the same key. This string is then displayed in a TextLayer for the user to see that the data has arrived successfully. Note that the Pebble OS automatically ACKs the received AppMessage:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/using-received-data-on-watch.png\"><img class=\"aligncenter size-large wp-image-721\" alt=\"using received data on watch\" src=\"http://ninedof.files.wordpress.com/2013/07/using-received-data-on-watch.png?w=545\" width=\"545\" height=\"208\" /></a>\n\n<strong>Conclusion</strong>\n\nSo there you have it! Sending data from watch, receiving it on the phone, then sending data from the phone to the watch and using it. I'll admit, this is the most complicated part of this tutorial series so far, and I hope to provide a bit more of a bridge from API Documentation to understanding the examples.\n\n<a title=\"Example Project Source Code\" href=\"https://www.dropbox.com/s/8pvxfuuor57x7it/AppMessage%20Source.zip\"><strong>The example project source code can be found here!</strong></a>\n\nPlease feel free to post any questions here on in my Pebble Forum thread, and I'll do my best to answer. If there is a lot of demand, I may write an Android primer too, but that's probably another series in itself, and there are plenty of superb ones just a Google search away!",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "738",
    "title": "Raspberry Pi: IP Address to LCD Display",
    "link": "https://ninedof.wordpress.com/2013/07/13/raspberry-pi-ip-address-to-lcd-display/",
    "pubDate": "Sat, 13 Jul 2013 17:30:18 +0000",
    "postDate": "2013-07-13 17:30:18",
    "body": "So a few days ago I acquired a Raspberry Pi. This amazing board is a SoC (System on a Chip) that runs a version of Debian Linux called Raspbian. Since then I've been poking around and finding out how to do my favourite useful stuff (networking, Arduino etc), aided in a way by the basic knowledge of Linux commands obtained from dabbling in Ubuntu.\n\nAfter learning how to send and receive data on a network with Python, and controlling the GPIO pins in the same way as Arduino using <a title=\"wiringPi\" href=\"https://projects.drogon.net/raspberry-pi/wiringpi/\">wiringPi</a>, I decided to try and find a project to complete.\n\nAs I've said to people before when they ask me about leaning to program, a good motivator to learn new features and possibilities of a language is to set a small goal that is just out of reach. For example, say you'd learned enough Java to know how an object is constructed, data stored inside and methods called from it, the stretch goal might be to use a simple object provided by someone else.\n\nIn this spirit I decided to use a combination of Python, wiringPi and scripts to solve a problem I might have had in the near future. Using SSH, I can connect to and command the Pi from another computer, eliminating the need for a mouse, keyboard, HDMI display etc, leaving just ethernet and power connected. In order to do this, I need to know the Pi's IP address. This piece of information is presented to the user when the board is booted, on either the RCA or HDMI display outputs.\n\nThe difficulty here is that the first time the Pi is connected, the IP address it is given will be pseudo-random, and unknown.\n\nBut what if you don't have a TV or monitor in reach? When I move house in a few weeks time, what if the router is too far from the TV? I won't be able to use this method to get the IP. I could connect to the Wi-Fi gateway, but that relies on the service provider implementing a mechanism for doing so, which I can't rely upon.\n\nThis brings us back to finding a project to do. <a title=\"Java to Arduino LCD Output\" href=\"http://ninedof.wordpress.com/2013/05/22/java-to-arduino-lcd-output/\">As I've posted on this very blog</a>, I managed to use an Arduino to show short messages on a standard LCD display, using the LiquidCrystal library. Why not use this display to show the IP address? No TV needed!\n\nAs I quickly found, the LiquidCrystal library didn't appear to be included in wiringPi. Luckily, the author had implemented their own version, the lcd.h header file, with similar functions. So, after making the requisite connections between the boards, and being careful to note these for later use, I had a simple C file that sends a string to the LCD display, when presented as an argument from the terminal. If the argument is too long ( &gt; 16 characters), it is not accepted, and the display instead shows \"Too long!\". If it is between 8 and 16 characters, then it is copied into two buffers each 8 characters in size, then displayed alternately.\n\nOnce this was done, I wrote a Python script (<a title=\"Getting the Raspberry Pi's IP address\" href=\"http://raspberrypi.stackexchange.com/questions/6714/how-to-get-the-raspberry-pis-ip-address-for-ssh\">with help from here</a>) that determined the IP address, and then called the compiled executable that took the address as the argument and send it to the LCD display.\n\nSo far so good. But the main purpose of this exercise was to get around the combined problem of not knowing the IP address assigned by DHCP when the Pi is first introduced to a LAN, and having to TV guaranteed to be within reach. The final step therefore was to have the Python script run on boot. The final process is summed up below:\n<ol>\n\t<li>Boot script /etc/rc.local executes the Python script.</li>\n\t<li>The Python script in turn finds the IP address and calls the LCD executable, supplying the address as an argument.</li>\n\t<li>The LCD executable sends the IP address to the LCD display</li>\n\t<li>I use the IP address now visible to the world to connect using SSH, saving it for later use in the process.</li>\n</ol>\nI think that's mission accomplished! Here is a photo of the finished system in action:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/ip-cutout.png\"><img class=\"aligncenter size-full wp-image-740\" alt=\"IP cutout\" src=\"http://ninedof.files.wordpress.com/2013/07/ip-cutout.png\" width=\"542\" height=\"565\" /></a>As is usual for this type of post, <a title=\"Source!\" href=\"https://www.dropbox.com/s/flvkhkzwh7iyfpa/RPi%20IP%20to%20LCD.zip\">you can find the C and Python source files, as well as a built C executable here</a>. The LCD display pin map is included as a comment in the C file. The Raspberry Pi pins used by the wiringPi library <a title=\"Drogon Pin definitions\" href=\"https://projects.drogon.net/raspberry-pi/wiringpi/pins/\">can be found here</a>.",
    "tags": [
      "Raspberry Pi"
    ]
  },
  {
    "id": "767",
    "title": "RPi: HC-SR04 Ultrasonic Sensor mini-project",
    "link": "https://ninedof.wordpress.com/2013/07/16/rpi-hc-sr04-ultrasonic-sensor-mini-project/",
    "pubDate": "Tue, 16 Jul 2013 22:50:08 +0000",
    "postDate": "2013-07-16 22:50:08",
    "body": "<strong>In an almost biblical revelation, I have found it IS indeed possible to post source code in a proper fashion on Wordpress, making a virtual mockery of my Pebble SDK Tutorial pages, which I might update, but not for now. The code segments are available in source links in each post. </strong>\n\nSo, what better reason to make a new post using this newly discovered feature than to write about my latest Raspberry Pi escapade. I have a cheap <a title=\"HCSR04\" href=\"http://letsmakerobots.com/node/30209\">HC-SR04 ultrasonic sensor</a> that I used with an Ultrasonic library with my Arduino. Having since obtained a Pi, why not have it work with this new piece of kit?\n\nAfter observing the <a title=\"Timing Requirements (Page 2)\" href=\"http://jaktek.com/wp-content/uploads/2011/12/HC-SR04.pdf\">timing requirements</a>, it seemed simple enough to replicate that behavior with a short C program, shown below in all it's copyable glory!\n\n[code language=\"cpp\"]\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;wiringPi.h&gt;\n\n#define TRUE 1\n\n#define TRIG 5\n#define ECHO 6\n\nvoid setup() {\n        wiringPiSetup();\n        pinMode(TRIG, OUTPUT);\n        pinMode(ECHO, INPUT);\n\n        //TRIG pin must start LOW\n        digitalWrite(TRIG, LOW);\n        delay(30);\n}\n\nint getCM() {\n        //Send trig pulse\n        digitalWrite(TRIG, HIGH);\n        delayMicroseconds(20);\n        digitalWrite(TRIG, LOW);\n\n        //Wait for echo start\n        while(digitalRead(ECHO) == LOW);\n\n        //Wait for echo end\n        long startTime = micros();\n        while(digitalRead(ECHO) == HIGH);\n        long travelTime = micros() - startTime;\n\n        //Get distance in cm\n        int distance = travelTime / 58;\n\n        return distance;\n}\n\nint main(void) {\n        setup();\n\n        printf(&quot;Distance: %dcm\\n&quot;, getCM());\n\n        return 0;\n}\n[/code]\n\nWhich results in this output:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/ultrasonic.png\"><img class=\"aligncenter size-large wp-image-770\" alt=\"ultrasonic\" src=\"http://ninedof.files.wordpress.com/2013/07/ultrasonic.png?w=545\" width=\"545\" height=\"140\" /></a>\n\nSo now I know the distance to the ceiling!",
    "tags": [
      "Raspberry Pi"
    ]
  },
  {
    "id": "788",
    "title": "Pebble Watch Face SDK #7: ScrollLayers",
    "link": "https://ninedof.wordpress.com/2013/07/21/pebble-watch-face-sdk-7-scrolllayers/",
    "pubDate": "Sun, 21 Jul 2013 22:01:02 +0000",
    "postDate": "2013-07-21 22:01:02",
    "body": "<strong>Previous Tutorial Sections</strong>\n\nAll six previous parts of this tutorial series can be found on the ‘Pebble SDK Tutorial’ page link at the top of the page. Please read them if you are not already up to speed!\n\n<strong>Introduction</strong>\n\nBy request, this part of the tutorial will focus on using the ScrollLayer structure provided by the Pebble SDK. This is the Layer type used for menus, such as the main menu or settings menu. In fact, the MenuLayer itself contains a ScrollLayer!\n\nThe features of a ScrollLayer are thus:\n<ul>\n\t<li>It can be controlled with the up and down buttons to show more content that can fit on the screen at any one time.</li>\n\t<li>It automatically shows 'shadows' at the top and bottom of the screen to indicate there is more to see in both the up and down direction.</li>\n\t<li>It can contain all the Layers that it scrolls, making parent-child layer management easier.</li>\n</ul>\nLets get started!\n\n<strong>Using a ScrollLayer</strong>\n\nTo make use of this Layer type in a watch app, you will need something to display inside it. For this example, I'll be using a snippet of text from <a href=\"http://getpebble.com\" title=\"getpebble.com\">getpebble.com</a>, in a char array as shown below (using the fiendishly hidden WordPress code tags!):\n\n[code language=\"cpp\"]\nchar scrollText[] = &quot;Pebble is the first watch built for the 21st century. It's infinitely customizable, with beautiful downloadable watchfaces and useful internet-connected apps. Pebble connects to iPhone and Android smartphones using Bluetooth, alerting you with a silent vibration to incoming calls, emails and messages. While designing Pebble, we strove to create a minimalist yet fashionable product that seamlessly blends into everyday life.&quot;;\n[/code]\n\nYou can use other Layer types, but this is good for simplicity.\n\nAs is usual for the Pebble SDK, we call functions to initialize and setup our Window and Layers, in the <code>handle_init()</code> function. I'll show this process below, but first here are the constants and globals that will be making an appearance:\n\n[code language=\"cpp\"]\n//Globals\nWindow window;\nScrollLayer sLayer;\nTextLayer tLayer;\n\n//Maximum dimensions\nstatic int WIDTH = 144;\nstatic int MAX_HEIGHT = 1000;\n\n//Compensate for top window bar\nstatic int TOP_BAR_PADDING = 20;\n[/code]\n\nAnd now the main code segment:\n\n[code language=\"cpp\"]\n/**\n\t* Resource initialisation handle function\n\t*/\nvoid handle_init(AppContextRef ctx) {\n\t(void)ctx;\n\n\t//Init window\n\twindow_init(&amp;window, &quot;Main window&quot;);\n\twindow_set_background_color(&amp;window, GColorWhite);\n\t\n\t//Init ScrollLayer and attach button click provider\n\tscroll_layer_init(&amp;sLayer, GRect(0, 0, 144, 168));\n\tscroll_layer_set_click_config_onto_window(&amp;sLayer, &amp;window);\n\t\n\t//Init TextLayer\n\ttext_layer_init(&amp;tLayer, GRect(0, 0, WIDTH, MAX_HEIGHT));\n\ttext_layer_set_text(&amp;tLayer, scrollText);\n\ttext_layer_set_background_color(&amp;tLayer, GColorClear);\n\ttext_layer_set_text_color(&amp;tLayer, GColorBlack);\n\ttext_layer_set_text_alignment(&amp;tLayer, GTextAlignmentLeft);\n\n\t//Get size used by TextLayer\n\tGSize max_size = text_layer_get_max_used_size(app_get_current_graphics_context(), &amp;tLayer);\n  \n\t//Use TextLayer size\n\ttext_layer_set_size(&amp;tLayer, max_size);\n  \n\t//Use TextLayer size for ScrollLayer - this has to be done manually for now!\n\tscroll_layer_set_content_size(&amp;sLayer, GSize(WIDTH, max_size.h + TOP_BAR_PADDING));\n\t\n\t//Add TextLayer to ScrollLayer to Window\n\tscroll_layer_add_child(&amp;sLayer, &amp;tLayer.layer);\n\tlayer_add_child(&amp;window.layer, (Layer*)&amp;sLayer);\n\n\t//Show Window\n\twindow_stack_push(&amp;window, true);\n}\n[/code]\n\nRead through the code above line by line and see the new additions that you might not have seen before. Below are the ones of note:\n<ul>\n\t<li><code>scroll_layer_init()</code> - This does the same sort of actions as <code>window_init()</code> or <code>text_layer_init()</code> and initializes the ScrollLayer supplied as the first argument.</li>\n\t<li><code>scroll_layer_set_click_config_onto_window()</code> - This gives the ScrollLayer the button click information from the containing window, so that it can respond to button pressed while in this window.</li>\n\t<li><code>text_layer_get_max_size_used()</code> - This returns a GSize that is the dimensions that the TextLayer that the ScrollLayer contains uses. The alternative here is to find the point size of the font and find by trial and error the vertical height from the number of lines the text ends up using - a waste of time!</li>\n\t<li><code>scroll_layer_set_content_size()</code> - This function uses the GSize created before to set the size of the ScrollLayer. Without this information it would not be able to tell how far to be able to scroll up or down. At the moment this must be done manually.</li>\n\t<li><code>scroll_layer_add_child()</code> - This function does the same as the <code>layer_add_child()</code> function we've used before for TextLayers being added to the Window, but this time the Layer supplied as an argument is added to the layout inside the ScrollLayer, and will therefore be scrollable.</li>\n</ul>\nFinally, after using <code>layer_add_child()</code> to add the ScrollLayer to the Window, you should be all set!\n\n<strong>Conclusion</strong>\n\nThe ScrollLayer can be useful for showing a lot of information or a list. It does require some extra thinking about and setup, but it is worth it for the convenience! \n\nFull source code for a sample watch app (derived from the 'demos' supplied with the SDK) <a title=\"Source code!\" href=\"https://www.dropbox.com/s/1k9dmm5nray70wr/ScrollLayerDemo.zip\">can be found here.</a>\n\nHappy scrolling!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "819",
    "title": "Android App: GClient (Working Title)",
    "link": "https://ninedof.wordpress.com/2013/07/25/android-app-gclient-working-title/",
    "pubDate": "Thu, 25 Jul 2013 22:08:52 +0000",
    "postDate": "2013-07-25 22:08:52",
    "body": "<a href=\"http://ninedof.files.wordpress.com/2013/07/gclientlogo.png\"><img class=\"aligncenter size-full wp-image-820\" alt=\"GClientLOgo\" src=\"http://ninedof.files.wordpress.com/2013/07/gclientlogo.png\" width=\"134\" height=\"134\" /></a>While developing a number of different minor projects that involved communication between Android and my laptop, Pebble or Raspberry Pi I found myself almost writing a new app for each project, with names like 'PebbleButtonDemo' or 'AndroidTestClient'.\n\nIt occurred to me 'why keep inventing the wheel?', meaning that this was a wasted practice. The vast majority of these situations simply called for a TCP Socket connection that sent pre-defined commands as text strings. With that in mind, I conspired to create a general purpose app that did these things and did them well.\n\nBut in order to solve the problem of writing a new app for every application when the underlying mechanism remained the same, it needed more 'customisability' than simply an EditText for address and port. The next logical step to this is to allow each project/application (server, that is) to customize the general client on the Android phone to it's purpose, and in this first incarnation offers the following 'customisables':\n<ul>\n\t<li>Android Activity title in the Action bar by sending \"TITLE\" + the new title String</li>\n\t<li>A set of three customizable Buttons by sending 'BUTTON\" followed by the button number, button text and the command it should trigger to be sent back to the application server.</li>\n\t<li>Protocols agreed for these actions in both Java and Python servers I've written.</li>\n</ul>\nMore features are possible with a more advanced protocol, such as sending vectors to draw on the remote Canvas, or even images, but those will have to come later when a specific project calls for it.\n\nSo, upon opening the app, this is what is seen:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/screenshot_2013-07-25-22-37-13.png\"><img class=\"aligncenter size-full wp-image-821\" alt=\"Screenshot_2013-07-25-22-37-13\" src=\"http://ninedof.files.wordpress.com/2013/07/screenshot_2013-07-25-22-37-13.png\" width=\"480\" height=\"800\" /></a>The key UI elements to note are:\n<ul>\n\t<li>The customizable Activity title.</li>\n\t<li>The 'I/O Traffic' section, which contains a customized SurfaceView element (actually a subclass of my <a title=\"Android Engine Update\" href=\"http://ninedof.wordpress.com/2013/07/08/android-engine-update/\">Android Game Engine</a>), which fills up green when a connection is established and animates blue 'bits' left and right whenever data is sent or received.</li>\n\t<li>The 'Connection Settings' section, which contains EditText fields for host address and port number, a Spinner for language selection on the application server side, and connect/disconnect Buttons.</li>\n\t<li>The 'Log History' section contains a ScrollView housing a TextView that shows all events that take place, be they received data, sent commands or local events such as IOExceptions and disconnects.</li>\n\t<li>The 'Custom Buttons' section, which houses the three customizable Buttons that can be setup from the application server side with details I'll now detail below.</li>\n</ul>\nTo continue the spirit of a general purpose app, I created static methods for setting up these customizable UI elements, shown below:\n\n[code language=\"java\"]\npublic class GClientTools {\n\t//Protocol configuration\n\tprivate static final String PROTOCOL_TITLE = &quot;TITLE&quot;;\n\tprivate static final String PROTOCOL_BUTTON = &quot;BUTTON&quot;;\n\tprivate static final String PROTOCOL_SEP_1 = &quot;:&quot;;\n\tprivate static final String PROTOCOL_SEP_2 = &quot;;&quot;;\n\tprivate static final String PROTOCOL_SEP_3 = &quot;.&quot;;\n\n\t/**\n\t * Use the GClient syntax to set the GClient Activity title\n\t * @param inStream \tEstablished output stream.\n\t * @param inTitle\tTitle to set to.\n\t */\n\tpublic static void setTitle(PrintStream inStream,String inTitle) {\n\t\tString packet = PROTOCOL_TITLE + PROTOCOL_SEP_1 + inTitle;\n\t\tinStream.println(packet);\n\t\tSystem.out.println(&quot;Title now '&quot; + inTitle + &quot;'. (&quot; + packet + &quot;)&quot;);\n\t}\n\n\t/**\n\t * Configure a GClient custom button\n\t * @param inStream\t\tEstablished output stream.\n\t * @param inButtonNumber\tWhich button to customise. No range checking.\n\t * @param inText\t\tText to display on the button.\n\t * @param inCommand\t\tCommand the button will send back to this server.\n\t */\n\tpublic static void setCustomButton(PrintStream inStream, int inButtonNumber, String inText, String inCommand) {\n\t\tString packet = PROTOCOL_BUTTON + PROTOCOL_SEP_1 + inButtonNumber + PROTOCOL_SEP_2 + inText + PROTOCOL_SEP_3 + inCommand;\n\t\tinStream.println(packet);\n\t\tSystem.out.println(&quot;Button &quot; + inButtonNumber + &quot; now '&quot; + inText + &quot;' --&gt; &lt;&quot; + inCommand + &quot;&gt;. (&quot; + packet + &quot;)&quot;);\n\t}\n\n}\n[/code]\n\nAs a test case, I wrote a quick application server that accepts the GClient connection and makes use of these static methods to set the Activity title and one custom Button. The I/O Traffic bar has filled up green and the Log History shows all events:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/07/screenshot_2013-07-25-22-36-50.png\"><img class=\"aligncenter size-full wp-image-823\" alt=\"Screenshot_2013-07-25-22-36-50\" src=\"http://ninedof.files.wordpress.com/2013/07/screenshot_2013-07-25-22-36-50.png\" width=\"480\" height=\"800\" /></a>That's it for now. The major things I learned writing this app were:\n<ul>\n\t<li>A much more stable and UI friendly threaded approach to networking, using four threads (UI, sending, receiving and connecting)</li>\n\t<li>Precise Android XML UI design including nested layouts and more features of the RelativeLayout.</li>\n\t<li>Setting Android UI views to use <a title=\"9-Patch Images\" href=\"http://developer.android.com/tools/help/draw9patch.html\">9-Patch images</a> and custom background styles and colours.</li>\n</ul>\nFirst version source code<a title=\"GClient Source Code\" href=\"https://www.dropbox.com/s/2kfu6mh7xwqrv57/GClient%20Source.zip\"> is available here</a>! The GClientTestServer port is a constant field in the class file. The GClientTestServer also contains the GClientTools class in the util package, which I'll be next using for adapting current project servers and eliminating a few test apps altogether!",
    "tags": [
      "Android",
      "Java",
      "Pebble",
      "Raspberry Pi"
    ]
  },
  {
    "id": "828",
    "title": "A note on abstract methods",
    "link": "https://ninedof.wordpress.com/2013/07/26/a-note-on-abstract-methods/",
    "pubDate": "Fri, 26 Jul 2013 00:04:13 +0000",
    "postDate": "2013-07-26 00:04:13",
    "body": "In developing the GClient (detailed in the preceeding post), I discovered for myself that the method to be implemented for some interfaces and object types (such as <code>run()</code> in a Runnable object) are done by declaring them as 'abstract' methods. This means when a programmer creates a new instance of that object, the abstract method that needs to be implemented is shown to be 'filled up' with context specific code. Below is an example:\n\nThis is an abstract method from my 'PythonConnection' class:\n\n[code language=\"java\"]\n\n/**\n  * Implement this to act on data received\n  * @param data String containing the data received from the remote python host\n  */\n\tpublic abstract void onReceive(String data);\n\n[/code]\n\nWhen a new PythonConnection object is created, the opportunity to implement <code>onReceive()</code> is shown as below:\n\n[code language=\"java\"]\n\nPythonConnection pyCon = new PythonConnection() {\n\n\t\t\t@Override\n\t\t\tpublic void onReceive(String data) {\n\t\t\t\t//Put code to use the 'data' String here!\n\t\t\t\t//Update UI, send a response etc...\n\n\t\t\t}\n\t\t};\n\n[/code]\n\nWhere does the 'data' String come from, you ask? Well when the underlying Thread receives data from the BufferedReader, it calls <code>onReceive()</code>, supplying the String read from the Reader and continues listening once <code>onReceive()</code> returns. Here is where that occurs in a typical server (such as in the GClient):\n\n[code language=\"java\"]\n\n/**\n  * Start the receiving thread that will call onReceive() when it has data\n  */\n\tprivate void startListening() {\n\n\t\treceiveThread = new Thread(new Runnable() {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tlistening = true;\n\t\t\t\tSystem.out.println(&quot;Ready to receive.&quot;);\n\n\t\t\t\twhile(listening) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tString packet = fromPython.readLine();\n\t\t\t\t\t\tif(packet != null) {\n\t\t\t\t\t\t\tonReceive(packet);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treceiveThread.start();\n\t}\n\n[/code]\n\nPreviously to get around this 'sending data across classes' problem (which got especially nasty when Threads came into it) I would either pass the object creating the abstract object or use some sort of 'shared static class', which wasn't ideal and generated problems of its own.\n\nThis is an example of one of the joys of exploring a language by using it! I foresee much use for this functionality.",
    "tags": [
      "Java"
    ]
  },
  {
    "id": "884",
    "title": "New Project: ",
    "link": "https://ninedof.wordpress.com/?p=884",
    "pubDate": "",
    "postDate": "2013-08-16 15:36:15",
    "body": "",
    "tags": [
      "Uncategorized"
    ]
  },
  {
    "id": "886",
    "title": "Update on posts",
    "link": "https://ninedof.wordpress.com/2013/08/20/update-on-posts/",
    "pubDate": "Tue, 20 Aug 2013 21:51:37 +0000",
    "postDate": "2013-08-20 21:51:37",
    "body": "The last couple of weeks I haven't been posting anything interesting, mainly due to a new project I'm spending a lot of time on, which is very exciting. I'm working with a friend to create an open-world RPG basically from scratch, and working on it has given me lots of opportunity to problem-solve, develop my coding practices and go to new places I wouldn't have gone otherwise.\n\nA summary of highlights so far, which I may cover in separate detail posts are:\n<ul>\n\t<li>Triple threaded engine (Logic, Renderer, Occlusion) using Java2D</li>\n\t<li>Tile based maps with three layers loaded by a tile sheet parser that splits up a single image of tiles into single sprites for use by each map tile.</li>\n\t<li>Any-size maps with aggressive occlusion (drawing only those tiles that need to be), enabling smooth 60 FPS motion even at 1920 x 1080.</li>\n\t<li>Animated Player and NPCs that similarly have their animation frames dynamically loaded from external sprite sheets composed of individual frames.</li>\n\t<li>Thread driven scripts and events using a bespoke language that are interpreted and acted upon at run-time.</li>\n\t<li>Map files are read into a bundle that then exposes it's data to the game, ensuring only the correct data is available, and the game cannot accidentally corrupt a map file.</li>\n\t<li>A dedicated map maker package that enables creation of these maps, adding events, NPCs and map-to-map jumps.</li>\n</ul>\nStay tuned for more information!",
    "tags": [
      "Java"
    ]
  },
  {
    "id": "904",
    "title": "Unnamed Space Project: UI Investigation",
    "link": "https://ninedof.wordpress.com/2013/08/28/unnamed-space-project-ui-investigation/",
    "pubDate": "Wed, 28 Aug 2013 00:40:47 +0000",
    "postDate": "2013-08-28 00:40:47",
    "body": "So I've had an idea in my head for a while that has probably been done before, but as I've already mentioned, I prefer to do everything I can from scratch when it comes to programming, which takes time, but is incredibly rewarding when what I strive for comes to life as I imagined.\n\nThis particular idea is for a real-time space RPG, the main mechanic being that you set a course and a speed, and it might take a few real-time minutes to reach your destination, such that you would play the game ongoing in the background for something else you are doing, similar to an MMO.\n\nI've attempted this before, and the main difference in having a game world many times larger than the screen is that you must position everything relative to some abstracted co-ordinate system completely separate from where each item may be drawn on the actual screen. This was achieved before by drawing each item if it was less than a screen width or height away from the player's drawing location in the middle of the screen, then whenever the player moved it's 'co-ordinate', all the other in-game items moved in the opposite direction, very effectively creating the illusion of moving through a world, even though the player's sprite stays put on the screen.\n\nThis feeling was further enhanced by moving the player's 'co-ordinate' using the sin/cosine of the speed and angle, allowing the player to appear to move in large smooth, sweeping arcs.\n\nWith my new skills from recent projects still fresh in mind, I set out to make this a much tighter experience, with some more intuitive input system beyond WSAD keyboard keys. I envisaged a speed slider, and a 'ring slider' around the player in the center of the screen, allowing a course to be set and speed to be set by dragging them. As everything is done on a Graphics2D enhanced Canvas component, using pre-written Swing sliders is out of the question, so I set out to recreate these UI elements from scratch to be drawn using Graphics2D methods.\n\nThe linear slider was fairly easy, using the <code>mouseDragged()</code> method from the <code>MouseMotionListener</code> class. Position the slider where the user clicked (x co-ordinate only!) as long as it was between the slider's start and finish positions.\n\nSo far so good.\n\nBut the 'ring slider' required much more thinking about. I first attempted to use counters and quadrant detection of the existing angle position of the ring, but this was way too complex. Then as I was thinking about something else, the answer came to me: use GCSE maths! Specifically, the circle trigonometry stuff. It all came down to this: <a href=\"http://ninedof.files.wordpress.com/2013/08/circletheorem.png\"><img class=\"aligncenter size-full wp-image-905\" alt=\"circletheorem\" src=\"http://ninedof.files.wordpress.com/2013/08/circletheorem.png\" width=\"379\" height=\"147\" /></a>So using the mouse's dragging x co-ordinate, I can find the corresponding y co-ordinate for that point around the 'ring slider''scircle. From this, the angle (theta, <b>θ</b>) the slider should be set to can be found using the tangent:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/08/arctan.png\"><img class=\"aligncenter size-full wp-image-906\" alt=\"arctan\" src=\"http://ninedof.files.wordpress.com/2013/08/arctan.png\" width=\"282\" height=\"120\" /></a>But this only works up to 90 degrees using tangent (which is actually infinite at 90 degrees), so the calculation is carried out subtly differently depending on which of four quadrant rectangles the user is dragging in, after which the resultant 0 - 90 angle is adjusted to read what it should in the quadrant:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/08/quadrantssrc1.png\"><img class=\"aligncenter size-full wp-image-908\" alt=\"quadrantssrc\" src=\"http://ninedof.files.wordpress.com/2013/08/quadrantssrc1.png\" width=\"263\" height=\"263\" /></a>\n\nHere is the code for calculation of the angle of the 'ring slider' in quadrant 0:\n\n[code language=\"java\"]//Setup quad rects for ring slider of any bounds x, y, width &amp; height\nquad0 = new Rectangle(x + width/2, y, width/2, height/2);\nquad1 = new Rectangle(x + width/2, y + height/2, width/2, height/2);\nquad2 = new Rectangle(x, y + height/2, width/2, height/2);\nquad3 = new Rectangle(x, y, width/2, height/2);\n\n//Test user click - 2x2 rect around mouse pointer location\nRectangle thisRect = new Rectangle(inCurrent.x - 1, inCurrent.y - 1, 2, 2);\n\n//Show angle\nif(thisRect.intersects(quad0))\n    thisQuad = 0;\nelse if(thisRect.intersects(quad1))\n    thisQuad= 1;\nelse if(thisRect.intersects(quad2))\n    thisQuad = 2;\nelse if(thisRect.intersects(quad3))\n    thisQuad = 3;\n\nswitch(thisQuad) {\n    case 0: {\n        float adj = inCurrent.x - quad0.x;\n        float opp = (quad0.y + quad0.height) - inCurrent.y;\n\n        double theta = Math.toDegrees(Math.atan(opp/adj));\n        angle = 90 - (int)Math.round(theta);\n\n        //Range control\n        if(angle &lt; 0)\n            angle = 0;\n        if(angle &gt; 90)\n            angle = 90;\n        break;\n    }\n    //Then the other quads for cases 1 through 3...\n}\n[/code]\n\nThe end result of all this, together with a spawning starfield of stars (who move proportionately to their size to create the illusion of depth) is this (Click to enlarge):\n\n<a href=\"http://ninedof.files.wordpress.com/2013/08/inaction.png\"><img class=\"aligncenter size-large wp-image-909\" alt=\"inaction\" src=\"http://ninedof.files.wordpress.com/2013/08/inaction.png?w=545\" width=\"545\" height=\"298\" /></a>I realise that a simple image isn't that exciting, so if you want to play around with these UI elements and see the whole demo in action, <a title=\"StarfieldUI Demo Bundle Download!\" href=\"https://www.dropbox.com/s/6lzg9n61lcfyyrz/StarfieldUI%20Demo.zip\"><strong>here is an executable bundle</strong></a>!",
    "tags": [
      "Java"
    ]
  },
  {
    "id": "924",
    "title": "Pebble Watch App: Watch Trigger",
    "link": "https://ninedof.wordpress.com/2013/08/30/pebble-watch-app-watch-trigger/",
    "pubDate": "Fri, 30 Aug 2013 00:22:22 +0000",
    "postDate": "2013-08-30 00:22:22",
    "body": "<strong>Updates:</strong>\n<strong>1.8.1:\n- Fixed crash when capturing while media scanner was at work\n- Added option to get a debug log to help me figure out what breaks!\n</strong>\n\n<strong>NOTICE: I'm working on bringing back compatibility with Android 2.3.3 Gingerbread phones. If you own such a device and would like to test a build for me, let me know!</strong>\n\nI was on the Google Play store today and I saw that a <a title=\"Search for Pebble Camera Remote on Google Play\" href=\"https://play.google.com/store/search?q=pebble%20camera%20remote&amp;hl=en_GB\">search for \"Pebble Camera Remote\"</a> returned no results. This got me thinking... <em>I can do that</em>!\n\nSo I spent a good afternoon getting back into Android and Pebble developer kits to produce the <del>first</del> 1.8.1 version of what I have dubbed \"Watch Trigger\" - an app that lets you use your Pebble watch as a remote control! This means you can do what you'd normally do when taking a timed photo, but you don't have to rush back to the group in ten seconds, you can press the watch button as quickly and discreetly as you want.\n\nOnce the app is installed, you can install the watch app by pressing the 'Install Watch App' button, then relaunch the Android app. As shown on the Pebble app, pressing SELECT will cause the phone to take a photo and save it to \"<del>/sdcard/Watch Trigger Images/ImageX.jpg</del>\" anywhere in the external storage you want. The name of the photo taken will then be confirmed on the phone and the watch, so you can go back and pick it up again:\n<p style=\"text-align:center;\"><a href=\"http://ninedof.files.wordpress.com/2013/08/shot11.png\"><img class=\"aligncenter size-full wp-image-1039\" alt=\"shot1\" src=\"http://ninedof.files.wordpress.com/2013/08/shot11.png\" width=\"545\" height=\"327\" /></a><a href=\"http://ninedof.files.wordpress.com/2013/08/shot31.png\"><img class=\"aligncenter  wp-image-1047\" alt=\"shot3\" src=\"http://ninedof.files.wordpress.com/2013/08/shot31.png\" width=\"384\" height=\"640\" /></a></p>\n<p style=\"text-align:center;\"><img class=\"aligncenter size-full wp-image-1018\" alt=\"watchapp\" src=\"http://ninedof.files.wordpress.com/2013/08/watchapp.jpg\" width=\"428\" height=\"428\" /></p>\nSo now it is possible to take a photo using the Pebble watch as a remote!\n\n<strong>Special mentions</strong>\n\nIn adding a button to install the companion watch app from within the Android app, I used a method written by <a title=\"Install Pebble App\" href=\"https://github.com/SheepWillPrevail/android/blob/a8f51bb6abd8795517aa94bcc3c9f5a0c25eb081/PebbleRSS/src/com/grazz/pebblerss/MainActivity.java#L147\">Robert Meijer, which I found on GitHub</a> - an elegant solution. Thanks Robert!\n\n<strong>Known bugs/issues</strong>\n<ul>\n\t<li><del>Only portrait orientation at the moment, but landscape if you rotate the photos post-shoot.</del></li>\n\t<li><del>Cropping of the preview surface, but <strong>NOT</strong> of the resulting photo. I'm not sure how to rectify this at the moment, but if programming has taught me anything, its that virtually anything is possible.</del></li>\n\t<li><del>Low default output resolution</del></li>\n\t<li><del>Storage location not always /sdcard0/ on all devices</del></li>\n\t<li><del>Crash when taking photo while the previous one is being saved</del></li>\n\t<li><del>Flash does not always fire</del></li>\n\t<li><del>Crash when triggering if media scanner was still running</del></li>\n\t<li>Let me know any you find!</li>\n</ul>\n<strong>Download</strong><a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchtrigger\">\n<img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" /></a>\n\nEnjoy! As usual, please leave your thoughts and suggestions below!",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1066",
    "title": "Watch Trigger 1.9: Biggest update yet",
    "link": "https://ninedof.wordpress.com/2013/09/13/watch-trigger-1-9-biggest-update-yet/",
    "pubDate": "Fri, 13 Sep 2013 01:46:52 +0000",
    "postDate": "2013-09-13 01:46:52",
    "body": "<a href=\"http://ninedof.files.wordpress.com/2013/09/icon.png\"><img class=\"aligncenter size-medium wp-image-1068\" alt=\"icon\" src=\"http://ninedof.files.wordpress.com/2013/09/icon.png?w=300\" width=\"300\" height=\"300\" /></a>\n\nThe latest update on it's way to the Google Play store now is the largest yet, so I thought I'd go through it in more detail.\n\nThe first major change is the return of support for Android 2.3.3 Gingerbread and up. Previously this was 3.0 Honeycomb and up due to the use of the surprisingly useful <a title=\"ActionBar API\" href=\"http://developer.android.com/guide/topics/ui/actionbar.html\">ActionBar</a> and <a title=\"PreferenceFragment API\" href=\"http://developer.android.com/guide/topics/ui/settings.html#Fragment\">PreferenceFragment</a> APIs, used to add buttons to the nice red stripe at the top of the viewfinder (as well as enable it's opacity) and automatic creation of the Settings menu layout from an XML file respectively.\n\nUsing the above features meant I had to restrict the app to 3.0+ users, which I was uncomfortable doing, seeing as that is the benchmark set for compatibility by the official Pebble app. But since then and after requests from a few would-be users, I worked to create an app that works differently based on the user's version of Android.\n\nIf the user is on 3.0 and up, it will use the ActionBar, add the watch-app toggle and settings buttons as ActionBar options, and use the PreferenceFragment API to generate the Settings menu when it is opened by the user. However, if the user is on 2.3.3 (but below 3.0), the app will use a replacement viewfinder layout that replicates the ActionBar layout as close as I can. I must say, I'm impressed at the result. For the Settings menu, the older deprecated PreferencesActivity class is used to generate the settings instead.\n\nUnfortunately, despite trying hard, I had to take out automatic scanning of captures images to the Gallery on Gingerbread. I just couldn't crack it for now. I'll keep trying though.\n\nHere's how the new viewfinder looks with the progressbar, in my room, as it's currently very dark outside...\n\n<a href=\"http://ninedof.files.wordpress.com/2013/09/shot1.png\"><img class=\"aligncenter size-full wp-image-1071\" alt=\"shot1\" src=\"http://ninedof.files.wordpress.com/2013/09/shot1.png\" width=\"545\" height=\"327\" /></a>\n\n<a href=\"http://ninedof.files.wordpress.com/2013/09/shot2.png\"><img class=\"aligncenter size-full wp-image-1069\" alt=\"shot2\" src=\"http://ninedof.files.wordpress.com/2013/09/shot2.png\" width=\"545\" height=\"327\" /></a>\n\nOther new features include:\n<ol>\n\t<li>Subtle animations on a couple of UI elements; namely the reset button (if Instant Review is on) and the countdown timer remaining TextView, when it is visible</li>\n\t<li>A ProgressBar showing the stages of trigger, capture, saving and media scanning of the image. If Instant Review is on, the reset button appears once this process is complete, ensuring users don't reset the camera before the image is finished saving.</li>\n\t<li>The timer now has an option between 1 and 5 second increments (but still up to a 15 second maximum).</li>\n\t<li>Full control over the image save path. This is set by default to the device's variant on 'storage/sdcard0/' or 'mnt/sdcard/', whatever Environment.getExternalStorageDirectory() returns. After this, the user is free to change this, even to go up and save to another attached media instead, such as an external SD card, which on my device would be 'storage/sdcard1/'.</li>\n\t<li>A guard mechanism to protect against launching the app when the phone is mounted as a removable USB device on a PC. Seeing as the app's sole purpose is to save images to the internal media (which is unavailable when the phone is mounted), this mechanism is a no-brainer.</li>\n\t<li>Finally, a wake-lock so that the phone doesn't go to sleep while you are arranging your photo/relatives.</li>\n</ol>\nI think that's all, so have at it and enjoy! The in-app feedback options are still there in case anything goes wrong.\n\nOne other note: I've had reports of intermittent responses from the watch-app, such as UP and DOWN buttons working, but not SELECT. Seeing as I've implemented the Pebble AppSync as best as I am able, all events go through the same procedures, so receive equal treatment. This unusual behavior could be attributed to the on-going battle Pebble are fighting against flaky device connections as one of the focuses behind the last few Pebble App updates. As a personal response to this, I am working on my own abstraction above AppSync (which is itself an abstraction of AppMessage) to try and get a better handle on the continuous state of the connection to the watch.\n\nMore info if that gets anywhere.\n\n<strong>Download</strong><a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchtrigger\">\n<img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" /></a>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1086",
    "title": "Watch Trigger + for Pebble: Initial Release ",
    "link": "https://ninedof.wordpress.com/2013/09/22/watch-trigger-for-pebble-initial-release/",
    "pubDate": "Sun, 22 Sep 2013 20:56:21 +0000",
    "postDate": "2013-09-22 20:56:21",
    "body": "<p style=\"text-align:left;\"><a href=\"http://ninedof.files.wordpress.com/2013/09/logosrc.png\"><strong></strong><img class=\"aligncenter  wp-image-1087\" alt=\"logosrc\" src=\"http://ninedof.files.wordpress.com/2013/09/logosrc.png\" width=\"246\" height=\"246\" /></a><strong>Introduction</strong></p>\nAfter the success of the first Watch Trigger, and a good deal of requests, I spent another two weeks to build upon and improve the experience. The result of all this work is Watch Trigger + (or Plus), and boasts this list of improvements:\n<ul>\n\t<li>Remote triggering of video capture, as well as photo capture</li>\n\t<li>New landing screen for mode selection and a single access point to the Settings menu</li>\n\t<li>Settings menu has been re-vamped to enable expansion with new settings in the future using PreferenceHeaders.</li>\n\t<li>Included Gingerbread devices in the Media Gallery scanning functionality, as there were problems previously. Gingerbread devices will use Intent driven media scanning instead of Honeycomb + devices using a MediaScanner connection and callback method.</li>\n\t<li>File names are now based on the time and date they were taken.</li>\n\t<li>Removed watch-app autostart when entering either of the viewfinder Activities. This approach led to some AppSync difficulties with the improvements in the next bullet point;</li>\n\t<li>Enhanced Watch App that adapts its layout depending on which shooting mode the Android app is currently in.</li>\n\t<li>More stability fixes, including slightly faster Photo Viewfinder startup time.</li>\n</ul>\n<p style=\"text-align:left;\"><strong>Screenshots</strong></p>\n<p style=\"text-align:left;\">The new landing screen for mode selection:</p>\n<p style=\"text-align:left;\"><a href=\"http://ninedof.files.wordpress.com/2013/09/shot11.png\"><img class=\"aligncenter  wp-image-1089\" alt=\"shot1\" src=\"http://ninedof.files.wordpress.com/2013/09/shot11.png\" width=\"384\" height=\"640\" /></a>This Activity is fitted with some smooth and subtle animations to make it feel a lot nicer to use. Also note the single access point to the Settings menu on the ActionBar at the top right.</p>\n<p style=\"text-align:left;\">The new Video Viewfinder:</p>\n<p style=\"text-align:left;\"><a href=\"http://ninedof.files.wordpress.com/2013/09/shot3.png\"><img class=\"aligncenter size-full wp-image-1090\" alt=\"shot3\" src=\"http://ninedof.files.wordpress.com/2013/09/shot3.png\" width=\"545\" height=\"327\" /></a>Mostly similar to the Photo Viewfinder, but lacking the timer UI, as it is rendered pretty much moot by definition, as the video captured can be of any length.</p>\n<p style=\"text-align:left;\">The new enhanced adapting watch app:</p>\n<p style=\"text-align:left;\"><a href=\"http://ninedof.files.wordpress.com/2013/09/wtp-watchapp.jpg\"><img class=\"aligncenter size-full wp-image-1091\" alt=\"WTP watchapp\" src=\"http://ninedof.files.wordpress.com/2013/09/wtp-watchapp.jpg\" width=\"500\" height=\"500\" /></a>Excuse the state of my screen protector! So far it's done its duty perfectly. I haven't found any function to assign the UP and DOWN buttons on the Pebble Action Bar so far, so if you can think of one, let me know!</p>\n<p style=\"text-align:left;\"><strong>Notes on Android </strong></p>\n<p style=\"text-align:left;\">First, the process for capturing video on Android is very different from photo capture. There are two methods I can think of for capturing photos/videos on Android:</p>\n\n<ol>\n\t<li>Start an Intent to launch the device's built-in Camera app, which then waits for the user to press the capture button and then go back, which hands the resulting image data back to the previous Activity. Useless for this purpose, since once the Intent is launched, the Watch Trigger app and hence Pebble cannot control the built-in Camera app, which leaves us with the alternative;</li>\n\t<li>Re-implement the Camera app as a custom Activity to enable access to all stages of preview, capture, write and gallery scan. This involves creating a new SurfaceView subclass that opens the Camera and displays the preview images. Once the basic layout is complete, and the Camera.Parameters API probed to expose the requires settings to the user, this isn't too much work.</li>\n</ol>\n<div>The problems start to appear if you want to do approach #2 above with <strong>video</strong> capture. Whereas the Camera API has the takePicture() method, which calls the supplied callbacks to get and save the image data to internal storage, the capturing of video data requires continuous storage functionality, which is managed with the MediaRecorder class.</div>\n<div></div>\n<div></div>\n<div>On paper (<a title=\"Android Camera API\" href=\"http://developer.android.com/guide/topics/media/camera.html\">in the API documentation</a>), the video capture process is <a title=\"Android Camera API - Video Capture\" href=\"http://developer.android.com/guide/topics/media/camera.html#capture-video\">simple enough</a>, if you tread with caution. Even following this admittedly precision orientated procedure, I spent at least two days wrestling with 'setParameters failed' and 'start failed -19' errors. One thing I like about the Java language is with a suitable debugger the stack trace is nearly always informative enough to show you exactly what failed and why. But these errors were near meaningless, and according to sites such as Stack Overflow, could occur due to a wide variety of reasons.</div>\n<div></div>\n<div></div>\n<div>Eventually I managed to get video capture to work after making assumptions about camera hardware, encoder options and file formats, which when considering to release to a device-fragmented ecosystem such as Android, is scary enough. A few more days work enabled me to eliminate most of these assumptions which should provide the best compatibility. In case you were led here by struggles re-creating the Camera app for video recording, here is my code which works (at least for a CM10.1 Galaxy S, stock HTC One, stock 2.3.3 Galaxy Ace and stock Galaxy Y (I still pity Galaxy Y users):</div>\n<div></div>\n[code language=\"java\"]\n\t/**\n\t * THANK YOU: http://stackoverflow.com/a/17397920\n\t * @return true if successful\n\t */\n\tprivate boolean prepareMediaRecorder() {\n\t\ttry {\n\t\t\t//Create\n\t\t\tmRecorder = new MediaRecorder();\n\n\t\t\t//Select camera\n\t\t\tmRecorder.setCamera(camera);\n\t\t\tif(Globals.DEBUG_MODE)\n\t\t\t\tLog.d(TAG, &quot;Camera instance is: &quot; + camera.toString());\n\n\t\t\t//Setup audio/video sources\n\t\t\tmRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);\n\t\t\tmRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);\n\n\t\t\t//Set quality\n\t\t\tCamcorderProfile profile = CamcorderProfile.get(0, CamcorderProfile.QUALITY_HIGH);\n\t\t\tmRecorder.setProfile(profile);\n\n\t\t\t//Get next name\n\t\t\tnextName = getTimeStampName() + &quot;.mp4&quot;;\n\n\t\t\t//Output file\n\t\t\tif(Globals.DEBUG_MODE)\n\t\t\t\tLog.d(TAG, &quot;Opening media file...&quot;);\n\t\t\tFile dir = new File (prefPath + &quot;/&quot;);\n\t\t\tdir.mkdirs();\n\t\t\tcurrentFile = new File(dir, nextName);\n\n\t\t\tif(Globals.DEBUG_MODE)\n\t\t\t\tLog.d(TAG, &quot;Media file is: &quot; + currentFile.getAbsolutePath().toString());\n\t\t\tmRecorder.setOutputFile(currentFile.getAbsolutePath().toString());\n\n\t\t\t//Setup Surface\n\t\t\tmRecorder.setPreviewDisplay(sHolder.getSurface());\n\n\t\t\t//Prepare\n\t\t\tif(Globals.DEBUG_MODE)\n\t\t\t\tLog.d(TAG, &quot;Preparing MediaRecorder...&quot;);\n\t\t\tmRecorder.prepare();\n\n\t\t\t//Finally\n\t\t\tif(Globals.DEBUG_MODE)\n\t\t\t\tLog.d(TAG, &quot;MediaRecorder preparations complete!&quot;);\n\t\t\tGlobals.addToDebugLog(TAG, &quot;MediaRecorder preparations complete!&quot;);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tLog.e(TAG, &quot;Error preparing MediaRecorder: &quot; + e.getLocalizedMessage());\n\t\t\tGlobals.addToDebugLog(TAG, &quot;Error preparing MediaRecorder: &quot; + e.getLocalizedMessage());\n\t\t\te.printStackTrace();\n\t\t\treleaseMediaRecorder();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate void releaseMediaRecorder() {\n\t\tmRecorder.reset();\n\t\tmRecorder.release();\n\t\tmRecorder = null;\n\n\t\tif(Globals.DEBUG_MODE)\n\t\t\tLog.d(TAG, &quot;MediaRecorder released successfully.&quot;);\n\t\tGlobals.addToDebugLog(TAG, &quot;MediaRecorder released successfully&quot;);\n\t}\n\n[/code]\n\n<strong>If you are working in this area of Android app development heed my warning and ALWAYS USE TRY/CATCH TO RELEASE THE CAMERA LOCK AND MEDIARECORDER LOCK IF ANY CODE SEGMENT INVOLVING THEM FAILS! Failure to do this means if your app FCs or ANRs and you have to kill it, you will be unable to access the Camera in ANY app until you restart your device!</strong>\n\nFinally in this section, notes on supporting Android 2.3.3 Gingerbread and upwards. In Android 3.0 Honeycomb and upwards, there are a lot of nice features and conveniences I originally took for granted when building this app. Examples include:\n<ul>\n\t<li>The ActionBar API</li>\n\t<li>The newer Media Scanner API functions</li>\n\t<li>Some methods involved with the Camera API</li>\n</ul>\nAfter a few requests and accepting that I should support all the devices that Pebble do themselves, I worked to include those older devices into the Watch Trigger fold. In doing so, I had to write replacement imitation ActionBar layout items and buttons to provide the closest possible similarity between device versions. Originally I had great difficulties with implementing media scanning (to add the captures media files to the system Gallery so they can be viewed immediately) on Gingerbread, but no problems with Honeycomb upwards. I got round this like so:\n\n[code language=\"java\"]\n\t//Check Android version\n\tpublic static boolean isHoneycombPlus() {\n\t\treturn android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.HONEYCOMB;\n\t}\n\n.............................................................\n\n\tif(Globals.isHoneycombPlus()) {\n\t\tMediaScannerConnection.scanFile(getContext(), paths, mimes, new MediaScannerConnection.OnScanCompletedListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onScanCompleted(String path, Uri uri) {\n\t\t\t\tif(Globals.DEBUG_MODE)\n\t\t\t\t\tLog.d(TAG, &quot;Finished scanning &quot; + path + &quot; to gallery&quot;);\n\t\t\t\tGlobals.addToDebugLog(TAG, &quot;Finished scanning video into Gallery&quot;);\n\t\t\t\tVideoViewfinder.overlayNotify(&quot;Media scan complete.&quot;);\n\n\t\t\t\t//Finally\n\t\t\t\treadyToCapture = true;\n\t\t\t}\n\n\t\t});\n\t} else {\n\t\t//Media scan intent?\n\t\tIntent intent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\n\t\tintent.setData(Uri.fromFile(currentFile));\n\t\tgetContext().sendBroadcast(intent);\n\n\t\tVideoViewfinder.overlayNotify(&quot;Media scan requested.&quot;);\n\n\t\t//Finally\n\t\treadyToCapture = true;\n\t}\n\n[/code]\n\nThus, in many other places including the one shown above, the app takes a different path depending on the device platform version.\n\nSo, that's the big upgrade! All that's left now is to provide a link to get your teeth into taking loony videos of yourself. <a title=\"Camera setup fail\" href=\"http://www.youtube.com/watch?v=4beRDIteCTM\">Hopefully nothing like this</a>.\n<p style=\"text-align:left;\"><strong>Download</strong></p>\n<a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchtriggerplus\"><strong></strong>\n<img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" />\n</a>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1136",
    "title": "Raspberry Pi: IP by E-mail",
    "link": "https://ninedof.wordpress.com/2013/09/28/raspberry-pi-ip-by-e-mail/",
    "pubDate": "Sat, 28 Sep 2013 00:01:38 +0000",
    "postDate": "2013-09-28 00:01:38",
    "body": "I <a title=\"Raspberry Pi: IP Address to LCD Display\" href=\"http://ninedof.wordpress.com/2013/07/13/raspberry-pi-ip-address-to-lcd-display/\">wrote a while ago</a> about a mechanism to locate and connect to a <a title=\"Wikipedia - Headless\" href=\"http://en.wikipedia.org/wiki/Headless_computer\">headless</a> Raspberry Pi over Ethernet using an LCD display and some start-up code.\n\nWell today I broke it while preparing to move house (and use it in it's intended situation!), which was bad news. Listen to your GND markings, people!\n\nBut a moment's search for a replacement strategy yielded another idea. Nothing original by any means, but something new to my programming adventures thus far: Get the IP address by e-mail on boot!\n\nLooking at a Raspberry Pi as it boots you will see the Ethernet port is initialized pretty early on in the boot procedure. A quick Google search revealed the existence of the '<a title=\"Python 2.7 SMTPLib\" href=\"http://docs.python.org/2/library/smtplib.html\">smtplib</a>' module included with Python, which I leveraged to make this happen. Here is the final code (get_ip_address() found <a title=\"Get IP Address\" href=\"code.activestate.com/recipes/439094-get-the-ip-address-associated-with-a-network-inter/\">here</a>):\n\n[code language=\"python\"]\nimport smtplib\nimport struct\nimport socket\nimport fcntl\n\nmsg = &quot;From RPi Python&quot;\n\ndef get_ip_address(ifname):\n\ts = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\treturn socket.inet_ntoa(fcntl.ioctl(\n\t\ts.fileno(), 0x8915, # SIOCGIFADDR\n\t\tstruct.pack('256s', ifname[:15])\n\t)[20:24])\n\nfromaddr = &lt;from address&gt;\ntoaddr = &lt;to address&gt;\n\nmsg = &quot;&quot;&quot;RPi IP is  %s&quot;&quot;&quot; % get_ip_address('eth0')\n\nusername = &lt;username&gt;\npassword = &lt;password&gt;\n\nprint(&quot;Sending IP: %s to %s&quot; % (get_ip_address('eth0'), toaddr))\n\nprint(&quot;Opening connection...&quot;)\nserver = smtplib.SMTP('smtp.gmail.com:587')\nserver.ehlo()\nserver.starttls()\nserver.ehlo()\n\nprint(&quot;Logging in...&quot;)\nserver.login(username, password)\n\nprint(&quot;Sending message: %s&quot; % msg)\nserver.sendmail(fromaddr, toaddr, msg)\n\nprint(&quot;Closing connection...&quot;)\nserver.close()\n\nprint(&quot;Sent.&quot;)\n[/code]\n\nThe next step is to make it run on boot, which only involved writing this script (called ipmailboot.sh):\n\n[code language=\"python\"]\n#!/usr/bin/python\n\nsudo python ~/python/ipmail.py\n[/code]\n\nThen changing the permissions for execution:\n\n[code language=\"python\"]\n sudo chmod 755 ipmailboot.sh\n [/code]\n\nAnd then registering it to run on boot using <code>update-rc.d ipmailboot.sh defaults</code>.\n\nSo, nothing revolutionary, but when I move house and find the router is nowhere near a TV, all I'll have to do is connect it to the network with an Ethernet cable, power on and wait for the email to arrive (on my Pebble watch, no less!)",
    "tags": [
      "Raspberry Pi"
    ]
  },
  {
    "id": "1160",
    "title": "Update ",
    "link": "https://ninedof.wordpress.com/2013/10/13/update/",
    "pubDate": "Sun, 13 Oct 2013 14:21:55 +0000",
    "postDate": "2013-10-13 14:21:55",
    "body": "I've embarked upon my fourth and final year at university, and so a lot of my time is taken up with the course and associated course-work, including a mammoth individual research project.\n\nThe good news is that a large part of that project will involve writing software in C++, which I've never used before. I have, however, used C so the leap is not too far. Thus over the last week or so I've been gaining familiarity with using the <a title=\"OpenCV\" href=\"http://opencv.org\">OpenCV</a> image processing library and after the initial teething troubles installing and linking the library it looks very promising for what I hope to achieve.\n\nIn the free time remaining when I'm not doing other life stuff, I've been working on a much more polished <a title=\"Android App: GClient (Working Title)\" href=\"http://ninedof.wordpress.com/2013/07/25/android-app-gclient-working-title/\">GClient</a> using the knowledge I obtained working on Watch Trigger, as well as trying to figure out why zoom isn't working in a test build of Watch Trigger +. Yet more wresting with the finicky Camera API.\n\nHopefully I'll crack it soon!",
    "tags": [
      "Android",
      "C++",
      "Pebble"
    ]
  },
  {
    "id": "1173",
    "title": "New App: Watch App Selector",
    "link": "https://ninedof.wordpress.com/2013/10/16/new-app-watch-app-selector/",
    "pubDate": "Wed, 16 Oct 2013 16:47:45 +0000",
    "postDate": "2013-10-16 16:47:45",
    "body": "Every once in a while programming you get stuck on a problem and you think to yourself 'There must be an easier way to do this!', and most often you'll be right. It's just a case of casting around for another approach or thinking outside the box. In this case it was for a mini project I've been working on for some weeks, on and off. A single free app through which to distribute all my past and future Pebble watch apps and watch faces. I think it's been done before, but I like elegance of the idea. Problem was, I got stuck on how to best present all the apps.\n\nMy main vision was a <code>ListView</code>, but the templates for the individual item layouts were not quite right. So I looked around the internet for how to implement my own, and found conflicting, over-complex or wildly inaccurate resources on how to accomplish this. I left it to sit for a couple of weeks, as I was kept busy by other things, but then yesterday I made another attempt at it.\n\nAnd as such also happens sometimes when programming, a <a title=\"The magic piece\" href=\"http://www.vogella.com/articles/AndroidListView/article.html#adapterown_example\">single lead</a> will take you all the way as you get swept up in the creative process for a several hour marathon. And the end result is this:\n<h1>Watch App Selector</h1>\n<p style=\"text-align:center;\"><a href=\"http://ninedof.files.wordpress.com/2013/10/app_logo.png\"><img class=\"wp-image-1174\" alt=\"app_logo\" src=\"http://ninedof.files.wordpress.com/2013/10/app_logo.png?w=300\" width=\"210\" height=\"210\" /></a></p>\n<p style=\"text-align:left;\">This is the first iteration on realizing the idea of a single app to distribute my watch apps and watch faces. It takes the form of a single list, with each app/face given its own title, summary and logo.</p>\n<p style=\"text-align:left;\"><a href=\"http://ninedof.files.wordpress.com/2013/10/shot1.png\"><img class=\"aligncenter size-medium wp-image-1175\" alt=\"shot1\" src=\"http://ninedof.files.wordpress.com/2013/10/shot1.png?w=180\" width=\"180\" height=\"300\" /></a>When the user clicks on an item, they are taken to a details Activity with more fleshed out information, as well as applicable buttons for installing the apps.</p>\n<p style=\"text-align:left;\"><a href=\"http://ninedof.files.wordpress.com/2013/10/shot2.png\"><img class=\"aligncenter size-medium wp-image-1176\" alt=\"shot2\" src=\"http://ninedof.files.wordpress.com/2013/10/shot2.png?w=180\" width=\"180\" height=\"300\" /></a>Thus, when I release some more watch apps/faces (got a couple of concepts in the works at the moment, just need to find the time), I will add them as a list item and release a new version of this app. Simple!</p>\n<p style=\"text-align:left;\">As always, I'm eager for any and all feedback.</p>\n<a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchappselector\"> <img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" /> </a>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1195",
    "title": "Watch App Selector Update: Beam Up Added",
    "link": "https://ninedof.wordpress.com/2013/10/19/watch-app-selector-update-beam-up-added/",
    "pubDate": "Sat, 19 Oct 2013 01:29:49 +0000",
    "postDate": "2013-10-19 01:29:49",
    "body": "A while ago<a title=\"New Watch Face: Beam Up\" href=\"http://ninedof.wordpress.com/2013/06/17/new-watch-face-beam-up/\"> I wrote</a> about a prototype watch face called Beam Up. Spurred on by the exciting potential the <a title=\"New App: Watch App Selector\" href=\"http://ninedof.wordpress.com/2013/10/16/new-app-watch-app-selector/\">Watch App Selector</a> now permits, I've finished it up.\n\nIt is exactly as it was before, but in addition to the predicted digit changes being done off-screen after being 'beamed up', there is a slim bar underneath the time display that show 15 second increments towards the minute ticking over, which then retracts fully in time with the digits change.\n\nIt's minimalist, but conveys a lot of information at the same time. I'm not very good at making mockup animated gifs, but here's a preview anyway of the minute change:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/10/mockup.gif\"><img class=\"aligncenter size-full wp-image-1196\" alt=\"mockup\" src=\"http://ninedof.files.wordpress.com/2013/10/mockup.gif\" width=\"144\" height=\"168\" /></a>You can get it along with all my others, as well as updates when they occur with <a title=\"Watch App Selector\" href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchappselector\">Watch App Selector</a>, or get the standalone file <a title=\"Standalone .pbw\" href=\"https://www.dropbox.com/s/sy484kjnznna644/BeamUpNew.pbw\">here </a>or at <a title=\"Beam Up at MyPebbleFaces\" href=\"http://www.mypebblefaces.com/apps/3905/6741/\">mypebblefaces</a>.\n\nEnjoy!",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1201",
    "title": "New Watch App: Beam Up Inverted",
    "link": "https://ninedof.wordpress.com/2013/10/19/new-watch-app-beam-up-inverted/",
    "pubDate": "Sat, 19 Oct 2013 16:09:42 +0000",
    "postDate": "2013-10-19 16:09:42",
    "body": "By request, I have made an inverted version of the <a title=\"Beam Up at MyPebbleFaces\" href=\"http://www.mypebblefaces.com/apps/3905/6741/\">Beam Up</a> watch face:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/10/mockup2.gif\"><img class=\"aligncenter size-full wp-image-1203\" alt=\"mockup\" src=\"http://ninedof.files.wordpress.com/2013/10/mockup2.gif\" width=\"144\" height=\"168\" /></a>It's available now at <a title=\"Beam Up Inverter at MyPebbleFaces\" href=\"http://www.mypebblefaces.com/apps/3905/6741/6746/\">mypebblefaces</a>, and I'll add it to the Watch App Selector in due course, to avoid spamming the Play Store with updates. Enjoy!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1228",
    "title": "Re: Pebble SDK 2.0",
    "link": "https://ninedof.wordpress.com/2013/11/06/re-pebble-sdk-2-0/",
    "pubDate": "Wed, 06 Nov 2013 20:11:49 +0000",
    "postDate": "2013-11-06 20:11:49",
    "body": "Today saw the end of Team Pebble's controversial radio silence, and replaced it with an absolutely huge announcement in the form of a live stream. You can get the details <a title=\"Pebble SDK 2.0 stream\" href=\"http://www.youtube.com/watch?v=uoVX2ibCFXw\">here</a>. The salient points are:\n<ol>\n\t<li>A huge overhaul of the 1.x SDK, changing a huge amount of how apps are written.</li>\n\t<li>New APIs for access to accelerometer and JS services.</li>\n\t<li>Upgraded and streamlined developer tools.</li>\n</ol>\nThe main implications for this for me, my watch/phone apps/faces and my tutorials are this; When the SDK 2.0 exits beta and it generally released, all the watch faces and apps I've developed for 1.x will cease to work, unless I upgrade them.\n\nMy priority for upgrade will be Watch Trigger and Watch Trigger +, followed by all the watch apps available in Watch App Selector. Maybe that will require splintering into two pages for 1.x and 2.0, or multiple buttons.\n\nAfter this, I'll write updates to the SDK Tutorial pages, but I'm uncertain of the format I'll be using for that. I'll sort it out though. Maybe even start a fresh...\n\nAll these upgrades will have to be in my free time, which I have a lot less of now (4th year Masters degree year), but I'll do my best to get it done as fast as I can.\n\nAs always, feel free to get in touch with comments/concerns!",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1237",
    "title": "Watch Trigger (& +) Updated to SDK 2.0",
    "link": "https://ninedof.wordpress.com/2013/11/10/watch-trigger-updated-to-sdk-2-0/",
    "pubDate": "Sun, 10 Nov 2013 00:36:23 +0000",
    "postDate": "2013-11-10 00:36:23",
    "body": "If you're a user of my <a title=\"Watch Trigger 1.9: Biggest update yet\" href=\"http://ninedof.wordpress.com/2013/09/13/watch-trigger-1-9-biggest-update-yet/\">Watch Trigger</a> or <a title=\"Watch Trigger + for Pebble: Initial Release\" href=\"http://ninedof.wordpress.com/2013/09/22/watch-trigger-for-pebble-initial-release/\">Watch Trigger +</a> Pebble watch apps and also love the newest watch firmware, do not despair: They are both now 2.0 compatible!\n\nThe main thing about converting apps to the new SDK is that it is not hard, just time consuming. <code>_init()</code> calls are replaced by pointer-ifying the implicit argument and <code>_create()</code> instead. Also some structs are changed, such as <code>BmpContainer</code> to a <code>BitmapLayer</code> and <code>GBitmap</code>. It's also much easier to manage layers, with <code>window_get_root_layer()</code> replacing <code>&amp;window-&gt;layer.layer</code> for example.\n\nI switched from <code>AppSync</code> to AppMessage as the new implementation was more clean and seems to work quite well.\n\nThe only other main difference is that both versions of the Android app work with just one watch app for simplicity. Existing users who have upgraded to the beta 2.0 firmware will need to go to Settings and re-install the appropriate watch-app.\n\nSo without further ado, go ahead and dive in! If you have any issues, please let me know!\n\n<strong>Download</strong><a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchtrigger\">\n<img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" /></a>\n\n<strong>Download (+)</strong><a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchtriggerplus\">\n<img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" />\n</a>",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1263",
    "title": "PTubeStatus: TFL Status on Your Wrist",
    "link": "https://ninedof.wordpress.com/2013/11/24/ptubestatus-tfl-status-on-your-wrist/",
    "pubDate": "Sun, 24 Nov 2013 18:22:28 +0000",
    "postDate": "2013-11-24 18:22:28",
    "body": "<strong></strong>I had an idea a couple of days ago while I was casting around for a way to make use of the promising abilities offered by the new <a title=\"PebbleJS\" href=\"https://developer.getpebble.com/2/guides/javascript-guide.html\">PebbleJS</a> feature of <a title=\"Pebble SDK 2.0\" href=\"https://developer.getpebble.com/2/\">Pebble SDK 2.0</a>. It essentially cuts out the 'man in the middle' apps needed for communication with the web, which can limit the audience if the developer (such as myself!) is only familiar with one platform, such as Android.\n\nThe idea I came up with was this: On the Transport for London website (<a title=\"TFL\" href=\"http://www.tfl.gov.uk/\">tfl.gov.uk</a>), there is an HTML table that details the line status of all the different Underground lines. On a good business day these will all show 'Good service', and on a bad day/weekend a lot will show 'Part closure' or 'Planned closure'. Wouldn't it be great if this information was more readily available to a commuter or tourist if they happened to be equipped with a Pebble watch?\n\nSo that is what I set out to do, and with a little bit of JS wisdom, the result is PTubeStatus!\n\n<a href=\"http://ninedof.files.wordpress.com/2013/11/mockup2.gif\"><img class=\"aligncenter size-full wp-image-1278\" alt=\"mockup2\" src=\"http://ninedof.files.wordpress.com/2013/11/mockup2.gif\" width=\"144\" height=\"168\" /></a> The major challenges were parsing the data and sending all these strings over app message without causing buffer overflows or <code>APP_MSG_BUSY</code> errors. The solution was to chain the messages sent to the watch so that when one was ack'd, the next set of data was sent. When the second set was sent, the JavaScript signaled the watch to load it into a <code>MenuLayer</code> and show it.\n\nYou can download the app to try it for yourself from <a title=\"mypebblefaces\" href=\"http://www.mypebblefaces.com/apps/3905/7768/\">mypebblefaces</a>, and if you find it useful and fancy making a donation, you can do so by purchasing the installer app for Android from <a title=\"PTubeStatus Installer\" href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.ptubestatusinstaller\">Google Play</a>, which I will update to let you know that the watch app also needs updating!\n\nAs usual, any feedback and bug reports are most welcome, and I will respond to each of them.\n\nEnjoy!",
    "tags": [
      "Integration",
      "Pebble"
    ]
  },
  {
    "id": "1295",
    "title": "Pebble SDK 2.0 Tutorial #1: Your First Watchapp",
    "link": "https://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/",
    "pubDate": "Mon, 02 Dec 2013 20:50:48 +0000",
    "postDate": "2013-12-02 20:50:48",
    "body": "<strong>Introduction</strong>\n\nAfter the Pebble SDK update to version 2.0, the time has come to write a new version of my tutorial series for this new SDK.\n\nIf you are not familiar with the following basic C concepts, please read <a title=\"Pebble Watch Face SDK Tutorial #1: Beginner’s Primer to the C Language\" href=\"http://ninedof.wordpress.com/2013/06/19/pebble-watch-face-sdk-tutorial-1-beginners-primer-to-the-c-language/\">Part 1 of the 1.X tutorial</a>, which is just as appropriate now:\n<ol>\n\t<li>Variables and variable scope (local or global?)</li>\n\t<li>Functions (definitions and use)</li>\n\t<li>Structures</li>\n\t<li>Pointers</li>\n\t<li>Program flow (if, else etc.)</li>\n\t<li>Pre-processor statements (<code>#define</code>, <code>#include</code> etc)</li>\n</ol>\nUp to speed? Good! Let's make our first SDK 2.0 watchapp. This time the tutorial will take a more practical approach, with each section finishing with a compilable project showing off the things learned therein.\n\n<strong>Development Environment</strong>\n\nIn order to write and compile watchfaces there are two main options for Windows users:\n<ol>\n\t<li>Use <a title=\"cloudpebble\" href=\"http://cloudpebble.net\">Cloud Pebble</a>.</li>\n\t<li><a title=\"Pebble Windows install instructions\" href=\"https://developer.getpebble.com/2/getting-started/linux/\">Install Ubuntu on a virtual machine</a>.</li>\n</ol>\nChoose whichever works for you. However, since the first draft of this tutorial section, CloudPebble now allows you to install, take screenshots and see logs from Pebble apps from the Compilation page, so for the purposes of a more simple start I'll be writing this tutorial from the Cloud Pebble perspective.\n\n<strong>First Steps\n</strong>\n\nTo get started, log into Cloud Pebble and choose 'Create Project'.\n<ol>\n\t<li>Enter a suitable name such as 'Tutorial Part 1'.</li>\n\t<li>Choose 'Pebble C SDK'.</li>\n\t<li>Set the template to 'Empty Project'</li>\n\t<li>Confirm with 'Create'.</li>\n</ol>\nNext, click 'New C file' and enter a name. I'd recommend 'main.c'. This file will contain the C code that makes up the watchface we're creating.\n\n<strong>Setting up the Basics</strong>\n\nIn order to use (or 'include') all the Pebble SDK goodness already created for our use, start the file with this line:\n\n[code language=\"cpp\"]\n#include &lt;pebble.h&gt;\n[/code]\n\nAll C programs begin at the start of the 'main' function (void means no arguments). From there we call <code>init()</code> (initialize) to set up our app, <code>app_event_loop()</code> to wait for events such as ticks, buttons presses etc. Finally when the watchface is closed Pebble calls <code>deinit()</code> (de-initialize) to free up all the memory we've used.\n\n[code language=\"cpp\"]\nint main(void)\n{\n  init();\n  app_event_loop();\n  deinit();\n}\n[/code]\n\nIn C all functions must be defined in full (behaviourally) or by prototype (just the signature, such as <code>void init();</code>) before their first call in a file. To meet this requirement and maintain simplicity for now, enter the next code segment ABOVE <code>main()</code>. This will be where we initialize all our app elements:\n\n[code language=\"cpp\"]\nvoid init()\n{\n  //Initialize the app elements here!\n}\n\nvoid deinit()\n{\n  //De-initialize elements here to save memory!\n}\n[/code]\n\nDone that? Let's add our first app element: the <code>Window</code>. In the previous 1.X SDK, these structures were declared globally and referred to elsewhere using pointers. Since then, the 2.0 SDK has moved to declaring a pointer, and then dynamically allocating memory for the element when they are created. This is much better from a memory management point of view.\n\nRight at the top of the file, but UNDER the <code>#include</code> directive, add the pointer for the <code>Window</code> element. To keep it simple, we'll just call it 'window':\n\n[code language=\"cpp\"]\nWindow *window;\n[/code]\n\nAt the moment, this 'window' pointer does nothing. The next step is to call the function to make this pointer point to a full fleshed out <code>Window</code>. Back inside <code>init()</code> add the following lines to create the <code>Window</code> element. For clarity, this one time I'll re-write the whole <code>init()</code> function with the new code inserted:\n\n[code language=\"cpp\"]\nvoid init()\n{\n  //Initialize the app elements here!\n  window = window_create();\n  window_set_window_handlers(window, (WindowHandlers) {\n    .load = window_load,\n    .unload = window_unload,\n  });\n}\n[/code]\n\nYou may be wondering what all this 'window handlers' business is about. When you open the main Pebble watch menu from any watch face, the screen that slides into view containing 'Music, Set Alarm, Watchfaces etc.' is a <code>Window</code>! It contains an element called a <code>MenuLayer</code>, but we will cover that type of element later. When a <code>Window</code> is created and filled with elements, those elements need to be created fully before they can be shown. These will be done in two 'handler' (in that they handle, or take care of a certain event) functions.\n\nThe two we will use to display something in our <code>Window</code> will be called <code>window_load()</code> and <code>window_unload()</code> respectively. It doesn't require too much thought to realize what events they will handle! We will define them in a moment, but for now they are assigned by name to the <code>.load</code> and <code>.unload</code> members of the <code>WindowHandlers</code> type set to our <code>Window</code> for when it is loaded and unloaded.\n\nHere are the basic starter definitions; once again they MUST be placed before their first calls in the file, so place them above <code>init()</code> but below the <code>#include</code> directive and global <code>Window</code> pointer declaration. If you did all that correctly, your c source file should look like this:\n\n[code language=\"cpp\"]\n#include &lt;pebble.h&gt;\n\nWindow *window;\n\nvoid window_load(Window *window)\n{\n  //We will add the creation of the Window's elements here soon!\n}\n\nvoid window_unload(Window *window)\n{\n  //We will safely destroy the Window's elements here!\n}\n\nvoid init()\n{\n  //Initialize the app elements here!\n  window = window_create();\n  window_set_window_handlers(window, (WindowHandlers) {\n    .load = window_load,\n    .unload = window_unload,\n  });\n}\n\nvoid deinit()\n{\n  //De-initialize elements here to save memory!\n}\n\nint main(void)\n{\n  init();\n  app_event_loop();\n  deinit();\n}\n[/code]\n\nIf you haven't arrived at this result so far, go back to the bits that differ and see how they ended up where they are.\n\nThe next step as a responsible app developer is to make sure we de-initialize anything we initialize so that the net memory we use after the app is quit is zero. To do this for the only element we have so far (a <code>Window</code>), add the following line so your <code>deinit()</code> function looks like this:\n\n[code language=\"cpp\"]\nvoid deinit()\n{\n  //We will safely destroy the Window's elements here!\n  window_destroy(window);\n}\n[/code]\n\nThe final basic step is to actually make the app 'appear' when it is chosen from the watch menu. To do this, we call the <code>window_stack_push()</code> function, which 'pushes' our <code>Window</code> into the top of the stack, and so appearing on top and in the foreground. Add this line to the END of your <code>init()</code> function like so:\n\n[code language=\"cpp\"]\n  window_stack_push(window, true);\n[/code]\n\nThis will make the window slide into view (denoted by the <code>true</code> argument), but it will be completely blank! Let's rectify that.\n\n<strong>Making the App Do Something</strong>\n\nWhat we've done so far is to initialize an empty <code>Window</code>. Now let's add the first sub-element to make it show some output. Introducing the <code>TextLayer</code>! This is an element used to show any standard string of characters into a pre-defined area. As with any element, we first need a global pointer. Add this under the <code>Window</code> pointer near the top of the file like so:\n\n[code language=\"cpp\"]\nTextLayer *text_layer;\n[/code]\n\nThe next step is to allocate the memory for the underlying structure. This is done in the <code>window_load()</code> function. Here are the basic functions to call when setting up a <code>TextLayer</code>. I'll summarize them afterwards:\n\n[code language=\"cpp\"]\n  text_layer = text_layer_create(GRect(0, 0, 144, 168));\n  text_layer_set_background_color(text_layer, GColorClear);\n  text_layer_set_text_color(text_layer, GColorBlack);\n\n  layer_add_child(window_get_root_layer(window), text_layer_get_layer(text_layer));\n[/code]\n\nThe first line calls the function to fully create the <code>TextLayer</code> structure with a frame size of 144 x 168 (stored in a <code>GRect</code>, or rectangle structure), origin at (0, 0), then assigns the location of the resulting memory to the text_layer pointer. The second line sets the layer's background colour using the supplied pointer and <code><a title=\"GColor specification\" href=\"https://developer.getpebble.com/2/api-reference/group___graphics_types.html#gaafde3cb660d99f7fe83e40c86e67b6c4\">GColor</a></code> type. Finally the third line sets the text colour itself, in a similar manner to the second line. The fourth line adds the <code>TextLayer</code> to the Window as a child (shown in front).\n\nAfter this, remember to add the corresponding de-initialization code to free up the memory we used in <code>window_unload()</code> but BEFORE <code>window_destroy()</code> (the elements that belong to a <code>Window</code> should be removed before the <code>Window</code> itself):\n\n[code language=\"cpp\"]\ntext_layer_destroy(text_layer);\n[/code]\n\nNow the best bit! We make the watch app tell us whatever we want. Go back to the line after <code>layer_add_child()</code> and add the next line. You can set the quoted text argument to whatever you want:\n\n[code language=\"cpp\"]\n  text_layer_set_text(text_layer, &quot;Anything you want, as long as it is in quotes!&quot;);\n[/code]\n\nNow we should be ready to see the fruits of our labour!\n\n<strong>Compilation and Installation</strong>\n\nMake sure you hit 'Save', then click 'Settings' on the left. Here you can set all kinds of app-related settings, but for now just give your own values to 'Short App Name' and 'Company Name'. Hit 'Save Changes'. Next, go to 'Compilation' and hit 'Run Build'. You should be greeted with 'Successful' next to 'Status'. If not, go back and compare your code to the segments above, or check out the example download at the end of the post.\n\nEnter your phone's IP address and click 'install and run' after enabling <a title=\"Developer Connection\" href=\"https://developer.getpebble.com/2/getting-started/developer-connection/\">Pebble Developer Connection</a> or download the .pbw file, then open the resulting file on your phone. After the Pebble app has done it's work, you should be able to see your text on the watch! Exciting!\n\n<strong>Conclusions</strong>\n\nSo there you have it, a very simple watch app to show some text. Next time we'll flesh it out a bit more and make it do something really useful, like showing the time!\n\nYou can find the example project that you should end up with after this tutorial section <a title=\"Source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-1\">on GitHub</a>.\n\nAs always let me know if you have any questions or suggestions and stay tuned for the next section!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1297",
    "title": "Pebble SDK 2.0 Tutorial on the Way!",
    "link": "https://ninedof.wordpress.com/2013/12/01/pebble-sdk-2-0-tutorial-on-the-way/",
    "pubDate": "Sun, 01 Dec 2013 22:08:36 +0000",
    "postDate": "2013-12-01 22:08:36",
    "body": "So after getting some experience in updating most of my 1.X watchfaces/apps to SDK 2.0, I feel it is time to start writing the corresponding tutorial!\n\nThis time I will take a more practical approach, with each section culminating in a compilable project that shows off the subject matter.\n\nThe <a title=\"Pebble SDK Tutorial\" href=\"http://ninedof.wordpress.com/pebble-sdk-tutorial/\">1.X tutorial series</a> will still be valid for tinkering around and releasing apps until 2.0 goes officially live, and is also a good introduction to how the Pebble SDK is made up; so if you want to get a general look at getting started have a look at that. But be aware a lot will change soon!\n\nStay tuned!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1334",
    "title": "Updates",
    "link": "https://ninedof.wordpress.com/2013/12/15/updates/",
    "pubDate": "Sun, 15 Dec 2013 22:44:26 +0000",
    "postDate": "2013-12-15 22:44:26",
    "body": "So now the semester has finished, I can get down to some real coding and tutorial writing. Things to expect over the next few weeks:\n<ul>\n\t<li>More parts of the Pebble SDK 2.0 Tutorial.</li>\n\t<li>Information on a basic Pebble rendering engine.</li>\n\t<li>A small post on my recently acquired Spark Core.</li>\n</ul>\nIn other news, the latest versions of Watch Trigger (2.3) and Watch Trigger + (1.5) have been sent to Google Play, fixing xx-hdpi display issues and a bug when opening the front camera on the LG Nexus 5.\n\nStay tuned!",
    "tags": [
      "Pebble",
      "Releases"
    ]
  },
  {
    "id": "1337",
    "title": "Pebble SDK 2.0 Tutorial #2: Telling the Time.",
    "link": "https://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/",
    "pubDate": "Wed, 18 Dec 2013 13:33:57 +0000",
    "postDate": "2013-12-18 13:33:57",
    "body": "<strong>Required Reading</strong>\n\n<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>\n\n<strong>Introduction</strong>\n\nSo far, if you were stopped in the street and asked about your Pebble, you'd be able to wow them by telling them you wrote your own watch app. Less impressive will it seem when it can't do anything useful, so let's fix that now!\n\n<strong>Getting the Time</strong>\n\nTo get the time for your watchface, Pebble SDK allows you to subscribe to an event service that runs a 'handler' whenever it ticks.\n\nFor example, if you create a function called <code>tick_handler()</code> and register it to be run when the minute changes, you would be able to allow the watch to sleep the remaining time. Obviously there is a trade off between frequency of updates and power usage, but being the watch face designer, you get to choose!\n\nSo, create a new cloudpebble project and paste in the code you wrote in the last tutorial section into the main .c file. Let's get the time! First, go to Settings and change the 'App kind' to Watch Face.\n\nThe next step is to create the empty handler function we will use to update the time display when the minute ticks over. Here's how you'd go about doing that:\n\n[code language=\"cpp\"]\nvoid tick_handler(struct tm *tick_time, TimeUnits units_changed)\n{\n\t//Here we will update the watchface display\n}\n[/code]\n\nThe 'tick_time' argument contains the time data and 'units_changed' contains which unit was changed. You could use this to run an <code>Animation</code> once every hour, for example. Make sure the function is, as always, defined BEFORE it is first encountered. So in this case above where <code>window_load()</code> is defined.\n\nYou register this handler function with the tick event service using the function below, inserted into <code>init()</code>.\n\n[code language=\"cpp\"]\ntick_timer_service_subscribe(MINUTE_UNIT, (TickHandler) tick_handler);\n[/code]\n\nThe MINUTE_UNIT specifier tells the tick service that we want an update on each new minute, and no more often. You can choose other types from the API list <a title=\"Tick Units\" href=\"https://developer.getpebble.com/2/api-reference/group___wall_time.html#ga0423d00e0eb199de523a92031b5a1107\">here</a>.\n\nOnce again, we can undo what we set up when the watch face is unloaded, so add the corresponding unsubscribe call in <code>deinit()</code>. This is virtually redundant as nothing can happen once the watchface is closed, but is a good practice to get into:\n\n[code language=\"cpp\"]\ntick_timer_service_unsubscribe();\n[/code]\n\nSo now we will be getting our timely updates, we can update the <code>TextLayer</code> we created last time to show the time to the user. First, reserve a global character buffer that will live as long as the <code>TextLayer</code> below the pointers at the top of the file (as the text is not copied when being set as the <code>TextLayer</code>'s current text):\n\n[code language=\"cpp\"]\nchar buffer[] = &quot;00:00&quot;;\n[/code]\n\nNext, add the following calls to your tick handler to format the character buffer with the time and set it as the <code>TextLayer</code>'s new text:\n\n[code language=\"cpp\"]\nvoid tick_handler(struct tm *tick_time, TimeUnits units_changed)\n{\n\t//Format the buffer string using tick_time as the time source\n\tstrftime(buffer, sizeof(&quot;00:00&quot;), &quot;%H:%M&quot;, tick_time);\n\n\t//Change the TextLayer text to show the new time!\n\ttext_layer_set_text(text_layer, buffer);\n}\n[/code]\n\nA full listing of the modifiers can be found <a title=\"strftime\" href=\"http://php.net/strftime\">here</a>. Now when the tick event service counts a new minute, it will call our handler function, which in turn updates the time shown to the user. Nifty! Go to 'Compilation' and try it.\n\nBut what if we want to start the watchface with the time already showing? We can just call out tick handler (it is, after all, just a function!) and supply the current time and tick interval it is expecting. The code segment below shows how this is accomplished, placed at the end of <code>window_load()</code>:\n\n[code language=\"cpp\"]\n//Get a time structure so that the face doesn't start blank\nstruct tm *t;\ntime_t temp;\ntemp = time(NULL);\nt = localtime(&amp;temp);\n\n//Manually call the tick handler when the window is loading\ntick_handler(t, MINUTE_UNIT);\n[/code]\n\n<strong>Aesthetic Touches</strong>\n\nAt the moment this watch face is pretty dull. Let's make it a bit more pleasing to the eye! You can use the <code>text_layer_set_*</code> functions (<a title=\"TextLayer\" href=\"https://developer.getpebble.com/2/api-reference/group___text_layer.html\">found here</a>) to change how the <code>TextLayer</code> looks. Here's an example replacement of the relevant code segment in <code>window_load()</code> that looks a little more realistic:\n\n[code language=\"cpp\"]\ntext_layer = text_layer_create(GRect(0, 53, 132, 168));\ntext_layer_set_background_color(text_layer, GColorClear);\ntext_layer_set_text_color(text_layer, GColorBlack);\ntext_layer_set_text_alignment(text_layer, GTextAlignmentCenter);\ntext_layer_set_font(text_layer, fonts_get_system_font(FONT_KEY_BITHAM_42_BOLD));\n\nlayer_add_child(window_get_root_layer(window), (Layer*) text_layer);\n[/code]\n\nNow that the current time is large, front and center, we will add one final aesthetic touch before moving on to <code>GBitmap</code>s, custom <code>GFont</code>s, <code>Animation</code>s etc in the next section of the tutorial.\n\nIntroducing the <code>InverterLayer</code>! When placed on top of other layers, this <code>Layer</code> simply inverts all the pixels under it from white to black and vice versa. Let's add one on top of our time display to show the effect.\n\nFirst, declare an <code>InverterLayer</code> pointer at the top of the file in global scope:\n\n[code language=\"cpp\"]\nInverterLayer *inv_layer;\n[/code]\n\nNext, add the relevant function calls in <code>window_load()</code> to create and position the <code>InverterLayer</code>. Make sure it is added as a child layer AFTER the <code>TextLayer</code>, or the <code>TextLayer</code> won't be subject to its inverting effects (it won't be below it):\n\n[code language=\"cpp\"]\n//Inverter layer\ninv_layer = inverter_layer_create(GRect(0, 50, 144, 62));\nlayer_add_child(window_get_root_layer(window), (Layer*) inv_layer);\n[/code]\n\nRe-compile and install from the Compilation screen and you should see a smart banner of black across the middle of your watch face, inverting the previously black time text to white.\n\nBut we're still not done! Remember we must destroy what we create in the <code>window_unload()</code> function. Here's how said function should look now:\n\n[code language=\"cpp\"]\nvoid window_unload(Window *window)\n{\n\t//We will safely destroy the Window's elements here!\n\ttext_layer_destroy(text_layer);\n\n\tinverter_layer_destroy(inv_layer);\n}\n[/code]\n\n<strong>Conclusion</strong>\n\nSo there you have it! A more interesting watch face, ready for any way of improvement. I'll cover a few that I've already mentioned such as images, custom fonts and animations in the next tutorial sections. In the meantime check what you have against the example project available <a title=\"Source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-2\">on GitHub</a>, or if you got stuck.\n\nAs always, let me know if you have any queries of feedback. Stay tuned for the next section!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1345",
    "title": "Watch App Selector 1.6: Stars, Source & More",
    "link": "https://ninedof.wordpress.com/2013/12/17/watch-app-selector-1-6-stars-source-more/",
    "pubDate": "Tue, 17 Dec 2013 01:25:23 +0000",
    "postDate": "2013-12-17 01:25:23",
    "body": "Watch App Selector for Android just received a bumper update. It features a new layout, showing compatibility and source code availability:\n<p style=\"text-align:left;\"><a href=\"http://ninedof.files.wordpress.com/2013/12/screenshot_2013-12-17-01-01-21.png\"><img class=\"aligncenter  wp-image-1346\" alt=\"Screenshot_2013-12-17-01-01-21\" src=\"http://ninedof.files.wordpress.com/2013/12/screenshot_2013-12-17-01-01-21.png?w=545\" width=\"382\" height=\"678\" /></a></p>\n<p style=\"text-align:left;\">Also included are a new watch app, Starfield Graphics Demo, as well as two new faces based on the demo: Starfield and Starfield Power Saver. The latter animates only once a second to save battery power.</p>\n<p style=\"text-align:left;\"><a href=\"http://ninedof.files.wordpress.com/2013/12/mockup.gif\"><img class=\"aligncenter\" alt=\"mockup\" src=\"http://ninedof.files.wordpress.com/2013/12/mockup.gif\" width=\"144\" height=\"168\" /></a></p>\n<p style=\"text-align:left;\">Both are available on mypebblefaces, or with future updates and a whole bunch more stuff on Google Play as part of Watch App Selector:</p>\n<p style=\"text-align:center;\"><a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchappselector\"> <img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" /> </a></p>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1370",
    "title": "Diving into Lua for Just Cause 2 Multiplayer",
    "link": "https://ninedof.wordpress.com/2013/12/19/diving-into-lua-for-just-cause-2-multiplayer/",
    "pubDate": "Thu, 19 Dec 2013 19:34:16 +0000",
    "postDate": "2013-12-19 19:34:16",
    "body": "I've heard about the Lua language before, but never had the experience or drive to explore it, but now that I have lots of general experience and a love of Just Cause 2, I decided to give it a go.\n\nThe result, available on <a href=\"https://github.com/C-D-Lewis/jc2-mp-cl\">GitHub</a>, is a script for the JC2 MP server that implements player commands such as teleports, vehicle/weapon spawns and per-player home spawns. It also reads admin setting from a file as well as cause-specific death messages.\n\nIt has grown much over the last few days in collaboration with another writer, and hopefully it will become even more feature filled as I discover more about Lua.",
    "tags": [
      "Lua"
    ]
  },
  {
    "id": "1376",
    "title": "New Watchapp: Data Toggle for Pebble (Android)",
    "link": "https://ninedof.wordpress.com/2013/12/21/new-watchapp-data-toggle-for-pebble/",
    "pubDate": "Sat, 21 Dec 2013 16:34:31 +0000",
    "postDate": "2013-12-21 16:34:31",
    "body": "I've recently upgraded my now 3-year old Galaxy S to a Nexus 5, and one difference I noticed in the stock 4.4.2 Kit Kat Android is that instead of toggling the radios (as would happen in the pull-down menu on CM 10.1), I was taken to the actual menu and then needed to perform the toggling myself.\n\nThis meant that in order to switch from Wi-Fi to Data (HSDPA here), I would have to tap 9 times to do so (not including entering my pin code on the lockscreen). Sure, I could flash the equivalent ROM or a similar one, but it would unnecessarily void my warranty (I am otherwise perfectly happy with stock Kit Kat at the moment). Another solution? Code my own!\n\nThe result is Data Toggle for Pebble, a combination of a Pebble Watchapp and Android Receiver/Service combo that performs the actual radio toggling, via AppMessage. Using the up and down buttons on the watch, the phone is asked to toggle either the Wi-Fi or Data radio and then waits for the confirmation from the phone. The one caveat (but not a deal breaker) that arises from the Android APIs is that toggling Data while Wi-Fi is connected appears to have no effect, so it is marked as 'N/A' in that case.\n\nHere is an animated screenshot:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/12/mockup1.gif\"><img class=\"aligncenter size-full wp-image-1377\" alt=\"mockup\" src=\"http://ninedof.files.wordpress.com/2013/12/mockup1.gif\" width=\"144\" height=\"168\" /></a>\n\nThe Android app also doubles as an installer for the watchapp's .pbw file, as well as links to more of my content.\n\n<strong>Download</strong>\n\nBoth components can be installed as one from Google Play:\n<a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.datatoggle\">\n<img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" />\n</a>\n\nSource code is available on <a title=\"Source code\" href=\"https://github.com/C-D-Lewis?tab=repositories\">GitHub</a>.\n\nEnjoy!",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1390",
    "title": "Pebble SDK 2.0 Tutorial #3: Images and Fonts",
    "link": "https://ninedof.wordpress.com/2013/12/22/pebble-sdk-2-0-tutorial-3-images-and-fonts/",
    "pubDate": "Sun, 22 Dec 2013 15:12:22 +0000",
    "postDate": "2013-12-22 15:12:22",
    "body": "<strong>Required Reading</strong>\n\n<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #2: Telling the Time.\" href=\"http://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/\">Pebble SDK 2.0 Tutorial #2: Telling the Time</a>\n\n<strong>Introduction</strong>\n\nSo now you've learned how to create a watchface and spice it up a bit with a well placed <code>InverterLayer</code>. But it's still pretty dull. A much better way to improve it is to use your own images and fonts. That's what this section will focus on.\n\nIn a Pebble watch app or watchface, images and fonts are referred to in the app's <code>appinfo.json</code> file, which is managed automatically for you by CloudPebble, and so will not be covered in great detail right now. Of much more importance to you now is that in the C code file, images are stored in <code>GBitmap</code> structures and fonts in <code>GFont</code> structures. Just like all the <code>Layer</code> types, they are created and allocated memory dynamically, with the function names syntactically very similar, so you will hopefully find yourself looking them up in the <a title=\"API Docs\" href=\"https://developer.getpebble.com/2/api-reference/\">API Documentation</a> a lot less.\n\n<strong>Making a Better First Impression</strong>\n\nYou have probably noticed that all your favorite watchapps have their own icon in the Pebble system menu, and so the first thing we're going to do is add one to our tutorial face we've been building up over the last couple of sections. Once again, create a new project over at CloudPebble and add a <code>main.c</code> file containing the finished code from the last tutorial section.\n\nNext, select 'Add new' from the 'Resources' menu on the left, leave the type as PNG and browse for a file of 8-bit 2-colour PNG format with a size of 24x28 pixels. Below is one you can use for now:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/12/menu_icon.png\"><img class=\"aligncenter size-full wp-image-1401\" alt=\"menu_icon\" src=\"http://ninedof.files.wordpress.com/2013/12/menu_icon.png\" width=\"24\" height=\"28\" style=\"border-style:solid;border-width:3px;\" /></a>Give it an identifier, such as 'MENU_ICON' and click 'Save'. Next, go to 'Settings' and choose the file you just added from the 'Menu image' dropdown menu.  Then click 'Save changes'.\n\n<strong>Making the Watchface More Appealing</strong>\n\nLet's add some more artistic direction to our watch face. At the moment, it probably looks like this:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/12/pebble-screenshot_2013-12-22_13-59-31.png\"><img class=\"aligncenter size-full wp-image-1402\" alt=\"pebble-screenshot_2013-12-22_13-59-31\" src=\"http://ninedof.files.wordpress.com/2013/12/pebble-screenshot_2013-12-22_13-59-31.png\" width=\"144\" height=\"168\" style=\"border-style:solid;border-width:3px;\" /></a>Not very appealing. Let's use images to add detail to the <code>InverterLayer</code>. Below are two samples I created that we can use to do just that:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/12/future1.png\"><img class=\"aligncenter size-full wp-image-1405\" alt=\"future\" src=\"http://ninedof.files.wordpress.com/2013/12/future1.png\" width=\"144\" height=\"50\" style=\"border-style:solid;border-width:3px;\" /></a> <a href=\"http://ninedof.files.wordpress.com/2013/12/past1.png\"><img class=\"aligncenter size-large wp-image-1406\" alt=\"past\" src=\"http://ninedof.files.wordpress.com/2013/12/past1.png?w=144\" width=\"144\" height=\"50\" style=\"border-style:solid;border-width:3px;\" /></a> As with the menu icon, the first step is to add both images as Resources in CloudPebble and give them appropriate identifiers, such as <code>FUTURE</code> and <code>PAST</code> respectively. Next, go back to the C source file and declare two global pointers of type <code>GBitmap</code> and two of type <code>BitmapLayer</code>, like so:\n\n[code language=\"cpp\"]\nGBitmap *future_bitmap, *past_bitmap;\nBitmapLayer *future_layer, *past_layer;\n[/code]\n\nThe <code>GBitmap</code>s will contain the image data, and the <code>BitmapLayer</code>s will present the images to the user as a <code>Layer</code>. So, in <code>window_load()</code>, add the appropriate function calls to create these elements. Here is how it is done. Try and understand what each line does, using your previous knowledge of the <code>TextLayer</code> and <code>InverterLayer</code>:\n\n[code language=\"cpp\"]\n//Load bitmaps into GBitmap structures\n//The ID you chose when uploading is prefixed with 'RESOURCE_ID_'\nfuture_bitmap = gbitmap_create_with_resource(RESOURCE_ID_FUTURE);\npast_bitmap = gbitmap_create_with_resource(RESOURCE_ID_PAST);\n\n//Create BitmapLayers to show GBitmaps and add to Window\n//Sample images are 144 x 50 pixels\nfuture_layer = bitmap_layer_create(GRect(0, 0, 144, 50));\nbitmap_layer_set_bitmap(future_layer, future_bitmap);\nlayer_add_child(window_get_root_layer(window), bitmap_layer_get_layer(future_layer));\n\npast_layer = bitmap_layer_create(GRect(0, 112, 144, 50));\nbitmap_layer_set_bitmap(past_layer, past_bitmap);\nlayer_add_child(window_get_root_layer(window), bitmap_layer_get_layer(past_layer));\n[/code]\n\nOnce again, we need to add the de-init code to free up the memory again:\n\n[code language=\"cpp\"]\n//Destroy GBitmaps\ngbitmap_destroy(future_bitmap);\ngbitmap_destroy(past_bitmap);\n\n//Destroy BitmapLayers\nbitmap_layer_destroy(future_layer);\nbitmap_layer_destroy(past_layer);\n[/code]\n\nAre you beginning to spot patterns in how the API function calls are named? This way once you've worked with a new layer it is easier to guess correctly what to call for newer elements and reducing your dependence on the API documentation. Once all this has been done, your watchface should look like this:\n<a href=\"http://ninedof.files.wordpress.com/2013/12/pebble-screenshot_2013-12-22_14-43-19.png\"><img class=\"aligncenter size-full wp-image-1409\" alt=\"pebble-screenshot_2013-12-22_14-43-19\" src=\"http://ninedof.files.wordpress.com/2013/12/pebble-screenshot_2013-12-22_14-43-19.png\" width=\"144\" height=\"168\" style=\"border-style:solid;border-width:3px;\" /></a>\n\n<strong>Custom Fonts</strong>\n\nAnother good way to add your own influence to your watchface is to use a custom font. The procedure for doing so it almost identical to that for images, so let's do it now.\n\nFirst, again, add the font as a Resource in CloudPebble. This time set the format to 'TrueType font'. The font you choose will need to the a '.ttf' font file. <a title=\"Sample font file\" href=\"https://www.dropbox.com/s/ugxuv4tbugmvldd/imagine.zip\">Here's a sample for you to use now</a>. Once you have browsed for the file, give it an identifier such as <code>IMAGINE_42</code>. The number after the name tells the SDK what font size you want. The rest of the settings can be left alone for now, so click 'Save' and go back to the C file.\n\nThe process for using the font in the watchface is <em>almost</em> the same as that for the images. First, load the resource into a <code>ResHandle</code> (Handle on the Resource, so to speak) structure BEFORE the TextLayer is created (We will be using it for the time display itself):\n\n[code language=\"cpp\"]\n//Load font\nResHandle font_handle = resource_get_handle(RESOURCE_ID_IMAGINE_42);\n[/code]\n\nNow, modify the call to <code>text_layer_set_font()</code> to use our custom font and a slight layout modification to the text position by modifying the <code>GRect</code> to have a width of 144 pixels, like so:\n\n[code language=\"cpp\"]\ntext_layer = text_layer_create(GRect(0, 53, 144, 168));\n\n...\n\ntext_layer_set_font(text_layer, fonts_load_custom_font(font_handle));\n[/code]\n\nAfter compilation, the watchface should finally look like so:\n<a href=\"http://ninedof.files.wordpress.com/2013/12/pebble-screenshot_2013-12-22_15-00-53.png\"><img class=\"aligncenter size-full wp-image-1411\" alt=\"pebble-screenshot_2013-12-22_15-00-53\" src=\"http://ninedof.files.wordpress.com/2013/12/pebble-screenshot_2013-12-22_15-00-53.png\" width=\"144\" height=\"168\" style=\"border-style:solid;border-width:3px;\" /></a>\n\nMuch better!\n\n<strong>Conclusion</strong>\n\nSo there you have using custom images and fonts. If you want, add some more or change the existing ones (being careful with the dimensions in the code!) to see for yourself what small modifications can do to the look an feel.\n\nNext time: Animations: Tweens and Timers.\n\nThe full source code the the end result of this part of the tutorial can be found <a title=\"Source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-3\">on GitHub</a>.",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1432",
    "title": "Spark Core: Initial Thoughts",
    "link": "https://ninedof.wordpress.com/2013/12/23/spark-core-initial-thoughts/",
    "pubDate": "Mon, 23 Dec 2013 23:47:44 +0000",
    "postDate": "2013-12-23 23:47:44",
    "body": "As with the Pebble smartwatch, I also backed another project called <a title=\"Spark Core\" href=\"http://spark.io\">Spark Core</a>, which promised the idea of a small, compact and easy to use Wi-Fi-enabled Arduino like device. And I must say, they certainly delivered!\n\n<a href=\"http://ninedof.files.wordpress.com/2013/12/img_20131223_140517.jpg\"><img class=\"aligncenter size-large wp-image-1433\" alt=\"IMG_20131223_140517\" src=\"http://ninedof.files.wordpress.com/2013/12/img_20131223_140517.jpg?w=545\" width=\"545\" height=\"403\" /></a>\n\nAfter a few initial problems programming the device from the Spark Cloud (a browser based IDE) which turned out to be mainly my fault (The device appears to rely on a rapid <code>loop()</code> completion to stay in contact with the Spark Cloud and I was inhibiting it with a habitual <code>while(true)</code> loop within that loop, preventing Cloud access) I have succeeded in my first very minor project - interfacing with an Arduino Uno.\n\nThe idea is simple: The Adruino sends the characters '1', '2' and '3' in sequence and the Core flashes an attached LED the corresponding number of times.\n\nThe Arduino sketch:\n\n[code language=\"cpp\"]\nvoid flash(int pin)\n{\n  digitalWrite(pin, HIGH);\n  delay(50);\n  digitalWrite(pin, LOW);\n  delay(50);\n}\n\nvoid setup()\n{\n  Serial.begin(9600);\n  pinMode(13, OUTPUT);\n}\n\nvoid loop()\n{\n  Serial.print('1');\n  flash(13);\n  delay(1000);\n  Serial.print('2');\n  flash(13);\n  delay(1000);\n  Serial.print('3');\n  flash(13);\n  delay(1000);\n}\n[/code]\n\nAnd the Core code:\n\n[code language=\"cpp\"]\nint output_led = D0;\nint onboard_led = D7;\n\nvoid flash(int pin);\n\nvoid setup()\n{\n    Serial1.begin(9600);\n    pinMode(output_led, OUTPUT);\n    pinMode(onboard_led, OUTPUT);\n}\n\nvoid loop()\n{\n    if(Serial1.available() &gt; 0)\n    {\n        flash(onboard_led);\n\n        char c = (char)Serial1.read();\n\n        switch(c) {\n            case '1':\n            {\n                flash(output_led);\n                break;\n            }\n            case '2':\n            {\n                flash(output_led);\n                flash(output_led);\n                break;\n            }\n            case '3':\n            {\n                flash(output_led);\n                flash(output_led);\n                flash(output_led);\n            }\n        }\n    }\n}\n\nvoid flash(int pin)\n{\n    digitalWrite(pin, HIGH);\n    delay(50);\n    digitalWrite(pin, LOW);\n    delay(50);\n}\n[/code]\n\nAnd finally a video!\n\nhttp://www.youtube.com/watch?v=HL9Hp41IuzY\n\nAside from taking a while to discover that the TX RX pins are actually Serial1 and not Serial, the project was simple enough to implement. The Spark Cloud IDE is easy to use and satisfyingly hands-free!",
    "tags": [
      "Integration",
      "Spark Core"
    ]
  },
  {
    "id": "1442",
    "title": "Pebble SDK 2.0 Tutorial #4: Animations and Timers",
    "link": "https://ninedof.wordpress.com/2013/12/29/pebble-sdk-2-0-tutorial-4-animations-and-timers/",
    "pubDate": "Sun, 29 Dec 2013 15:10:47 +0000",
    "postDate": "2013-12-29 15:10:47",
    "body": "<strong>Required Reading</strong>\n\n<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #2: Telling the Time.\" href=\"http://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/\">Pebble SDK 2.0 Tutorial #2: Telling the Time</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #3: Images and Fonts\" href=\"http://ninedof.wordpress.com/2013/12/22/pebble-sdk-2-0-tutorial-3-images-and-fonts/\">Pebble SDK 2.0 Tutorial #3: Images and Fonts</a>\n\n<strong>Introduction</strong>\n\nAfter adding custom images and fonts to our watch face, the next logical way to improve it is to add non-static elements, movement if you will. For this we have <code>Animations</code>! Using the Pebble SDK provided <code>Animation</code> structure we can schedule movements of a <code>Layer</code>'s bounds whenever we want. This sort of \"start here and go here\" animation is called 'tweened' animation. The alternative kind offers greater flexibility and is achieved through the use of <code>AppTimer</code>s.\n\n<strong>Tweened Animation</strong>\n\nFirstly, we will apply a simple example of a tweened animation to our tutorial watch face. Start by importing the project code from the last section into CloudPebble and giving it a new name, such as 'SDKTut4' for example. Be sure to change the short and long app names in the 'Settings' section! We are going to animate the <code>TextLayer</code> showing the time when the minute changes. The first step is to change the type of tick event we subscribe to to <code>SECOND_UNIT</code> in <code>init()</code>:\n\n[code language=\"cpp\"]\ntick_timer_service_subscribe(SECOND_UNIT, (TickHandler) tick_handler);\n[/code]\n\nThis will enable us to be more precise about when the time display changes, which should ideally be as close to the zero-second mark as possible. To carry out a tweened animation we create a <code>PropertyAnimation</code> instance and specify its duration, delay after scheduling (allowing sub-second timing) and a handler function to be called when it has finished to free up the memory we used in creating it in the first place. This process is summarized in the code segment below, which should be added before the <code>tick_handler()</code> function:\n\n[code language=\"cpp\"]\nvoid on_animation_stopped(Animation *anim, bool finished, void *context)\n{\n\t//Free the memory used by the Animation\n\tproperty_animation_destroy((PropertyAnimation*) anim);\n}\n\nvoid animate_layer(Layer *layer, GRect *start, GRect *finish, int duration, int delay)\n{\n\t//Declare animation\n\tPropertyAnimation *anim = property_animation_create_layer_frame(layer, start, finish);\n\n\t//Set characteristics\n\tanimation_set_duration((Animation*) anim, duration);\n\tanimation_set_delay((Animation*) anim, delay);\n\n\t//Set stopped handler to free memory\n\tAnimationHandlers handlers = {\n\t\t//The reference to the stopped handler is the only one in the array\n\t\t.stopped = (AnimationStoppedHandler) on_animation_stopped\n\t};\n\tanimation_set_handlers((Animation*) anim, handlers, NULL);\n\n\t//Start animation!\n\tanimation_schedule((Animation*) anim);\n}\n[/code]\n\n<strong>Note: If you are compiling for the <a title=\"SDK 3.0 Migration Guide\" href=\"https://developer.getpebble.com/sdk/migration-guide/#using-propertyanimation\">Basalt platform</a>, you do not need to manually destroy your animation, so leave the handler out. </strong>\n\nYou can cast a <code>PropertyAnimation*</code> pointer to a <code>Animation*</code> pointer and vice versa where needed. In addition, for simplicity the <code>GRect</code>s describing the start and finish positions of the animated <code>Layer</code> are created on the heap, and then specified to the <code>animate_layer()</code> wrapper function as pointers using the '&amp;' operator.\n\nNow that these new functions are in place, it is time to use them! The animation we will add will slide the time display out to the right hand side at <code>seconds == 59</code> and then change the time and slide it back in from the left on <code>seconds == 0</code>. To do this, we simply modify our <code>tick_handler()</code> function to create the <code>GRects</code> and call the wrapper function to schedule the animations. This is shown by annotated example below:\n\n[code language=\"cpp\"]\nvoid tick_handler(struct tm *tick_time, TimeUnits units_changed)\n{\n\t//Format the buffer string using tick_time as the time source\n\tstrftime(buffer, sizeof(&quot;00:00&quot;), &quot;%H:%M&quot;, tick_time);\n\n\tint seconds = tick_time-&gt;tm_sec;\n\n\tif(seconds == 59)\n\t{\n\t\t//Slide offscreen to the right\n\t\tGRect start = GRect(0, 53, 144, 168);\n\t\tGRect finish = GRect(144, 53, 144, 168);\n\t\tanimate_layer(text_layer_get_layer(text_layer), &amp;start, &amp;finish, 300, 500);\n\t}\n\n\telse if(seconds == 0)\n\t{\n\t\t//Change the TextLayer text to show the new time!\n\t\ttext_layer_set_text(text_layer, buffer);\n\n\t\t//Slide onscreen from the left\n\t\tGRect start = GRect(-144, 53, 144, 168);\n\t\tGRect finish = GRect(0, 53, 144, 168);\n\t\tanimate_layer(text_layer_get_layer(text_layer), &amp;start, &amp;finish, 300, 500);\n\t}\n\n\telse\n\t{\n\t\t//Change the TextLayer text to show the new time!\n\t\ttext_layer_set_text(text_layer, buffer);\n\t}\n}\n[/code]\n\nCompile this and check it works. If you are unsure about the timing, remove the <code>if</code> statements and have the <code>Animation</code> run every second (although perhaps only the first one!) and work your way up to two working in tandem.\n\n<strong>Timers</strong>\n\nThe other main method of moving elements around is to use an <code>AppTimer</code>. These allow you to schedule something to happen whenever and how often you like. The paradigm is that you register some callback (another name for handler) function to run after a given delay. When that delay has elapsed, the callback function is called and performs your task. You can think of an <code>Animation</code> as a task executed by an <code>AppTimer</code> but with a very small delay. The example we are going to create is a small shape that moves back and forth above the time display as an extra aesthetic touch.\n\nTo enable a smooth animation effect, the rate at which the shape moves its position should be at least 25 frames per second. At this rate, the delay in milliseconds between <code>AppTimer</code> callback executions will be <strong>1000ms / 25 frames per second = 40ms delay</strong>. The first step is to create a new <code>TextLayer</code> to be our shape (here, a square). Do this at the top of the C file to accompany the other pointers:\n\n[code language=\"cpp\"]\nTextLayer *text_layer, *square_layer;\n[/code]\n\nWe are using a <code>TextLayer</code> for the convenience of being able to set just its bounds and background colour. Otherwise we would have go into graphics and update procedures, which are beyond the scope of this section. Also, we will need to declare the other elements of our moving cube; the <code>AppTimer</code>, its size, the time delta between frames and its movement direction, which will be either 1 or -1:\n\n[code language=\"cpp\"]\nAppTimer *timer;\nconst int square_size = 10;\nconst int delta = 40;\nint dx = 1;\n[/code]\n\nNext, we define the timer callback to update the position of the square. As you will see below, there are several stages to complete each time the callback is called:\n\n[code language=\"cpp\"]\nvoid timer_callback(void *data) {\n\t//Get current position\n\tGRect current = layer_get_frame(text_layer_get_layer(square_layer));\n\n\t//Check to see if we have hit the edges\n\tif(current.origin.x &gt; 144 - square_size)\n\t{\n\t\tdx = -1;\t//Reverse\n\t}\n\telse if(current.origin.x &lt; 0)\n\t{\n\t\tdx = 1;\t//Forwards\n\t}\n\n\t//Move the square to the next position, modifying the x value\n\tGRect next = GRect(current.origin.x + dx, current.origin.y, square_size, square_size);\n\tlayer_set_frame(text_layer_get_layer(square_layer), next);\n\n\t//Register next execution\n\ttimer = app_timer_register(delta, (AppTimerCallback) timer_callback, NULL);\n}\n[/code]\n\nMake sure this callback is defined before its first use, which will be in <code>window_load()</code> after the <code>TextLayer</code> itself is allocated, as shown below:\n\n[code language=\"cpp\"]\n//Create the square layer\nsquare_layer = text_layer_create(GRect(0, 55, square_size, square_size));\ntext_layer_set_background_color(square_layer, GColorWhite);\nlayer_add_child(window_get_root_layer(window), text_layer_get_layer(square_layer));\n[/code]\n\nThen, at the end of the function, start the chain reaction with an initial timer registration:\n\n[code language=\"cpp\"]\n//Start the square moving\ntimer = app_timer_register(delta, (AppTimerCallback) timer_callback, NULL);\n[/code]\n\nFinally, we must add function calls to <code>window_unload()</code> to tear down the elements related to the moving square and free the memory used:\n\n[code language=\"cpp\"]\n//Cancel timer\napp_timer_cancel(timer);\n\n//Destroy square layer\ntext_layer_destroy(square_layer);\n[/code]\n\nFinally, recompile and test the resulting watch face, and see the results! A thing to note is that waking up the Pebble's CPU this often will incur battery life penalties, so use timers sparingly!\n\n<strong>Conclusions</strong>\n\nSo that's how to use <code>Animation</code>s and <code>AppTimer</code>s! If you think about it, there is a way to replace the moving square's <code>AppTimer</code> with a <code>PropertyAnimation</code>, rendering its use here void. A more robust example is my <a title=\"Starfield Source\" href=\"https://github.com/C-D-Lewis/starfield-demo/blob/master/src/starfielddemo.c\">Starfield Demo</a>, which uses such timers as the core of its operation. A link to the finished product from this section can be found <a title=\"Part 4 Source\" href=\"https://www.dropbox.com/s/bl3dx9mhba5yr4r/sdktut4.zip\">HERE</a>. Enjoy! If you have queries or comments, make them below, or <a title=\"Tweet\" href=\"http://twitter.com/Chris_DL\">Tweet me</a>.",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1460",
    "title": "Big Watch Trigger Update Soon",
    "link": "https://ninedof.wordpress.com/2013/12/30/big-watch-trigger-update-soon/",
    "pubDate": "Mon, 30 Dec 2013 16:46:16 +0000",
    "postDate": "2013-12-30 16:46:16",
    "body": "After reading the Pebble UX Guidelines document last week, I realized that I had not changed the UI on either the watch app or phone app for Watch Trigger / Watch Trigger + for quite some time. Now is that time!\n\nPlanned changes are:\n<ol>\n\t<li>New UX compliant watch app with changeable settings</li>\n\t<li>Re-built phone app Settings and underlying Preferences system.</li>\n\t<li>A new 'Welcome' screen for first run to try and mitigate SDK 2.0 vs SDK 1.X confusion in new users.</li>\n\t<li>A possible overhaul of the phone app UI, if I have the energy.</li>\n</ol>\nThe new watch app will be SDK 2.0 only for new, as the release is just around the corner, but if another delay is announced I will try and find the time to upgrade the 1.X watch app as well. To clarify, the 1.X watchapp will still be compatible with the new version, but will not carry the additional features.\n\nHere is a sneak peek!\n\n<a href=\"http://ninedof.files.wordpress.com/2013/12/pebble-screenshot_2013-12-30_16-42-52.png\"><img class=\"aligncenter size-full wp-image-1461\" alt=\"pebble-screenshot_2013-12-30_16-42-52\" src=\"http://ninedof.files.wordpress.com/2013/12/pebble-screenshot_2013-12-30_16-42-52.png\" width=\"144\" height=\"168\" /></a>",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1467",
    "title": "Watch Trigger 3.0.1 and Watch Trigger + 2.0.1 Released: Don't Trust Old Code",
    "link": "https://ninedof.wordpress.com/2013/12/31/watch-trigger-3-0-1-and-watch-trigger-2-0-1-released-dont-trust-old-code/",
    "pubDate": "Tue, 31 Dec 2013 14:21:25 +0000",
    "postDate": "2013-12-31 14:21:25",
    "body": "Woke up today to multiple bug reports. Apparently I didn't test the new versions of the Android apps against the 1.X versions of the watchapps enough! Downgrading is easy enough a process, so after a while I had found that changing the old <code>AppSync</code> implementation for my newer <code>AppMessage</code> paradigm (Package whole Dictionaries, iterate and process all Tuples for each Dictionary received) seemed to resolve the problems!\n\nThus the bug fix update was sent to Google Play this morning after only a modicum of panicking. All users will need to re-install their appropriate watchapp, and the Android app will guide them:\n<p style=\"text-align:center;\"><a href=\"http://ninedof.files.wordpress.com/2013/12/screenshot_2013-12-31-14-17-18.png\"><img class=\"wp-image-1468\" alt=\"Screenshot_2013-12-31-14-17-18\" src=\"http://ninedof.files.wordpress.com/2013/12/screenshot_2013-12-31-14-17-18.png?w=545\" width=\"382\" height=\"678\" /></a></p>\nSo, with that out the way, I've moved on to applying the new dymanically allocated Animation system developed during the course of writing the SDK 2.0 Tutorial #4 to the Beam Up watchfaces, which should hopefully eliminate this ugly bug:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/12/img_20131226_185234.jpg\"><img class=\"aligncenter size-large wp-image-1469\" alt=\"IMG_20131226_185234\" src=\"http://ninedof.files.wordpress.com/2013/12/img_20131226_185234.jpg?w=545\" width=\"545\" height=\"403\" /></a>If it's successful I'll packages all four of those and the two new versions of Watch Trigger (+) into Watch App Selector and update that to the Play Store too. Exciting times!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1492",
    "title": "Update: Back to Work",
    "link": "https://ninedof.wordpress.com/2014/01/04/update-back-to-work/",
    "pubDate": "Sat, 04 Jan 2014 23:52:55 +0000",
    "postDate": "2014-01-04 23:52:55",
    "body": "Back to work! This means I'll be developing stuff in my spare time rather than all day. I know, it's sad news.\n\nThings to expect eventually (in the weeks range):\n<ul>\n\t<li>More Pebble SDK 2.0 Tutorial sections. A list of planned ones can <a title=\"Forum post\" href=\"http://forums.getpebble.com/discussion/9459/pebble-sdk-2-0-tutorial\">be seen here</a>.</li>\n\t<li>A new UI for Watch Trigger &amp;+ that better resembles Holo, but with that distinctive red theme. I'm also working on portrait shooting, but the Camera API hates me. It works, but the layout always seems to make the Preview View stretched and distorted. Here's a sneak preview:</li>\n</ul>\n<p style=\"text-align:center;\"><a href=\"http://ninedof.files.wordpress.com/2014/01/screenshot_2014-01-05-00-10-50.png\"><img class=\"aligncenter  wp-image-1497\" alt=\"Screenshot_2014-01-05-00-10-50\" src=\"http://ninedof.files.wordpress.com/2014/01/screenshot_2014-01-05-00-10-50.png?w=545\" width=\"305\" height=\"542\" /></a></p>\n\n<ul>\n\t<li>Toying with ideas for a 'canned' SMS responses app that can be customised on the phone, then set to the watchapp. We'll see.</li>\n</ul>\nHopefully Watch Trigger on the Play Store is stable enough to fend for itself for the time being. If not, let me know.",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1509",
    "title": "Appeal for Testers for Watch Trigger Update",
    "link": "https://ninedof.wordpress.com/2014/01/09/appeal-for-testers-for-watch-trigger-update/",
    "pubDate": "Thu, 09 Jan 2014 00:47:45 +0000",
    "postDate": "2014-01-09 00:47:45",
    "body": "After a couple of weeks work, I have almost finished a huge overhaul to Watch Trigger. It's been stripped down, redesigned and rebuilt. A lot of things have changed, and a lot of things have been improved!\n<p style=\"text-align:center;\"><a href=\"http://ninedof.files.wordpress.com/2014/01/screenshot_2014-01-07-00-54-14.png\"><img class=\"aligncenter  wp-image-1510\" alt=\"Screenshot_2014-01-07-00-54-14\" src=\"http://ninedof.files.wordpress.com/2014/01/screenshot_2014-01-07-00-54-14.png?w=545\" width=\"382\" height=\"678\" /></a></p>\nHowever, at the current count, there are over <strong>7000 active users</strong>, and after my fair share of scares releasing buggy software to this many people, I've learned that a good amount of testing is in order. But some bugs only come up on devices other than my own, so I'm appealing for testers who want to take the plunge early and report back what they find.\n\nIf you are one of these people, Tweet me or E-mail me and let me know!\n\nIsn't this exciting? If only my VHDL design wasn't so hard I'd be enjoying that this evening.\n\nKnown bugs:\n<ul>\n\t<li>With Instant Review off, the reset button still appears.</li>\n\t<li>Instinctively pressing back from Settings exits Activity.</li>\n</ul>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1523",
    "title": "Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations",
    "link": "https://ninedof.wordpress.com/2014/01/11/pebble-sdk-2-0-tutorial-5-buttons-and-vibrations/",
    "pubDate": "Sat, 11 Jan 2014 00:14:47 +0000",
    "postDate": "2014-01-11 00:14:47",
    "body": "<strong>Required Reading</strong>\n\n<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #2: Telling the Time.\" href=\"http://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/\">Pebble SDK 2.0 Tutorial #2: Telling the Time</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #3: Images and Fonts\" href=\"http://ninedof.wordpress.com/2013/12/22/pebble-sdk-2-0-tutorial-3-images-and-fonts/\">Pebble SDK 2.0 Tutorial #3: Images and Fonts</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #4: Animations and Timers\" href=\"http://ninedof.wordpress.com/2013/12/29/pebble-sdk-2-0-tutorial-4-animations-and-timers/\">Pebble SDK 2.0 Tutorial #4: Animations and Timers</a>\n\n<strong>Introduction</strong>\n\nIn this section of the tutorial we will be returning back to basics, building a simple watchapp that will use button presses (or clicks) and vibrations to enable the user to give input and receive output.\n\nTo get started, make a new CloudPebble project and add the C file from section 1, which consists of just the basic app life-cycle functions and a <code>TextLayer</code>. Since it is so brief, here it is again in full (with a couple of refinements for clarity):\n\n[code language=\"cpp\"]\n#include &lt;pebble.h&gt;\n\nWindow* window;\nTextLayer *text_layer;\n\n/* Load all Window sub-elements */\nvoid window_load(Window *window)\n{\n\ttext_layer = text_layer_create(GRect(0, 0, 144, 168));\n\ttext_layer_set_background_color(text_layer, GColorClear);\n\ttext_layer_set_text_color(text_layer, GColorBlack);\n\n\tlayer_add_child(window_get_root_layer(window), (Layer*) text_layer);\n\ttext_layer_set_text(text_layer, &quot;My first watchapp!&quot;);\n}\n\n/* Un-load all Window sub-elements */\nvoid window_unload(Window *window)\n{\n\ttext_layer_destroy(text_layer);\n}\n\n/* Initialize the main app elements */\nvoid init()\n{\n\twindow = window_create();\n\tWindowHandlers handlers = {\n\t\t.load = window_load,\n\t\t.unload = window_unload\n\t};\n\twindow_set_window_handlers(window, (WindowHandlers) handlers);\n\twindow_stack_push(window, true);\n}\n\n/* De-initialize the main app elements */\nvoid deinit()\n{\n\twindow_destroy(window);\n}\n\n/* Main app lifecycle */\nint main(void)\n{\n\tinit();\n\tapp_event_loop();\n\tdeinit();\n}\n[/code]\n\nNow you're back up to speed, it's time to add the first new element: button clicks. The way this works in the Pebble SDK is that you provide the system with callbacks for what you want to happen when the button is pressed, just like with a <code>TickTimerService</code> implementation. These callbacks have the following signatures:\n\n[code language=\"cpp\"]\nvoid up_click_handler(ClickRecognizerRef recognizer, void *context)\n{\n\n}\n\nvoid down_click_handler(ClickRecognizerRef recognizer, void *context)\n{\n\n}\n\nvoid select_click_handler(ClickRecognizerRef recognizer, void *context)\n{\n\n}\n[/code]\n\nThese will be needed in <code>init()</code> so make sure to place them above that function in the source file. To keep areas of code separate, place them above the <code>window_load()</code> and counterpart function to keep all <code>Window</code> related functions in one place in the file.\n\nWe will leave these blank for now as we continue to put all the pieces in place required for button click functionality. The next step is to register these with the system so it knows what to do when the button clicks occur. This is done in another function called a <code>ClickConfigProvider</code>, which (you guessed it) provides the click configuration. It looks like this, when filled with the requisite function calls necessary to register the individual button press callbacks from earlier. Each call links a button to its callback. Hopefully you can read it easily:\n\n[code language=\"cpp\"]\nvoid click_config_provider(void *context)\n{\n\twindow_single_click_subscribe(BUTTON_ID_UP, up_click_handler);\n\twindow_single_click_subscribe(BUTTON_ID_DOWN, down_click_handler);\n\twindow_single_click_subscribe(BUTTON_ID_SELECT, select_click_handler);\n}\n[/code]\n\nAfter creating the button callbacks and providing a mechanism for telling the system what each individual button will do when pressed, the final step is to provide the system with the <code>click_config_provider()</code> function to enable it to call it and set up the button click behaviors. The back button cannot be controlled by the developer as it is used to back out a watchapp to the system menu! This final step is achieved in <code>init()</code> after the <code>Window</code> is created (but before it is pushed!) like so:\n\n[code language=\"cpp\"]\nwindow_set_click_config_provider(window, click_config_provider);\nwindow_stack_push(window, true);\n[/code]\n\nNow we have our button clicks registered, let's make them do something! Perhaps the simplest and easiest demonstration is to have the buttons change the text being shown by the <code>TextLayer</code>. First, change the prompt shown to the user in <code>window_load()</code> from \"My first watchapp!\" to something a bit more relevant, such as \"Press a button!\". Now, in each button click handler callback function, add another <code>text_layer_set_text()</code> function call to set the text shown to that particular button. Here is just one example (do the other two yourself in a similar fashion!):\n\n[code language=\"cpp\"]\nvoid up_click_handler(ClickRecognizerRef recognizer, void *context)\n{\n\ttext_layer_set_text(text_layer, &quot;You pressed UP!&quot;);\n}\n[/code]\n\nAfter adding some actions to the three callbacks, compile the watchapp (make sure it is actually a watchapp as dictated by 'App kind' in the Settings screen) and test it. It should look like this:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/01/pressed.png\"><img class=\"aligncenter size-full wp-image-1528\" alt=\"pressed\" src=\"http://ninedof.files.wordpress.com/2014/01/pressed.png\" width=\"309\" height=\"334\" /></a>\n\nSo, there you have button clicks. To change the behavior, just change what happens in the callback functions. The rest can stay the same.\n\n<strong>Vibrations</strong>\nWith buttons providing a means of user input to your app, the next main means of output, besides what is being displayed on the screen, is to use the built-in vibration motor to notify users to events. For example, in my <a title=\"PTubeStatus: TFL Status on Your Wrist\" href=\"http://ninedof.wordpress.com/2013/11/24/ptubestatus-tfl-status-on-your-wrist/\">Pebble Tube Status</a> app (another shameless plug!) the watch vibrates once the updates data has been sent to the watch, so in the case of a slow data connection, the user can ignore the watch until the information is ready for viewing.\n\nTo use this functionality is much simpler than anything else we've covered so far. You can make the watch vibrate simply with one single line:\n\n[code language=\"cpp\"]\nvibes_short_pulse();\n\n/* or */\n\nvibes_long_pulse();\n\n/* or */\n\nvibes_double_pulse();\n[/code]\n\nTo initiate a more complex vibration sequence, use a different form as shown below (I placed this in <code>up_click_handler()</code>, for example):\n\n[code language=\"cpp\"]\n//Create an array of ON-OFF-ON etc durations in milliseconds\nuint32_t segments[] = {100, 200, 500};\n\n//Create a VibePattern structure with the segments and length of the pattern as fields\nVibePattern pattern = {\n\t.durations = segments,\n\t.num_segments = ARRAY_LENGTH(segments),\n};\n\n//Trigger the custom pattern to be executed\nvibes_enqueue_custom_pattern(pattern);\n[/code]\n\n<strong>Conclusion</strong>\nThat's pretty much all there is to button clicks and vibrations, which wraps up this part of the tutorial.\n\nYou can find a link to the full source code resulting from what we've covered here <a title=\"Source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-5\">on GitHub</a>.\n\nNext up: an introduction to working with PebbleJS and AppMessage. Basic knowledge of JavaScript required!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1545",
    "title": "Pebble SDK 2.0 Tutorial Source Code Update",
    "link": "https://ninedof.wordpress.com/2014/01/12/pebble-sdk-2-0-tutorial-source-code-update/",
    "pubDate": "Sun, 12 Jan 2014 01:43:13 +0000",
    "postDate": "2014-01-12 01:43:13",
    "body": "<p>After the Dropbox outage (which appears to still be affecting me) the tutorial source code is now on <a href=\"http://github.com/C-D-Lewis\">GitHub</a>.</p><p>Just so you know.</p>",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1567",
    "title": "Big Watch Trigger 3.1.0 and Watch Trigger + 2.1.0 Released!",
    "link": "https://ninedof.wordpress.com/2014/01/24/big-watch-trigger-3-1-0-and-watch-trigger-2-1-0-released/",
    "pubDate": "Fri, 24 Jan 2014 02:22:53 +0000",
    "postDate": "2014-01-24 02:22:53",
    "body": "It's been a long time since the last release that had any major changes, but after much work the re-write is now complete, and released to Google Play!\n\nThe main change is the new UI, which has a much better flow and use of Android APIs, such as ActionBar Tabs. Here's the spot-the-difference...\n\n<a href=\"http://ninedof.files.wordpress.com/2014/01/wt-compare.png\"><img class=\"aligncenter size-large wp-image-1568\" alt=\"wt compare\" src=\"http://ninedof.files.wordpress.com/2014/01/wt-compare.png?w=545\" width=\"545\" height=\"482\" /></a>\n\nThat old design had been the same almost since it was first published to the store!\n\nThe watchapp for the Pebble has also changed for SDK 2.0 users, but this was already released a couple of versions ago. It looks like this:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/01/watchapp.png\"><img class=\"aligncenter size-large wp-image-1569\" alt=\"watchapp\" src=\"http://ninedof.files.wordpress.com/2014/01/watchapp.png?w=545\" width=\"545\" height=\"389\" /></a>\n\nThe other main changes are thus:\n<ul>\n\t<li>Overhauled Android app UI for better navigation.</li>\n\t<li>Added portrait photo shooting orientation.</li>\n\t<li>Added vibration during countdown option.</li>\n\t<li>Added FAQs in Settings.</li>\n\t<li>An inaccessible path is now automatically reset.</li>\n\t<li>Fixed setting flash preference from watch bug.</li>\n</ul>\nHopefully the update will be worth the time, and bug free! ALthough it has been known for me to release apps with bugs that only appear on different device configurations than my own, or through unusual use cases. Fingers crossed!\n\nGet the apps here:\n<h2><strong>Watch Trigger  </strong><strong>             </strong></h2>\n<h2><a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchtrigger\"> <img class=\"alignleft\" alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" /></a></h2>\n<h2></h2>\n<h2><strong>Watch Trigger +</strong></h2>\n<p style=\"text-align:left;\"><a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchtriggerplus\"><img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" /> </a></p>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1583",
    "title": "New Watchface: CMD Time Typed",
    "link": "https://ninedof.wordpress.com/2014/01/29/new-watchface-cmd-time-typed/",
    "pubDate": "Wed, 29 Jan 2014 14:47:23 +0000",
    "postDate": "2014-01-29 14:47:23",
    "body": "After being inspired by a post on Reddit, I made a watch face that imitates the '<code>time /t</code>' and '<code>date /t</code>' commands in the Windows Command Prompt. This was the result:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/01/mockup.gif\"><img class=\"aligncenter size-full wp-image-1584\" alt=\"mockup\" src=\"http://ninedof.files.wordpress.com/2014/01/mockup.gif\" width=\"144\" height=\"168\" /></a>Since then, I had a brilliant idea to improve it using <code>AppTimer</code>s and show it as a user would type it, every minute.\n\nThe result is CMD Time Typed, and looks like this:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/01/mockup1.gif\"><img class=\"aligncenter size-full wp-image-1585\" alt=\"mockup\" src=\"http://ninedof.files.wordpress.com/2014/01/mockup1.gif\" width=\"144\" height=\"168\" /></a>That's a lot better. The source is available on <a title=\"Source\" href=\"https://github.com/C-D-Lewis/cmd-time-typed\">GitHub</a>, and the package is available from <a title=\"Install here\" href=\"http://www.mypebblefaces.com/apps/3905/10185/\">MyPebbleFaces</a>. Enjoy!\n\n&nbsp;",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1594",
    "title": "Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS",
    "link": "https://ninedof.wordpress.com/2014/02/02/pebble-sdk-2-0-tutorial-6-appmessage-for-pebblekit-js/",
    "pubDate": "Sun, 02 Feb 2014 18:54:40 +0000",
    "postDate": "2014-02-02 18:54:40",
    "body": "<strong>Required Reading</strong>\n\n<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #2: Telling the Time.\" href=\"http://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/\">Pebble SDK 2.0 Tutorial #2: Telling the Time</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #3: Images and Fonts\" href=\"http://ninedof.wordpress.com/2013/12/22/pebble-sdk-2-0-tutorial-3-images-and-fonts/\">Pebble SDK 2.0 Tutorial #3: Images and Fonts</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #4: Animations and Timers\" href=\"http://ninedof.wordpress.com/2013/12/29/pebble-sdk-2-0-tutorial-4-animations-and-timers/\">Pebble SDK 2.0 Tutorial #4: Animations and Timers</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations\" href=\"http://ninedof.wordpress.com/2014/01/11/pebble-sdk-2-0-tutorial-5-buttons-and-vibrations/\">Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations</a>\n\n<em><strong>A basic working knowledge of JavaScript is recommended, but it shouldn't be too hard to understand the language syntax as a beginner from the sample code provided at the end, especially coming from any Java or C related background (such as us!).</strong></em>\n\n<strong>Introduction</strong>\n\nCreating a simple Pebble watch app or watch face is well and fine, but adding an Internet connection to that app to fetch data/communicate with other services adds almost limitless potential. An example of this is my <a title=\"PTubeStatus: TFL Status on Your Wrist\" href=\"http://ninedof.wordpress.com/2013/11/24/ptubestatus-tfl-status-on-your-wrist/\">Pebble Tube Status</a> app that fetches information on the status of the London Underground network for line info at a glance. For this tutorial section we will be getting our data from another source: The <a title=\"Openweathermap\" href=\"http://openweathermap.org/API\">Openweathermap.org</a> APIs, a free to use and simple example of data a watch face can display from the web.\n\nNow, this is a long one, so make sure you have a good cup of tea or some other soothing beverage near you before you embark!\n\n<strong>Basic Watch Face Setup</strong>\n\nThe first step this time is to create a new CloudPebble project and make sure it is set up in 'Settings' as a watchface, not a watch app. Next, copy in the C code below to start a bare-bones app:\n\n[code language=\"cpp\"]\n#include &lt;pebble.h&gt;\n\nWindow* window;\n\nvoid window_load(Window *window)\n{\n\n}\n\nvoid window_unload(Window *window)\n{\n\n}\n\nvoid init()\n{\n  window = window_create();\n  WindowHandlers handlers = {\n    .load = window_load,\n    .unload = window_unload\n  };\n  window_set_window_handlers(window, handlers);\n\n  window_stack_push(window, true);\n}\n\nvoid deinit()\n{\n  window_destroy(window);\n}\n\nint main(void)\n{\n  init();\n  app_event_loop();\n  deinit();\n}\n[/code]\n\nThis is the 'blank canvas' on which we will build this weather info app. The next steps are to prepare the watch app to display the data we get from the weather feed. Let's do this with four <code>TextLayer</code>s. These will be for the 'Openweathermap.org' title/attribution, the location, the temperature and the time the data was fetched. As you can see from the API page linked previously, there are a lot more fields of data to display, but these will keep the tutorial simple and concise. So, here are our four global <code>TextLayer</code> declarations:\n\n[code language=\"cpp\"]\nTextLayer *title_layer, *location_layer, *temperature_layer, *time_layer;\n[/code]\n\nThis time around we will take a measure to avoid the lengthy process of initialising these <code>TextLayer</code>s by using a custom utility function to save space. As I was taught in my first year of University, functions are best used to reduce repetitive code, so this is an ideal use case. Below is a function that will set up a <code>TextLayer</code> to specification provided in the arguments. Place it above <code>window_load()</code> in the very least, as that is where it will be used:\n\n[code language=\"cpp\"]\nstatic TextLayer* init_text_layer(GRect location, GColor colour, GColor background, const char *res_id, GTextAlignment alignment)\n{\n  TextLayer *layer = text_layer_create(location);\n  text_layer_set_text_color(layer, colour);\n  text_layer_set_background_color(layer, background);\n  text_layer_set_font(layer, fonts_get_system_font(res_id));\n  text_layer_set_text_alignment(layer, alignment);\n\n  return layer;\n}\n[/code]\n\nThus we can set up the title <code>TextLayer</code> like so in an abbreviated fashion:\n\n[code language=\"cpp\"]\nvoid window_load(Window *window)\n{\n  title_layer = init_text_layer(GRect(5, 0, 144, 30), GColorBlack, GColorClear, &quot;RESOURCE_ID_GOTHIC_18&quot;, GTextAlignmentLeft);\n  text_layer_set_text(title_layer, &quot;Openweathermap.org&quot;);\n  layer_add_child(window_get_root_layer(window), text_layer_get_layer(title_layer));\n}\n[/code]\n\nTake a moment to match the arguments given in the function call to its declaration and see that by using this function we can save an extra five lines per <code>TextLayer</code> initialisation! The rest of the other layers are set up in a similar fashion:\n\n[code language=\"cpp\"]\nlocation_layer = init_text_layer(GRect(5, 30, 144, 30), GColorBlack, GColorClear, &quot;RESOURCE_ID_GOTHIC_18&quot;, GTextAlignmentLeft);\ntext_layer_set_text(location_layer, &quot;Location: N/A&quot;);\nlayer_add_child(window_get_root_layer(window), text_layer_get_layer(location_layer));\n\ntemperature_layer = init_text_layer(GRect(5, 60, 144, 30), GColorBlack, GColorClear, &quot;RESOURCE_ID_GOTHIC_18&quot;, GTextAlignmentLeft);\ntext_layer_set_text(temperature_layer, &quot;Temperature: N/A&quot;);\nlayer_add_child(window_get_root_layer(window), text_layer_get_layer(temperature_layer));\n\ntime_layer = init_text_layer(GRect(5, 90, 144, 30), GColorBlack, GColorClear, &quot;RESOURCE_ID_GOTHIC_18&quot;, GTextAlignmentLeft);\ntext_layer_set_text(time_layer, &quot;Last updated: N/A&quot;);\nlayer_add_child(window_get_root_layer(window), text_layer_get_layer(time_layer));\n[/code]\n\nWe mustn't forget to destroy these in the appropriate place, as always!\n\n[code language=\"cpp\"]\nvoid window_unload(Window *window)\n{\n  text_layer_destroy(title_layer);\n  text_layer_destroy(location_layer);\n  text_layer_destroy(temperature_layer);\n  text_layer_destroy(time_layer);\n}\n[/code]\n\nThe watch app (once compiled) should look like this:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/02/pebble-screenshot_2014-02-02_13-16-291.png\"><img class=\"aligncenter size-full wp-image-1615\" src=\"http://ninedof.files.wordpress.com/2014/02/pebble-screenshot_2014-02-02_13-16-291.png\" alt=\"pebble-screenshot_2014-02-02_13-16-29\" width=\"148\" height=\"172\" /></a>\n\n<strong>Setting up <code>AppMessage</code></strong>\nBefore we fetch the data from the Internet, we will need to set up the watch app to receive <code>AppMessage</code> messages from the Pebble phone app. Remember that with PebbleKit JS, the JavaScript code runs on the phone, and the results are sent via <code>AppMessage</code> to the watch for display. A basic overview of how that messaging system works can be seen in the \"AppMessage system overview\" section in the <a title=\"Pebble Watch Face SDK Tutorial #6: 2 Way Communication with Android\" href=\"http://ninedof.wordpress.com/2013/07/11/pebble-watch-face-sdk-tutorial-6-2-way-communication-with-android/\">SDK 1.X Tutorial Section</a> on the subject, but the methodology has changed with SDK 2.0. With that in mind, let's add some basic <code>AppMessage</code> framework:\n\n<strong>Step 1:</strong> Declaring keys. Keys are 'labels' used to tell each side of the system what the data value means. For example, a key called 'temperature' could have it's associated value treated as a temperature value. The names of keys and how they are interpreted are entirely up to the programmer, as you will soon see. The list of keys we will use are shown in the declaration below:\n\n[code language=\"cpp\"]\nenum {\n  KEY_LOCATION = 0,\n  KEY_TEMPERATURE = 1,\n};\n[/code]\n\n<strong>Step 2:</strong> Create a callback for receiving data from the phone. There are other callbacks for failed events, but we won't worry about them here:\n\n[code language=\"cpp\"]\nstatic void in_received_handler(DictionaryIterator *iter, void *context)\n{\n\n}\n[/code]\n\n<strong>Step 3:</strong> Setting up <code>AppMessage</code> itself. This is done in <code>init()</code>, but before <code>window_stack_push()</code>:\n\n[code language=\"cpp\"]\n//Register AppMessage events\napp_message_register_inbox_received(in_received_handler);\napp_message_open(app_message_inbox_size_maximum(), app_message_outbox_size_maximum());    //Largest possible input and output buffer sizes\n[/code]\n\n<strong>Step 4:</strong> Set up how we will process the received <code>Tuple</code>s. After multiple <code>AppMessage</code> implementations, I've found the most reliable method is to read the first item, then repeat reading until no more are returned, using a <code>switch</code> based <code>process_tuple()</code> function to separate out the process. Here's how that is best done:\n\n[code language=\"cpp\"]\nstatic void in_received_handler(DictionaryIterator *iter, void *context) \n{\n\t(void) context;\n\t\n\t//Get data\n\tTuple *t = dict_read_first(iter);\n\twhile(t != NULL)\n\t{\n\t\tprocess_tuple(t);\n\t\t\n\t\t//Get next\n\t\tt = dict_read_next(iter);\n\t}\n}\n[/code]\n\nNext, declare some character buffers to store the last displayed data. The function <code>text_layer_set_text()</code> requires that the storage for the string it displays (when not a literal) is long-lived, so let's declare it globally:\n\n[code language=\"cpp\"]\nchar location_buffer[64], temperature_buffer[32], time_buffer[32];\n[/code]\n\nThus, we must define what <code>process_tuple()</code> will do. This is the important part, as here is where the incoming <code>Tuple</code>s will be dissected and acted upon. The key and value of each <code>Tuple</code> is read and the key used in a <code>switch</code> statement to decide what to do with the accompanying data:\n\n[code language=\"cpp\"]\nvoid process_tuple(Tuple *t)\n{\n  //Get key\n  int key = t-&gt;key;\n\n  //Get integer value, if present\n  int value = t-&gt;value-&gt;int32;\n\n  //Get string value, if present\n  char string_value[32];\n  strcpy(string_value, t-&gt;value-&gt;cstring);\n\n  //Decide what to do\n  switch(key) {\n    case KEY_LOCATION:\n      //Location received\n      snprintf(location_buffer, sizeof(&quot;Location: couldbereallylongname&quot;), &quot;Location: %s&quot;, string_value);\n      text_layer_set_text(location_layer, (char*) &amp;location_buffer);\n      break;\n    case KEY_TEMPERATURE:\n      //Temperature received\n      snprintf(temperature_buffer, sizeof(&quot;Temperature: XX \\u00B0C&quot;), &quot;Temperature: %d \\u00B0C&quot;, value);\n      text_layer_set_text(temperature_layer, (char*) &amp;temperature_buffer);\n      break;\n  }\n\n  //Set time this update came in\n  time_t temp = time(NULL);\n  struct tm *tm = localtime(&amp;temp);\n  strftime(time_buffer, sizeof(&quot;Last updated: XX:XX&quot;), &quot;Last updated: %H:%M&quot;, tm);\n  text_layer_set_text(time_layer, (char*) &amp;time_buffer);\n}\n[/code]\n\nThat concludes the Pebble side of the system for now.\n\n<strong>PebbleKit JS Setup</strong>\nThe Pebble phone app runs JavaScript code that actually fetches the data using the phone's data connection, and then sends the results as <code>AppMessage</code> dictionaries to the watch for interpretation and display (as already mentioned). To start, on the left side of the CloudPebble screen, choose 'JS', and begin the file with this code segment to listen for when the Pebble app is opened:\n\n[code language=\"js\"]\nPebble.addEventListener(&quot;ready&quot;,\n  function(e) {\n    //App is ready to receive JS messages\n  }\n);\n[/code]\n\nThe next step is to declare the <strong>same</strong> set of keys to the JavaScript side as to the C side. To do this, go to Settings, and scroll down to 'PebbleKit JS Message Keys', and enter the same keys as defined in the C code , like so:\n\n<code>\nKEY_LOCATION 0\nKEY_TEMPERATURE 1\n</code>\n\nThen hit 'Save changes'.\n\nWe've already initialised the JavaScript file to respond when the watch app is opened, with the 'ready' event. Now we will modify it to request the weather information and parse the result. The code below will do that, and follows a process similar to that laid out in the <a title=\"Pebble example\" href=\"https://github.com/pebble/pebble-sdk-examples/blob/master/pebblekit-js/weather/src/js/pebble-js-app.js\">Pebble weather app example</a>. First, create a method that will connect to an URL and return the response with a <code>XMLHttpRequest</code> object. Here is an example method:\n\n[code language=\"js\"]\nfunction HTTPGET(url) {\n\tvar req = new XMLHttpRequest();\n\treq.open(&quot;GET&quot;, url, false);\n\treq.send(null);\n\treturn req.responseText;\n}\n[/code]\n\nNext, invoke this method with the correct URL for the location you want from the Openweathermap.org API. Once this is done, we will obtain the response as plain text. It will need to be parsed as a JSON object so we can read the individual data items. After this, we construct a dictionary of the information we're interested in using our pre-defined keys and send this to the watch. This whole process is shown below in a method called <code>getWeather()</code>, called in the 'ready' event callback:\n\n[code language=\"js\"]\nvar getWeather = function() {\n\t//Get weather info\n\tvar response = HTTPGET(&quot;http://api.openweathermap.org/data/2.5/weather?q=London,uk&quot;);\n\n\t//Convert to JSON\n\tvar json = JSON.parse(response);\n\n\t//Extract the data\n\tvar temperature = Math.round(json.main.temp - 273.15);\n\tvar location = json.name;\n\n\t//Console output to check all is working.\n\tconsole.log(&quot;It is &quot; + temperature + &quot; degrees in &quot; + location + &quot; today!&quot;);\n\n\t//Construct a key-value dictionary\n\tvar dict = {&quot;KEY_LOCATION&quot; : location, &quot;KEY_TEMPERATURE&quot;: temperature};\n\n\t//Send data to watch for display\n\tPebble.sendAppMessage(dict);\n};\n\nPebble.addEventListener(&quot;ready&quot;,\n  function(e) {\n    //App is ready to receive JS messages\n\tgetWeather();\n  }\n);\n[/code]\n\nAfter completing all this, the project is almost complete. After compiling and installing, you should get something similar to this:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/02/pebble-screenshot_2014-02-02_18-05-17.png\"><img class=\"aligncenter size-full wp-image-1622\" src=\"http://ninedof.files.wordpress.com/2014/02/pebble-screenshot_2014-02-02_18-05-17.png\" alt=\"pebble-screenshot_2014-02-02_18-05-17\" width=\"148\" height=\"172\" /></a>\n\n<strong>Final Steps</strong>\n\nSo we have our web-enabled watch app working as it should. If this were a watch face, we'd want it to update itself every so often for as long as it is open. Seeing as this is a demo app, this isn't too critical, but let's do it anyway as a learning experience. It only requires a few more lines of C and JS.\n\nReturn to your C file and subscribe to the tick timer service for minutely updates in <code>init()</code>, like so:\n\n[code language=\"cpp\"]\n//Register to receive minutely updates\ntick_timer_service_subscribe(MINUTE_UNIT, tick_callback);\n[/code]\n\nAdd the corresponding de-init procedure:\n\n[code language=\"cpp\"]\ntick_timer_service_unsubscribe();\n[/code]\n\nAnd finally the add callback named in the 'subscribe' call (as always, above where it is registered!):\n\n[code language=\"cpp\"]\nvoid tick_callback(struct tm *tick_time, TimeUnits units_changed)\n{\n\n}\n[/code]\n\nWe're going to use this tick handler to request new updates on the weather from the phone. The next step is to create a function to use <code>AppMessage</code> to send something back to the phone. Below is just such a function, accepting a key and a value (be sure to add this function above the tick callback!):\n\n[code language=\"cpp\"]\nvoid send_int(uint8_t key, uint8_t cmd)\n{\n\tDictionaryIterator *iter;\n \tapp_message_outbox_begin(&amp;iter);\n\n \tTuplet value = TupletInteger(key, cmd);\n \tdict_write_tuplet(iter, &amp;value);\n\n \tapp_message_outbox_send();\n}\n[/code]\n\nEvery five minutes (it can be any interval) we will request new information. Seeing as this is the only time the watch app will ever communicate back this way, it doesn't matter which key or value we use. It is merely a 'hey!' sort of message. If you wanted to distinguish between the messages sent back to the phone, you'd use the exact same method of defining keys as we did for location and temperature values. So, we change the tick handler to look a little more like this:\n\n[code language=\"cpp\"]\nvoid tick_callback(struct tm *tick_time, TimeUnits units_changed)\n{\n\t//Every five minutes\n\tif(tick_time-&gt;tm_min % 5 == 0)\n\t{\n\t\t//Send an arbitrary message, the response will be handled by in_received_handler()\n\t\tsend_int(5, 5);\n\t}\n}\n[/code]\n\nThe final piece of the puzzle is to set up the JavaScript file to respond in turn to these requests from the watch. We do that by registering to receive the 'appmessage' events, like so:\n\n[code language=\"js\"]\nPebble.addEventListener(&quot;appmessage&quot;,\n  function(e) {\n    //Watch wants new data!\n\tgetWeather();\n  }\n);\n[/code]\n\nAnd there we have it! Every five minutes the watch will ask for updated data, and receive this new information after the phone querys openweathermap.org.\n\n<strong>Conclusions</strong>\nThat was a rather long journey, but it's an important one for stretching the usefulness of your Pebble beyond telling the time and date! It also introduces a lot of new concepts at once, which may confuse some. If you have a query, post it here and I'll do my best to answer it!\n\nThe full project source code that results from this Tutorial section can be found <a title=\"SDK 2.0 Tutorial #6 Source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-6\">on GitHub here</a>.\n\nThanks for reading, and keep an eye out for more soon!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1654",
    "title": "New Pebble watchapp incoming...",
    "link": "https://ninedof.wordpress.com/2014/02/14/new-pebble-watchapp-incoming/",
    "pubDate": "Fri, 14 Feb 2014 02:21:41 +0000",
    "postDate": "2014-02-14 02:21:41",
    "body": "I'm very excited about this! More soon once it's refined and shored up!\n\n<a href=\"http://ninedof.files.wordpress.com/2014/02/pebble-screenshot_2014-02-14_02-19-041.png\"><img class=\"aligncenter size-full wp-image-1658\" alt=\"pebble-screenshot_2014-02-14_02-19-04\" src=\"http://ninedof.files.wordpress.com/2014/02/pebble-screenshot_2014-02-14_02-19-041.png\" width=\"148\" height=\"172\" /></a><a href=\"http://ninedof.files.wordpress.com/2014/02/pebble-screenshot_2014-02-14_02-18-071.png\"><img class=\"aligncenter size-full wp-image-1659\" alt=\"pebble-screenshot_2014-02-14_02-18-07\" src=\"http://ninedof.files.wordpress.com/2014/02/pebble-screenshot_2014-02-14_02-18-071.png\" width=\"148\" height=\"172\" /></a>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1663",
    "title": "Wristponder for Pebble: Send Custom SMS Messages from your wrist!",
    "link": "https://ninedof.wordpress.com/2014/02/14/wristponder-for-pebble-send-custom-sms-messages-from-your-wrist/",
    "pubDate": "Fri, 14 Feb 2014 17:12:35 +0000",
    "postDate": "2014-02-14 17:12:35",
    "body": "<h2><strong>Introduction</strong></h2>\nAfter a couple of weeks' on and off work I proudly present a new watchapp for Pebble: Wristponder!\n\nTogether with the Android companion app, this watchapp allows you to add, edit, delete, import and export custom SMS messages and send them from the watch.\n<p style=\"text-align:center;\"><a href=\"http://ninedof.files.wordpress.com/2014/02/pb-screen.png\"><img class=\"aligncenter  wp-image-1664\" alt=\"pb screen\" src=\"http://ninedof.files.wordpress.com/2014/02/pb-screen.png\" width=\"384\" height=\"400\" /></a></p>\n\n<h2 style=\"text-align:left;\">How it works</h2>\nIn the Android app, the responses are specified by the user and stored in a database, which is then read when the watchapp is launched and a request is made.\n\nEach response is sent to the watch where it is then shown in a <code>MenuLayer</code> underneath the name of the last contact to send the user an SMS. Once the user selects a response it is sent to that contact via the phone.\n\nDue to <code>AppMessage</code> size limitations, each <code>PebbleDictionary</code> sent contains only two responses. If any of them fail to be delievered, the watchapp spots this and requests them again from the phone. This event is shown by 'Latecomers...' on the watch. This even happens less if the <code>AppMessage</code> delay is increased, but you can try smaller values if you like to live dangerously. This was a source of much frustration in development, but the final solution seems to be remarkably robust.\n<p style=\"text-align:center;\"><a href=\"http://ninedof.files.wordpress.com/2014/02/screenshot_2014-02-14-14-50-49.png\"><img class=\"aligncenter  wp-image-1665\" alt=\"Screenshot_2014-02-14-14-50-49\" src=\"http://ninedof.files.wordpress.com/2014/02/screenshot_2014-02-14-14-50-49.png?w=545\" width=\"262\" height=\"464\" /></a></p>\n\n<h2 style=\"text-align:left;\">Download</h2>\nYou can get Wristponder with it's companion app in one place from the Google Play store. If you find any bugs or have feature ideas, let me know!\n\n<a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.wristponder\"> <img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" />\n</a>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1681",
    "title": "Alert lib for Pebble: Very Small Library for a Simple Alert",
    "link": "https://ninedof.wordpress.com/2014/02/20/alert-lib-for-pebble-very-small-library-for-a-simple-alert/",
    "pubDate": "Thu, 20 Feb 2014 17:52:44 +0000",
    "postDate": "2014-02-20 17:52:44",
    "body": "In making improvements to <a title=\"Wristponder for Pebble: Send Custom SMS Messages from your wrist!\" href=\"http://ninedof.wordpress.com/2014/02/14/wristponder-for-pebble-send-custom-sms-messages-from-your-wrist/\">Wristponder</a>, I developed a mechanism that I've gone on to make into a small library that I'll doubtless reuse again in the future, as can you!\n\n<a href=\"http://ninedof.files.wordpress.com/2014/02/example_screenshot.png\"><img class=\"aligncenter size-full wp-image-1682\" alt=\"example_screenshot\" src=\"http://ninedof.files.wordpress.com/2014/02/example_screenshot.png\" width=\"150\" height=\"174\" /></a>To use, simply copy the files into your /src folder, <code>#include \"alert.h\"</code> and call <code>alert_show(...)</code>. You can also update an existing alert and cancel at any time.\n\nThe full details as well as an example project are on the <a title=\"Source code!\" href=\"https://github.com/C-D-Lewis/pebble-alert-lib\">GitHub page here</a>. Enjoy!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1692",
    "title": "Subway Subcard on Pebble",
    "link": "https://ninedof.wordpress.com/2014/02/24/subway-subcard-on-pebble/",
    "pubDate": "Mon, 24 Feb 2014 15:09:29 +0000",
    "postDate": "2014-02-24 15:09:29",
    "body": "As an experiment, I downloaded the Subway Subcard Android app and extracted the QR code from a screenshot. The screenshot has been modified to prevent anyone claiming my Subcard points (of which I currently have very few, but it's the principle!)\n<p style=\"text-align:center;\"><a href=\"http://ninedof.files.wordpress.com/2014/02/subcardfull.png\"><img class=\"aligncenter  wp-image-1700\" alt=\"subcardfull\" src=\"http://ninedof.files.wordpress.com/2014/02/subcardfull.png?w=545\" width=\"382\" height=\"678\" /></a></p>\nI then created a simple Pebble app to show this code as a BitmapLayer for the store scanner to scan. It looks like this with the dummy QR code:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/02/pebble-screenshot_2014-02-27_11-22-28.png\"><img class=\"aligncenter size-full wp-image-1701\" alt=\"pebble-screenshot_2014-02-27_11-22-28\" src=\"http://ninedof.files.wordpress.com/2014/02/pebble-screenshot_2014-02-27_11-22-28.png\" width=\"148\" height=\"172\" /></a>\n\nAnd it worked! The points were added in the Android app but I didn't have to unlock my phone and open the Subcard app. So some time was saved, and I got a positive reaction from the cashier, which is always a bonus!\n\nIf you want to use this yourself, get the code from the <a title=\"Source\" href=\"https://github.com/C-D-Lewis/pebble-subcard\">GitHub repo</a> and replace qr.png with a 144x144 crop of your own Subcard QR code from the app or carefully from a photo of your physical card, then re-compile.",
    "tags": [
      "Integration",
      "Pebble"
    ]
  },
  {
    "id": "1706",
    "title": "Wristponder for Pebble 1.2.1 Released",
    "link": "https://ninedof.wordpress.com/2014/02/28/wristponder-for-pebble-1-2-0-released/",
    "pubDate": "Fri, 28 Feb 2014 16:25:46 +0000",
    "postDate": "2014-02-28 16:25:46",
    "body": "<strong>UPDATES: </strong>\n\n<strong>- 1.2.0 shipped with an incorrect icon (d'oh!) and is now 1.2.1.</strong>\n\n<strong>- 1.2.2 Adds link to install from Pebble Appstore to combat Android Beta 10 sideloading bug. </strong>\n\nToday sees the addition of a number of new features to improve and expand the Wristponder experience:\n<ol>\n\t<li>Added option to send to last Caller as well as last SMS.</li>\n\t<li>Added auto-close option in Settings.</li>\n\t<li>Added visual indicator of list usage.</li>\n\t<li>Added a guard to size when editing.</li>\n\t<li>Fixed a crash when a response was too long.</li>\n</ol>\nHere are some screenshots:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/02/wp-screens-quad1.png\"><img class=\"aligncenter size-full wp-image-1710\" alt=\"wp screens quad\" src=\"http://ninedof.files.wordpress.com/2014/02/wp-screens-quad1.png\" width=\"400\" height=\"400\" /></a>\n\nA few points regarding other requested features:\n<ol>\n\t<li>Facebook Messenger, WhatsApp and Google Voice do not at the moment have APIs that allow background composition and sending of messages without user interaction. If I am incorrect, please let me know!</li>\n\t<li>Persistent storage of responses for faster launch on the watch is on the horizon, but it needs a few kinks ironed out first.</li>\n\t<li>Implementing a 'top 5 received SMS contacts' feature<del> is only possible for Android phones with API level 18 (Android 4.3) or greater, so not worth implementation just yet. Still a desirable feature though.</del> Appears to be doable! More soon.</li>\n</ol>\n<h2 style=\"text-align:left;\">Download</h2>\nYou can get Wristponder with it's companion app in one place from the Google Play store. If you find any bugs or have feature ideas, let me know!\n\n<a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.wristponder\"> <img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" />\n</a>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1730",
    "title": "Data Toggle v1.1.0",
    "link": "https://ninedof.wordpress.com/2014/03/04/data-toggle-v1-1-0/",
    "pubDate": "Tue, 04 Mar 2014 13:37:05 +0000",
    "postDate": "2014-03-04 13:37:05",
    "body": "The Data Toggle for Pebble Android app has been updated and is now version 1.1.0. The changes are as below:\n<ul>\n\t<li>Added an option to install from Pebble Appstore.</li>\n\t<li>Added rating link to Google Play store page.</li>\n</ul>\n<p style=\"text-align:center;\"><a href=\"http://ninedof.files.wordpress.com/2014/03/photo1.jpg\"><img class=\"aligncenter  wp-image-1732\" alt=\"photo1\" src=\"http://ninedof.files.wordpress.com/2014/03/photo1.jpg?w=545\" width=\"436\" height=\"494\" /></a></p>\nThe main motivation behind this small update is to enable Pebble SDK 2.0 Beta 10 users work around the existing sideloading bug where my current install method of a .pbw from the bundled assets folder stops working. I'm not too concerned now the Pebble Appstore link is in place, and they have assured me a fix is in the works:\n<blockquote class=\"twitter-tweet\" lang=\"en\"><a href=\"https://twitter.com/Chris_DL\">@Chris_DL</a> Totally! Addressing that one is a work in progress.\n\n— Pebble Developers (@PebbleDev) <a href=\"https://twitter.com/PebbleDev/statuses/440136075370303488\">March 2, 2014</a></blockquote>\nIf you are not already a user, here's a download link (it's free!)\n\n<a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.datatoggle\">\n<img alt=\"Get it on Google Play\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" />\n</a>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1753",
    "title": "Beam Up v2.1.0: Infamous 'stuck' Bug Most Likely Fixed",
    "link": "https://ninedof.wordpress.com/2014/03/11/beam-up-v2-1-0-infamous-stuck-bug-most-likely-fixed/",
    "pubDate": "Tue, 11 Mar 2014 14:01:20 +0000",
    "postDate": "2014-03-11 14:01:20",
    "body": "<strong>UPDATE: </strong>\n\n<strong>- v2.1.1 includes a much better fix for the animation bug. Sorry for the rapid-fire updates.</strong>\n\n<strong>- Looks like I introduced another problem. Rolling back on the Pebble Appstore until I do my job properly.</strong>\n\nSince the launch of the Pebble AppStore I have been receiving daily emails about the 'stuck' bug, which looks like this:\n\n<a href=\"http://ninedof.files.wordpress.com/2013/12/img_20131226_185234.jpg\"><img class=\"aligncenter size-large wp-image-1469\" alt=\"IMG_20131226_185234\" src=\"http://ninedof.files.wordpress.com/2013/12/img_20131226_185234.jpg?w=545\" width=\"545\" height=\"403\" /></a>Not too pretty, eh? It seems to happen completely at random, and I have made attempts to fix this before. It seems to have been introduced by the 2.0 Animation system. I deduce it cannot be a programmatic bug, because all animations are treated the <a title=\"Animation Function\" href=\"https://github.com/C-D-Lewis/beam-up/blob/master/src/cl_util.c#L67\">same way</a>.\n\nSo my fix takes the form of manually <code>_set_frame()</code>ing all the layout items at time = 2 seconds past the minute tick. This is not ideal, but given the animation complexity is the best current option.\n\nAnother added feature is the fact that the bottom bar now animates to the correct position when the face is opened.\n\nIf successful, I'll implement these changes to the other Beam Up variants soon.",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1762",
    "title": "Pebble SDK 2.0 Tutorial #7: MenuLayers",
    "link": "https://ninedof.wordpress.com/2014/03/13/pebble-sdk-2-0-tutorial-7-menulayers/",
    "pubDate": "Thu, 13 Mar 2014 01:46:27 +0000",
    "postDate": "2014-03-13 01:46:27",
    "body": "<strong>Required Reading</strong>\n\n<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #2: Telling the Time.\" href=\"http://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/\">Pebble SDK 2.0 Tutorial #2: Telling the Time</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #3: Images and Fonts\" href=\"http://ninedof.wordpress.com/2013/12/22/pebble-sdk-2-0-tutorial-3-images-and-fonts/\">Pebble SDK 2.0 Tutorial #3: Images and Fonts</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #4: Animations and Timers\" href=\"http://ninedof.wordpress.com/2013/12/29/pebble-sdk-2-0-tutorial-4-animations-and-timers/\">Pebble SDK 2.0 Tutorial #4: Animations and Timers</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations\" href=\"http://ninedof.wordpress.com/2014/01/11/pebble-sdk-2-0-tutorial-5-buttons-and-vibrations/\">Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS\" href=\"http://ninedof.wordpress.com/2014/02/02/pebble-sdk-2-0-tutorial-6-appmessage-for-pebblekit-js/\">Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS</a>\n\n<strong>Introduction</strong>\n\nAfter a few requests, in this section we will look at using <code>MenuLayer</code>s in a Pebble watchapp. If you pick up your Pebble now and press the select button from the watch face, what you see is a <code>MenuLayer</code>. It has rows, icons and actions. Let's build one of those!\n\n<a href=\"http://ninedof.files.wordpress.com/2014/03/pebble-screenshot_2014-03-13_00-22-47.png\"><img class=\"aligncenter size-full wp-image-1763\" alt=\"pebble-screenshot_2014-03-13_00-22-47\" src=\"http://ninedof.files.wordpress.com/2014/03/pebble-screenshot_2014-03-13_00-22-47.png\" width=\"148\" height=\"172\" /></a>\n\n<strong>Setup</strong>\n\nThe first step as usual is to start a new CloudPebble project with the basic app template. Here's that again, for convenience:\n\n[code language=\"cpp\"]\n#include &lt;pebble.h&gt;\n\nWindow* window;\n\nvoid window_load(Window *window)\n{\n\n}\n\nvoid window_unload(Window *window)\n{\n\n}\n\nvoid init()\n{\n\twindow = window_create();\n\tWindowHandlers handlers = {\n\t\t.load = window_load,\n\t\t.unload = window_unload\n\t};\n\twindow_set_window_handlers(window, (WindowHandlers) handlers);\n\twindow_stack_push(window, true);\n}\n\nvoid deinit()\n{\n\twindow_destroy(window);\n}\n\nint main(void)\n{\n\tinit();\n\tapp_event_loop();\n\tdeinit();\n}\n[/code]\n\nNow that's out the way, declare a global pointer to a <code>MenuLayer</code> at the top of the file below the pre-processor directives.\n\n[code language=\"cpp\"]\nMenuLayer *menu_layer;\n[/code]\n\nThis <code>Layer</code> type is a bit more complex to set up than the other <code>Layers</code>, in that it requires a large amount of information about how it will look and behave before it can be instantiated. This information is given to the <code>MenuLayer</code> via the use of a number of callbacks. When the <code>MenuLayer</code> is redrawn or reloaded, it calls these functions to get the relevant data. The advantage of this approach is that the <code>MenuLayer</code> rows can be filled with data that can be changed at any time, such as with <a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.wristponder\" title=\"Wristponder\">Wristponder</a> or <a title=\"PTS Source example\" href=\"https://github.com/C-D-Lewis/pebble-tube-status/blob/master/src/main.c#L120\">Pebble Tube Status</a> (shameless plugs!)\n\nThe <a title=\"MenuLayer callbacks\" href=\"https://developer.getpebble.com/2/api-reference/group___menu_layer.html#ga4dbe0980dc6d9fe2b49b778a067d6314\">API documentation</a> describes all the possible <code>MenuLayerCallbacks</code> that can be associated with a <code>MenuLayer</code>, but the ones we will be using for a simple example will be:\n<ul>\n\t<li><code>.draw_row</code> - This is used to draw the layout inside a menu item</li>\n\t<li><code>.get_num_rows</code> - This is used to feedback the total number of rows in the <code>MenuLayer</code>. This can be a <code>#define</code>d value, or an <code>int</code>, and so variable</li>\n\t<li><code>.select_click</code> - This is used to decide what happens when the select button is pressed, which will vary depending on which row is currently selected</li>\n</ul>\nLet's define these callbacks using the signatures provided by the API documentation linked previously. These must be above <code>window_load()</code> as is now the norm (hopefully!):\n\n[code language=\"cpp\"]\nvoid draw_row_callback(GContext *ctx, Layer *cell_layer, MenuIndex *cell_index, void *callback_context)\n{\n\n}\n\nuint16_t num_rows_callback(MenuLayer *menu_layer, uint16_t section_index, void *callback_context)\n{\n\n}\n\nvoid select_click_callback(MenuLayer *menu_layer, MenuIndex *cell_index, void *callback_context)\n{\n\n}\n[/code]\n\nNow those are in place, let's add code to have them do something we'd find more useful than blank callbacks. The example we are going to use is a list of fruits (boring, I know!). The list will be of seven fruits, and brief descriptions. Thus, the <code>num_rows_callback()</code> function becomes simply:\n\n[code language=\"cpp\"]\nuint16_t num_rows_callback(MenuLayer *menu_layer, uint16_t section_index, void *callback_context)\n{\n\treturn 7;\n}\n[/code]\n\nFor the <code>draw_row_handler()</code>, we will need to be able to alter what is drawn in the row depending on <em>which</em> row it is. This can be done by <code>switch</code>ing the <code>cell_index-&gt;row</code> property. You can use the presented <code>GContext</code> however you like for any of the SDK drawing functions, but to keep things simple we will use the pre-made drawing functions provided by the SDK. With these two last points combined, the <code>draw_row_callback()</code> function transforms into this beast:\n\n[code language=\"cpp\"]\nvoid draw_row_callback(GContext *ctx, Layer *cell_layer, MenuIndex *cell_index, void *callback_context)\n{\n\t//Which row is it?\n\tswitch(cell_index-&gt;row)\n\t{\n\tcase 0:\n\t\tmenu_cell_basic_draw(ctx, cell_layer, &quot;1. Apple&quot;, &quot;Green and crispy!&quot;, NULL);\n\t\tbreak;\n\tcase 1:\n\t\tmenu_cell_basic_draw(ctx, cell_layer, &quot;2. Orange&quot;, &quot;Peel first!&quot;, NULL);\n\t\tbreak;\n\tcase 2:\n\t\tmenu_cell_basic_draw(ctx, cell_layer, &quot;3. Pear&quot;, &quot;Teardrop shaped!&quot;, NULL);\n\t\tbreak;\n\tcase 3:\n\t\tmenu_cell_basic_draw(ctx, cell_layer, &quot;4. Banana&quot;, &quot;Can be a gun!&quot;, NULL);\n\t\tbreak;\n\tcase 4:\n\t\tmenu_cell_basic_draw(ctx, cell_layer, &quot;5. Tomato&quot;, &quot;Extremely versatile!&quot;, NULL);\n\t\tbreak;\n\tcase 5:\n\t\tmenu_cell_basic_draw(ctx, cell_layer, &quot;6. Grape&quot;, &quot;Bunches of 'em!&quot;, NULL);\n\t\tbreak;\n\tcase 6:\n\t\tmenu_cell_basic_draw(ctx, cell_layer, &quot;7. Melon&quot;, &quot;Only three left!&quot;, NULL);\n\t\tbreak;\n\t}\n}\n[/code]\n\nThe <code>NULL</code> references are in the place that a row icon reference would be placed (if a <code>GBitmap</code> were to be shown). Thus, each layer will be drawn with its own unique message.\n\nThe final callback, <code>select_click_callback()</code> will do something different depending on which row is selected when the select button is pressed. To illustrate this, we will use a series of vibrations that signifies the numerical value of the row. Here's how this is done (or Vibes 101!):\n\n[code language=\"cpp\"]\nvoid select_click_callback(MenuLayer *menu_layer, MenuIndex *cell_index, void *callback_context)\n{\n\t//Get which row\n\tint which = cell_index-&gt;row;\n\n\t//The array that will hold the on/off vibration times\n\tuint32_t segments[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n\n\t//Build the pattern (milliseconds on and off in alternating positions)\n\tfor(int i = 0; i &lt; which + 1; i++)\n\t{\n\t\tsegments[2 * i] = 200;\n\t\tsegments[(2 * i) + 1] = 100;\n\t}\n\n\t//Create a VibePattern data structure\n\tVibePattern pattern = {\n\t\t.durations = segments,\n\t\t.num_segments = 16\n\t};\n\n\t//Do the vibration pattern!\n\tvibes_enqueue_custom_pattern(pattern);\n}\n[/code]\n\nWith those three callbacks in place, we can actually create the <code>MenuLayer</code> and add it to the main <code>Window</code>. This is done in four stages:\n<ul>\n\t<li>Create the <code>MenuLayer</code> and assign it to the global pointer</li>\n\t<li>Set it up to receive clicks from the <code>Window</code></li>\n\t<li>Set the callbacks we just wrote to give the <code>MenuLayer</code> the information it needs</li>\n\t<li>Add the <code>MenuLayer</code> to the main <code>Window</code></li>\n</ul>\nHere's the code for that sequence, with annotations (Note the casts used in the <code>MenuLayerCallbacks</code> structure creation):\n\n[code language=\"cpp\"]\nvoid window_load(Window *window)\n{\n\t//Create it - 12 is approx height of the top bar\n\tmenu_layer = menu_layer_create(GRect(0, 0, 144, 168 - 16));\n\n\t//Let it receive clicks\n\tmenu_layer_set_click_config_onto_window(menu_layer, window);\n\n\t//Give it its callbacks\n\tMenuLayerCallbacks callbacks = {\n\t\t.draw_row = (MenuLayerDrawRowCallback) draw_row_callback,\n\t\t.get_num_rows = (MenuLayerGetNumberOfRowsInSectionsCallback) num_rows_callback,\n\t\t.select_click = (MenuLayerSelectCallback) select_click_callback\n\t};\n\tmenu_layer_set_callbacks(menu_layer, NULL, callbacks);\n\n\t//Add to Window\n\tlayer_add_child(window_get_root_layer(window), menu_layer_get_layer(menu_layer));\n}\n[/code]\n\nAs always, de-init the <code>MenuLayer</code>:\n\n[code language=\"cpp\"]\nvoid window_unload(Window *window)\n{\n\tmenu_layer_destroy(menu_layer);\n}\n[/code]\n\nIf all has gone well, after compilation you should be greeted with the screen below, as well as the corresponding vibrations when each row is selected:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/03/pebble-screenshot_2014-03-13_01-27-12.png\"><img class=\"aligncenter size-full wp-image-1766\" alt=\"pebble-screenshot_2014-03-13_01-27-12\" src=\"http://ninedof.files.wordpress.com/2014/03/pebble-screenshot_2014-03-13_01-27-12.png\" width=\"148\" height=\"172\" /></a>\n\n<strong>Conclusions</strong>\nSo that's how to setup a basic <code>MenuLayer</code>. An extended application like those mentioned previously will use <code>char[]</code> buffers to store each row's text, modified in a <code>in_received</code> signature <code>AppMessage</code> callback, and calling <code>menu_layer_reload_data()</code> in that <code>AppMessage</code> callback, thus updating the <code>MenuLayer</code> with the new data.\n\nThe source code can be found <a title=\"Source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-7\">on GitHub HERE</a>!\n\nLet me know any queries you have. Enjoy!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1777",
    "title": "New App: BBC Weather",
    "link": "https://ninedof.wordpress.com/2014/03/15/new-app-bbc-weather/",
    "pubDate": "Sat, 15 Mar 2014 22:33:04 +0000",
    "postDate": "2014-03-15 22:33:04",
    "body": "In a bit of downtime I thought I'd make myself a small app to give me local weather using PebbleKit JS to interpret a <a href=\"http://bbc.co.uk/weather\" title=\"BBC Weather\">BBC Weather</a> feed for my local town.\n\n<a href=\"http://ninedof.files.wordpress.com/2014/03/pebble-screenshot_2014-03-15_22-31-01.png\"><img src=\"http://ninedof.files.wordpress.com/2014/03/pebble-screenshot_2014-03-15_22-31-01.png\" alt=\"pebble-screenshot_2014-03-15_22-31-01\" width=\"150\" height=\"174\" class=\"aligncenter size-full wp-image-1778\" /></a>\n\nQuite stylish, I think! It's for personal use, as I have neither the time or energy to generalise it enough, and I'm sure there are plenty of weather apps out there already!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1801",
    "title": "Streaming Pebble Accelerometer Data",
    "link": "https://ninedof.wordpress.com/2014/03/28/streaming-pebble-accelerometer-data/",
    "pubDate": "Fri, 28 Mar 2014 19:46:25 +0000",
    "postDate": "2014-03-28 19:46:25",
    "body": "<strong>Updates</strong>\n<strong>- 30/3/14 - Added links to source code</strong>\n\nIt's been a long term aim of mine to try and speed up <code>AppMessage</code> as fast as I can, in order to transfer more than mere signal messages between the phone and the watch. An example of this is the long time it takes to send responses to the watch in <a title=\"Wristponder on Google Play\" href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.wristponder\">Wristponder</a> (although now that only applies when a change takes place, thanks to the <a title=\"Persistent Storage\" href=\"https://developer.getpebble.com/2/api-reference/group___storage.html\">Persistent Storage API</a>).\n\nAn ideal use case for this is some sort of accelerometer data stream, so I set to it. I realised that the key to the fastest possible <code>AppMessage</code> speed is to send the next message as soon as possible, when the last one has been received on the other side. If a waiting period is not observed, there will be problems, such as <code>APP_MSG_BUSY</code> or <code>APP_BSG_BUFFER_OVERFLOW</code>. The solution I used uses the <code>app_message_outbox_sent()</code> callback to send the next message. This function is called as soon as the other side <code>ACK</code>nowledges the last message, signalling that it is ready for the next.\n\nGathering the accelerometer data asynchronously into a global storage array:\n\n[code language=\"cpp\"]\nstatic void accel_new_data(AccelData *data, uint32_t num_samples)\n{\n\tfor(uint32_t i = 0; i &lt; num_samples; i++)\n\t{\n\t\tlatest_data[(i * 3) + 0] = (int)(0 + data[i].x);\t//0, 3, 6\n\t\tlatest_data[(i * 3) + 1] = (int)(0 + data[i].y);\t//1, 4, 7\n\t\tlatest_data[(i * 3) + 2] = (int)(0 + data[i].z);\t//2, 5, 8\n\t}\n}\n[/code]\n\nAnd sending it when the previous message has been <code>ACK</code>nowledged:\n\n[code language=\"cpp\"]\nstatic void send_next_data()\n{\n\tDictionaryIterator *iter;\n\tapp_message_outbox_begin(&amp;iter);\n\n\tfor(int i = 0; i &lt; NUM_SAMPLES; i++)\n\t{\n\t\tfor(int j = 0; j &lt; 3; j++)\n\t\t{\n\t\t\tint value = 0 + latest_data[(3 * i) + j];\n\t\t\tTuplet t = TupletInteger((3 * i) + j, value);\n\t\t\tdict_write_tuplet(iter, &amp;t);\n\t\t}\n\t}\n\n\tapp_message_outbox_send();\n}\n\nstatic void out_sent_handler(DictionaryIterator *iter, void *context)\n{\n\t//CAUTION - INFINITE LOOP\n\tsend_next_data();\n\n\t//Show on watch\n\tstatic char buffs[3][32];\n\tsnprintf(buffs[0], sizeof(&quot;X: XXXXX&quot;), &quot;X: %d&quot;, latest_data[0]);\n\tsnprintf(buffs[1], sizeof(&quot;Y: YYYYY&quot;), &quot;Y: %d&quot;, latest_data[1]);\n\tsnprintf(buffs[2], sizeof(&quot;Z: ZZZZZ&quot;), &quot;Z: %d&quot;, latest_data[2]);\n\ttext_layer_set_text(x_layer, buffs[0]);\n\ttext_layer_set_text(y_layer, buffs[1]);\n\ttext_layer_set_text(z_layer, buffs[2]);\n}\n[/code]\n\nAn additional measure that helps speed things up is temporarily reducing the 'sniff interval' of the Bluetooth module to '<code>SNIFF_INTERVAL_REDUCED</code>':\n\n[code language=\"cpp\"]\napp_comm_set_sniff_interval(SNIFF_INTERVAL_REDUCED);\n[/code]\n\nAnd collecting accelerometer data at a faster rate than it is consumed, to avoid sending duplicate frames. This appears to be about 15 <code>AppMessage</code>s per second, each packed with 30 <code>int</code>s representing 10 time-spliced samples from the accelerometer, with a total throughput of approximately 1.6 KBps.\n\nThe end result looks like this (using the excellent <a href=\"http://android-graphview.org/\" title=\"GraphView\">Android GraphView library</a>):\n<a href=\"http://ninedof.files.wordpress.com/2014/03/screenshot_2014-03-26-19-21-09.png\"><img class=\"aligncenter  wp-image-1803\" src=\"http://ninedof.files.wordpress.com/2014/03/screenshot_2014-03-26-19-21-09.png?w=545\" alt=\"Screenshot_2014-03-26-19-21-09\" width=\"352\" height=\"625\" /></a>The next step may be to implement some sort of gesture recognition to enable movements to control some external application. We shall see!\n\n<strong>Source code</strong>\n<a href=\"https://github.com/C-D-Lewis/accelstream-android\" title=\"Android source\">Android</a>\n<a href=\"https://github.com/C-D-Lewis/accelstream-pebble\" title=\"Pebble source\">Pebble</a>\n\n&nbsp;",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1824",
    "title": "Pebble SDK 2.0 Tutorial #8: Android App Integration",
    "link": "https://ninedof.wordpress.com/2014/04/03/pebble-sdk-2-0-tutorial-8-android-app-integration/",
    "pubDate": "Thu, 03 Apr 2014 23:33:53 +0000",
    "postDate": "2014-04-03 23:33:53",
    "body": "<strong>Required Reading</strong>\n\n<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #2: Telling the Time.\" href=\"http://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/\">Pebble SDK 2.0 Tutorial #2: Telling the Time</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #3: Images and Fonts\" href=\"http://ninedof.wordpress.com/2013/12/22/pebble-sdk-2-0-tutorial-3-images-and-fonts/\">Pebble SDK 2.0 Tutorial #3: Images and Fonts</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #4: Animations and Timers\" href=\"http://ninedof.wordpress.com/2013/12/29/pebble-sdk-2-0-tutorial-4-animations-and-timers/\">Pebble SDK 2.0 Tutorial #4: Animations and Timers</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations\" href=\"http://ninedof.wordpress.com/2014/01/11/pebble-sdk-2-0-tutorial-5-buttons-and-vibrations/\">Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS\" href=\"http://ninedof.wordpress.com/2014/02/02/pebble-sdk-2-0-tutorial-6-appmessage-for-pebblekit-js/\">Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #7: MenuLayers\" href=\"http://ninedof.wordpress.com/2014/03/13/pebble-sdk-2-0-tutorial-7-menulayers/\">Pebble SDK 2.0 Tutorial #7: MenuLayers</a>\n\n<strong>Introduction</strong>\n\n<strong>NOTE: This section requires knowledge on how to set up a new Android project in an IDE such as <a title=\"Eclipse IDE\" href=\"https://www.eclipse.org\">Eclipse</a>! I will assume you are using Eclipse</strong>\n\nAfter a few requests and comments, it's time to revisit the Android app communication from <a title=\"Pebble Watch Face SDK Tutorial #6: 2 Way Communication with Android\" href=\"http://ninedof.wordpress.com/2013/07/11/pebble-watch-face-sdk-tutorial-6-2-way-communication-with-android/\">the old 1.X tutorial series</a> and produce an example app for the new 2.0 SDK.\n\nFor the purposes of simplicity, we will be extending the Pebble SDK <code>new-project</code> example, which starts us off with a nice button setup. To do this, create a new empty CloudPebble project, and add this code to the main <code>.c</code> file:\n\n[code language=\"cpp\"]\n#include &lt;pebble.h&gt;\n\nstatic Window *window;\nstatic TextLayer *text_layer;\n\nstatic void select_click_handler(ClickRecognizerRef recognizer, void *context) {\n  text_layer_set_text(text_layer, &quot;Select&quot;);\n}\n\nstatic void up_click_handler(ClickRecognizerRef recognizer, void *context) {\n  text_layer_set_text(text_layer, &quot;Up&quot;);\n}\n\nstatic void down_click_handler(ClickRecognizerRef recognizer, void *context) {\n  text_layer_set_text(text_layer, &quot;Down&quot;);\n}\n\nstatic void click_config_provider(void *context) {\n  window_single_click_subscribe(BUTTON_ID_SELECT, select_click_handler);\n  window_single_click_subscribe(BUTTON_ID_UP, up_click_handler);\n  window_single_click_subscribe(BUTTON_ID_DOWN, down_click_handler);\n}\n\nstatic void window_load(Window *window) {\n  Layer *window_layer = window_get_root_layer(window);\n  GRect bounds = layer_get_bounds(window_layer);\n\n  text_layer = text_layer_create((GRect) { .origin = { 0, 72 }, .size = { bounds.size.w, 20 } });\n  text_layer_set_text(text_layer, &quot;Press a button&quot;);\n  text_layer_set_text_alignment(text_layer, GTextAlignmentCenter);\n  layer_add_child(window_layer, text_layer_get_layer(text_layer));\n}\n\nstatic void window_unload(Window *window) {\n  text_layer_destroy(text_layer);\n}\n\nstatic void init(void) {\n  window = window_create();\n  window_set_click_config_provider(window, click_config_provider);\n  window_set_window_handlers(window, (WindowHandlers) {\n    .load = window_load,\n    .unload = window_unload,\n  });\n  const bool animated = true;\n  window_stack_push(window, animated);\n}\n\nstatic void deinit(void) {\n  window_destroy(window);\n}\n\nint main(void) {\n  init();\n\n  APP_LOG(APP_LOG_LEVEL_DEBUG, &quot;Done initializing, pushed window: %p&quot;, window);\n\n  app_event_loop();\n  deinit();\n}\n\n[/code]\n\nWith that in place, test compilation to make sure all works as it should regarding button operation.\n\nTo extend this to interact with an Android app, we must first add in the <code>AppMessage</code> components from the <a title=\"Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS\" href=\"http://ninedof.wordpress.com/2014/02/02/pebble-sdk-2-0-tutorial-6-appmessage-for-pebblekit-js/\">AppMessage for PebbleKit JS</a> section. First, define the <code>in_received_handler()</code> where received <code>AppMessage</code>s will be interpreted as before:\n\n[code language=\"cpp\"]\nstatic void in_received_handler(DictionaryIterator *iter, void *context) \n{\n   \n}\n[/code]\n\nAfter this, register the handler and open <code>AppMessage</code> inside <code>init()</code>, before pushing the <code>Window</code>:\n\n[code language=\"cpp\"]\n//Register AppMessage events\napp_message_register_inbox_received(in_received_handler);           \napp_message_open(512, 512);    //Large input and output buffer sizes\n[/code]\n\nDefine globally the protocol we will use for communication using enumerations or by <code>#define</code>ing constants. I prefer <code>enum</code>s, but both will do the job. We will define a key representing a button event occurring, and further values to distinguish between the buttons themselves:\n\n[code language=\"cpp\"]\nenum {\n\tKEY_BUTTON_EVENT = 0,\n\tBUTTON_EVENT_UP = 1,\n\tBUTTON_EVENT_DOWN = 2,\n\tBUTTON_EVENT_SELECT = 3\n};\n[/code]\n\nThe next step is to create a function to send these keys and values, which will be exactly the same as that shown in 'AppMessage for PebbleKit JS', above the click handlers:\n\n[code language=\"cpp\"]\nvoid send_int(uint8_t key, uint8_t cmd)\n{\n    DictionaryIterator *iter;\n    app_message_outbox_begin(&amp;iter);\n     \n    Tuplet value = TupletInteger(key, cmd);\n    dict_write_tuplet(iter, &amp;value);\n     \n    app_message_outbox_send();\n}\n[/code]\n\nFinally, add calls to <code>send_int()</code> to each of the three button click handlers to send a signal corresponding to which button was pressed. This should look like the code shown below:\n\n[code language=\"cpp\"]\nstatic void select_click_handler(ClickRecognizerRef recognizer, void *context) {\n\ttext_layer_set_text(text_layer, &quot;Select&quot;);\n\tsend_int(KEY_BUTTON_EVENT, BUTTON_EVENT_SELECT);\n}\n\nstatic void up_click_handler(ClickRecognizerRef recognizer, void *context) {\n\ttext_layer_set_text(text_layer, &quot;Up&quot;);\n\tsend_int(KEY_BUTTON_EVENT, BUTTON_EVENT_UP);\n}\n\nstatic void down_click_handler(ClickRecognizerRef recognizer, void *context) {\n\ttext_layer_set_text(text_layer, &quot;Down&quot;);\n\tsend_int(KEY_BUTTON_EVENT, BUTTON_EVENT_DOWN);\n}\n[/code]\n\nAfter setting up the Android side, we will come back to the Pebble side to implement the reverse process; sending data to the watch from Android.\n\n<strong>Android App Integration</strong>\n\nSet up a new Android project and make sure it runs correctly as just a blank <code>Activity</code>. Following the Android SDK plugin for Eclipse without modifying any of the settings except project location and name is a good starting point, which I will be using. After completing this process and removing the superfluous <code>onCreateOptionsMenu()</code>, my main <code>Activity</code> file looks like this:\n\n[code language=\"cpp\"]\npackage com.wordpress.ninedof.pebblesdk2part8;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\npublic class MainActivity extends Activity {\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_main);\n\t}\n\n}\n[/code]\n\nIn order to communicate with Pebble, you will need to import the PebbleKit project into Eclipse. Once this is done, add it as a Library by right clicking the Tutorial project and choosing 'Properties', then clicking 'Add' under the 'Android' section. Choose 'PEBBLE_KIT' and click OK, then OK again to close the 'Properties' dialogue.\n\nSo, let's make the two talk! As the messages will begin coming from the watch we must register a <code>BroadcastReceiver</code> to intercept the Pebble's <code>AppMessages</code>. This is done as shown below:\n\n[code language=\"java\"]\nprivate PebbleDataReceiver mReceiver;\n\n... onCreate() here ...\n\n@Override\nprotected void onResume() {\n\tsuper.onResume();\n\n\tmReceiver = new PebbleDataReceiver(UUID.fromString(&quot;2fc99a5d-ee35-4057-aa9b-0d4dd8e35ef5&quot;)) {\n\n\t\t@Override\n\t\tpublic void receiveData(Context context, int transactionId, PebbleDictionary data) {\n\t\t\t\n\t\t}\n\n\t};\n\n\tPebbleKit.registerReceivedDataHandler(this, mReceiver);\n}\n\n@Override\nprotected void onPause() {\n\tsuper.onPause();\n\t\n\tunregisterReceiver(mReceiver);\n}\n[/code]\n\n<strong>Be careful to note that the UUID specified in the constructor is the SAME UUID as specified in your corresponding watchapp's <code>appinfo.json</code>, or in Settings on CloudPebble. The two must match for correct communication! </strong>\n\nNext, define the exact same set of keys and values as on the Pebble side, as these are used to communicate:\n\n[code language=\"java\"]\nprivate static final int\n\tKEY_BUTTON_EVENT = 0,\n\tBUTTON_EVENT_UP = 1,\n\tBUTTON_EVENT_DOWN = 2,\n\tBUTTON_EVENT_SELECT = 3;\n[/code]\n\nNow this is done we add logic to the overridden <code>receiveData()</code> method to determine which button press was encoded in the received message:\n\n[code language=\"java\"]\n@Override\npublic void receiveData(Context context, int transactionId, PebbleDictionary data) {\n\t//ACK the message\n\tPebbleKit.sendAckToPebble(context, transactionId);\n\n\t//Check the key exists\n\tif(data.getUnsignedInteger(KEY_BUTTON_EVENT) != null) {\n\t\tint button = data.getUnsignedInteger(KEY_BUTTON_EVENT).intValue();\n\n\t\tswitch(button) {\n\t\tcase BUTTON_EVENT_UP:\n\t\t\t//The UP button was pressed\n\t\t\tbreak;\n\t\tcase BUTTON_EVENT_DOWN:\n\t\t\t//The DOWN button was pressed\n\t\t\tbreak;\n\t\tcase BUTTON_EVENT_SELECT:\n\t\t\t//The SELECT button was pressed\n\t\t\tbreak;\n\t\t}\n\t}\n}\n[/code]\n\nThe last step that completes this leg of the journey is to actually see which button was pressed on the Android display, akin to how it is on the Pebble. To do this, simply set the main <code>View</code> to a <code>TextView</code> in <code>onCreate</code>:\n\n[code language=\"java\"]\nprivate TextView buttonView;\n\n...\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\t\n\tmButtonView = new TextView(this);\n\tmButtonView.setText(&quot;No button yet!&quot;);\n\t\n\tsetContentView(mButtonView);\n}\n[/code]\n\nFinally, add calls to <code>TextView.setText()</code> in the <code>switch</code> statement within the <code>receiveData</code> method to show on the Android display which button was pressed:\n\n[code language=\"java\"]\nswitch(button) {\ncase BUTTON_EVENT_UP:\n\t//The UP button was pressed\n\tmButtonView.setText(&quot;UP button pressed!&quot;);\n\tbreak;\ncase BUTTON_EVENT_DOWN:\n\t//The DOWN button was pressed\n\tmButtonView.setText(&quot;DOWN button pressed!&quot;);\n\tbreak;\ncase BUTTON_EVENT_SELECT:\n\t//The SELECT button was pressed\n\tmButtonView.setText(&quot;SELECT button pressed!&quot;);\n\tbreak;\n}\n[/code]\n\nTime to try it out! Compile and install the watchapp, run the Android project in Eclipse to install and launch on your phone, open the watchapp and press a button. You should see something like this:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/04/pebble-screenshot_2014-04-04_00-05-49.png\"><img class=\"aligncenter size-full wp-image-1830\" src=\"http://ninedof.files.wordpress.com/2014/04/pebble-screenshot_2014-04-04_00-05-49.png\" alt=\"pebble-screenshot_2014-04-04_00-05-49\" width=\"150\" height=\"174\" /></a>\n\n<a href=\"http://ninedof.files.wordpress.com/2014/04/screenshot_2014-04-04-00-04-54.png\"><img class=\"aligncenter  wp-image-1831\" src=\"http://ninedof.files.wordpress.com/2014/04/screenshot_2014-04-04-00-04-54.png?w=545\" alt=\"Screenshot_2014-04-04-00-04-54\" width=\"364\" height=\"647\" /></a>\n\n<strong>Going The Other Way</strong>\n\nTo send data back to Pebble, we will define a new key on both sides to trigger a vibration. Name this key <code>KEY_VIBRATION</code> and give it a value of <code>4</code>. With this done, modify the <code>receiveData()</code> method to send this message using a <code>PebbleDictionary</code> object after the <code>switch</code> statement like so:\n\n[code language=\"java\"]\n//Make the watch vibrate\nPebbleDictionary dict = new PebbleDictionary();\ndict.addInt32(KEY_VIBRATION, 0);\nPebbleKit.sendDataToPebble(context, UUID.fromString(&quot;2fc99a5d-ee35-4057-aa9b-0d4dd8e35ef5&quot;), dict);\n[/code]\n\nFinally, return to CloudPebble and add the new key to the main <code>.c</code> file. Finally, add a call to <code>vibes_short_pulse()</code> in <code>in_received_handler()</code>:\n\n[code language=\"cpp\"]\nenum {\n\tKEY_BUTTON_EVENT = 0,\n\tBUTTON_EVENT_UP = 1,\n\tBUTTON_EVENT_DOWN = 2,\n\tBUTTON_EVENT_SELECT = 3,\n\tKEY_VIBRATION = 4\n};\n\n...\n\nstatic void in_received_handler(DictionaryIterator *iter, void *context) \n{\n\tTuple *t = dict_read_first(iter);\n\tif(t)\n\t{\n\t\tvibes_short_pulse();\n\t}\n}\n[/code]\n\nRecompile, install and launch BOTH the Pebble and Android apps, press a button and feel the communications flowing through to your wrist!\n\n<strong>Conclusions</strong>\n\nAnother long post! For more information on diving deeper and to send more complex forms of data, check out the <code>AppMessage</code> <a title=\"AppMessage Documentation\" href=\"https://developer.getpebble.com/2/api-reference/group___app_message.html\">documentation</a>.\n\nSource code is on GitHub for both the <a title=\"Pebble source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-8-watch\">Pebble</a> and <a title=\"Android source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-8-android\">Android</a> projects.",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1837",
    "title": "Update: Pebble Spark Core Control",
    "link": "https://ninedof.wordpress.com/2014/04/05/update-pebble-spark-core-control/",
    "pubDate": "Sat, 05 Apr 2014 17:07:35 +0000",
    "postDate": "2014-04-05 17:07:35",
    "body": "<strong>Updates:</strong>\n\n<strong>- <del>Appears the return_code from the Core is not always that which is requested. Works well for Pin D0 though.</del></strong>\n\n<strong>- Source code repo updated. All Dx pins now work. Uses jQuery. <del>Still READY-TIMEOUTs though...</del></strong>\n\nI've revisited my control of the <a title=\"Spark Core\" href=\"http://spark.io\">Spark Core</a> Dx pins, with some polishing up and JS driven UI updating so I know the response has been received from the Spark Cloud.\n\n<a href=\"http://ninedof.files.wordpress.com/2014/04/pebble-screenshot_2014-04-05_17-55-09.png\"><img class=\"aligncenter size-full wp-image-1838\" src=\"http://ninedof.files.wordpress.com/2014/04/pebble-screenshot_2014-04-05_17-55-09.png\" alt=\"pebble-screenshot_2014-04-05_17-55-09\" width=\"150\" height=\"174\" /></a>\n\nI'm loving working with it again, and can't wait to build some real remote controlled device, but that will have to wait for another day. I plan to release this app eventually, possibly under the name of PebbleTinker, derived from the stock <a title=\"Tinker\" href=\"http://docs.spark.io/#/start/tinkering-with-tinker\">Tinker app</a> for Spark Core, and all looks to be working fine, but I'm being haunted by the READY-TIMEOUT, where PebbleKit JS is killed after about ten seconds after install. Once this is fixed, I look forward to releasing!\n\nIf you want to give it a go early, the source code is partly available on <a title=\"Source\" href=\"https://github.com/C-D-Lewis/pebble-tinker\">GitHub</a>.",
    "tags": [
      "Integration",
      "Pebble",
      "Spark Core"
    ]
  },
  {
    "id": "1848",
    "title": "Spark Core Pins from a Webpage",
    "link": "https://ninedof.wordpress.com/2014/04/07/spark-core-pins-from-a-webpage/",
    "pubDate": "Mon, 07 Apr 2014 16:12:43 +0000",
    "postDate": "2014-04-07 16:12:43",
    "body": "Building on the small amount of JavaScript code developed by controlling the Spark Core pins from my Pebble, I decided to write a basic webpage to allow me to perform the same control functions but from a browser. Sure, it's been done before, but as I have no real expertise or experience of JavaScript beyond that used for PebbleKit JS apps, and virtually none at all for HTML, it seemed like a good learning opportunity.\n\nAnd it turned out to be easier than expected! After a couple of hours, the basic code was in place. The webpage looks like this:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/04/jquery-core.png\"><img class=\"aligncenter size-full wp-image-1849\" src=\"http://ninedof.files.wordpress.com/2014/04/jquery-core.png\" alt=\"jQUery Core\" width=\"483\" height=\"372\" /></a>Nothing too pretty to look at, but does the job well.\n\nDuring the aforementioned Pebble project, <a href=\"https://community.spark.io/t/pin-argument-for-spark-function-is-always-0-solved/3794\" title=\"Forum post\">I sought help with a problem</a> in getting the same pin number back as I sent to the Spark Cloud. The solution to this turned out to be specifying the Spark.function() parameter string as a key-value dictionary, making the core (aha) code segment in this webpage as so:\n\n[code language=\"js\"]\n//Send the request to the Core\nvar sendRequest = function(pin, on, device_id, access_token) {\n\tvar url;\n\tif(on) {\n\t\turl = &quot;https://api.spark.io/v1/devices/&quot; + device_id + &quot;/on?access_token=&quot; + access_token;\n\t} else {\n\t\turl = &quot;https://api.spark.io/v1/devices/&quot; + device_id + &quot;/off?access_token=&quot; + access_token;\n\t}\n\n\tconsole.log(&quot;jQuery AJAX: Requesting pin &quot; + pin + &quot; &quot; + (on == true ? &quot;on&quot; : &quot;off&quot;) + &quot;...&quot;);\n\n\t//Send request using jQuert AJAX\n\t$.ajax({\n\t  type: &quot;POST&quot;,\n\t  url: url,\n\t  data: {&quot;args&quot;:pin},\n\t  success: success,\n\t  dataType: &quot;json&quot;\n\t});\n};\n[/code]\n\nThe entire project (three files!) can be found on <a title=\"Source code\" href=\"https://github.com/C-D-Lewis/core-pins-js/tree/master\">GitHub here</a>. I may expand it to include more functions in the future, but at the moment it provides a good platform to play around with, and I've learned a small amount about HTML forms and using jQuery. Time well spent!\n\n&nbsp;",
    "tags": [
      "Integration",
      "JavaScript",
      "Spark Core"
    ]
  },
  {
    "id": "1864",
    "title": "Wristponder v1.6.0 - Longer Responses, Auto-start, Notifications and more!",
    "link": "https://ninedof.wordpress.com/2014/04/15/wristponder-v1-6-0-longer-responses-auto-start-notifications-and-more/",
    "pubDate": "Tue, 15 Apr 2014 14:17:23 +0000",
    "postDate": "2014-04-15 14:17:23",
    "body": "After finishing my engineering dissertation, today is a day to get some coding done before starting on the next assignment sprint tomorrow.\n\nThe result is version 1.6.0 of Wristponder!\n\n<a href=\"http://ninedof.files.wordpress.com/2014/04/screenshot_2014-04-15-14-52-59.png\"><img class=\"aligncenter  wp-image-1865\" src=\"http://ninedof.files.wordpress.com/2014/04/screenshot_2014-04-15-14-52-59.png?w=545\" alt=\"Screenshot_2014-04-15-14-52-59\" width=\"311\" height=\"552\" /></a>\n\nNew features include:\n<ul>\n\t<li>The maximum length of a response has been raised from 40 to 100 characters.</li>\n\t<li>Option to auto-start the watchapp when an SMS or phone call is received.</li>\n\t<li>Option to receive a notification when the SMS send is successful or fails. This is good for when signal is weak and takes longer than the alert dialog timeout.</li>\n\t<li>Sorting the list of responses now triggers a sync of responses where it incorrectly did not previously. Full manual sorting is coming soon, when I figure out the UI processes to use.</li>\n\t<li>The watchapp is now built with SDK 2.0.2. Sorry this transition from BETA6 took so long.</li>\n</ul>\nAs a result, both the Android and watchapp require updating. The good news is that the new watchapp is bundled with the Android app with an <a title=\"Mechanism link\" href=\"http://forums.getpebble.com/discussion/comment/103733/#Comment_103733\">improved side-loading mechanism</a> that looks more robust, I hope.\n\nA set of selectable Favourite contacts is also coming soon, but requires significant UI modification, more than a day's work. Stay tuned for that.\n\nEnjoy!\n\n<strong>Download</strong>\n<a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.wristponder\"> <img src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" alt=\"Get it on Google Play\" />\n</a>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1884",
    "title": "Block Game using Pebble Accelerometer",
    "link": "https://ninedof.wordpress.com/2014/04/24/block-game-using-pebble-accelerometer/",
    "pubDate": "Thu, 24 Apr 2014 16:35:38 +0000",
    "postDate": "2014-04-24 16:35:38",
    "body": "<strong>Edit: A gist of the PebbleGestureModel.java file is <a title=\"PGM\" href=\"https://gist.github.com/C-D-Lewis/ba1349bb0ebdee76b0cf\">now available</a>, but not polished.</strong>\n\nIn snatches of down time over the last few weeks I <a title=\"Streaming Pebble Accelerometer Data\" href=\"http://ninedof.wordpress.com/2014/03/28/streaming-pebble-accelerometer-data/\">created a stream of Pebble accelerometer data</a> and integrated it into a new version of my Android game engine, which I have plans for using over the summer for a proper implementation of a few game ideas I've toyed with over the last year or so.\n\nAfter further small bits of work, I created a class called PebbleGestureModel, which receives new X, Y and Z data and performs threshold and duration checks (to prevent continuous firing) before executing abstract actions, implemented upon instantiation. Below is an example with no actions assigned for an acceleration threshold of 800 (g is approximately 1000), a minimum duration between firing actions and operating in the tilt mode :\n\n[code language=\"java\"]\nPebbleGestureModel model = new PebbleGestureModel(800, 1000L, PebbleGestureModel.MODE_TILT) {\n\n\t@Override\n\tpublic void onWristUp() {\n\n\t}\n\n\t@Override\n\tpublic void onWristRight() {\n\n\t}\n\n\t@Override\n\tpublic void onWristLeft() {\n\n\t}\n\n\t@Override\n\tpublic void onWristDown() {\n\n\t}\n\n\t@Override\n\tpublic void onActionEnd() {\n\n\t}\n\n};\n[/code]\n\nThe result of this is a simple 'game' consisting of a randomly generated 'world' of 10 x 10 blocks, with two blocks nominated as the Finish and Player respectively. Touching the 'world' generates a new random one. At the moment the Player and Finish are randomly placed on valid non-solid tiles, but are not path-checked. If no path connects them, I just touch for a new one until a valid one is found.\n\n<a href=\"http://ninedof.files.wordpress.com/2014/04/screenshot_2014-04-22-01-48-53.png\"><img class=\"aligncenter size-large wp-image-1891\" src=\"http://ninedof.files.wordpress.com/2014/04/screenshot_2014-04-22-01-48-53.png?w=545\" alt=\"Screenshot_2014-04-22-01-48-53\" width=\"545\" height=\"306\" /></a>\n\nThe Player block is controlled by accelerometer data from the Pebble, and can operate in two modes: <code>MODE_FLICK</code> and <code>MODE_TILT</code>. In <code>MODE_FLICK</code> a flick of the extended watchface-up wrist in each direction will trigger an abstract method to allow an action to be taken. Similarly in <code>MODE_TILT</code> the actions are triggered when the wrist is tilted left or right, or the arm is pointed up or down. The START button is used to start the data stream and the INSTALL button is used to install the streaming watchapp. The four black squares show the current actuating direction induced by the watch, and the first sample of the last received <code>AppMessage</code> (currently 5 samples per message) is shown at the bottom.\n\nHere is a video of the 'game' in action, showing the accelerometer control:\n\nhttps://www.youtube.com/watch?v=fuRA4R5xI2o\n\nI'm not releasing the source code to this yet, as it's untidy due to it's ad-hoc development and it doesn't do much game-wise, but may tidy it up and release it soon.",
    "tags": [
      "Android",
      "Integration",
      "Pebble"
    ]
  },
  {
    "id": "1900",
    "title": "Wristponder v2.0.0: Favourite Contacts and UI Redesign",
    "link": "https://ninedof.wordpress.com/2014/04/27/wristponder-v2-0-0-favourite-contacts-and-ui-redesign/",
    "pubDate": "Sun, 27 Apr 2014 00:38:00 +0000",
    "postDate": "2014-04-27 00:38:00",
    "body": "One of the most requested features for Wristponder I get is the ability to manually choose a small set of 'favourite' contacts, perhaps as only having the last contacts and cumulative incoming contacts wasn't enough. I realised that after adding favourite contacts the main menu would get much longer, and so the UI would need an overhaul to better navigate the list of contacts. So the menu was redesigned to contain Last SMS, Last Call, Top Incoming -&gt; Incoming contacts, Favourites -&gt; Favourite contacts. This way it's quicker to navigate where you want to go, as opposed to always scrolling the whole list.\n\n<a href=\"http://ninedof.files.wordpress.com/2014/04/wp-2-screens.png\"><img class=\"aligncenter size-full wp-image-1901\" src=\"http://ninedof.files.wordpress.com/2014/04/wp-2-screens.png\" alt=\"wp 2 screens\" width=\"354\" height=\"175\" /></a>\n\nThankfully using the new data streaming method to download contacts as opposed to sending them synchronously from Android (which was prone to errors and missed messages, which the new method is not) I was able to present the synchronising of contacts as a fancy progress bar as the app opens. Behind the scenes as well, I split up one huge C file into a header-source pair for each window with as few globals as needed. Much easier to work with now!\n\n<a href=\"http://ninedof.files.wordpress.com/2014/04/wp-sync.png\"><img class=\"aligncenter size-full wp-image-1902\" src=\"http://ninedof.files.wordpress.com/2014/04/wp-sync.png\" alt=\"wp sync\" width=\"150\" height=\"175\" /></a>\n\nThe favourite contacts themselves are selected using a new button in the main Android app's ActionBar, and chosen using a series of Spinners.\n\n<img class=\"aligncenter size-full wp-image-1903\" src=\"http://ninedof.files.wordpress.com/2014/04/wp-2-heart.png\" alt=\"wp 2 heart\" width=\"540\" height=\"110\" />\n\nThe reason for this is that I had great difficulty finding a way to integrate the Contact Picker's Activity life-cycle (using startActivityForResult) into a ListActivity. Short of using another Activity as a blank go-between, this was the best option I found. It's very likely I'll make a better interface in the future if the inspiration strikes me.\n\n<a href=\"http://ninedof.files.wordpress.com/2014/04/screenshot_2014-04-26-21-31-39.png\"><img class=\"aligncenter  wp-image-1904\" src=\"http://ninedof.files.wordpress.com/2014/04/screenshot_2014-04-26-21-31-39.png?w=545\" alt=\"Screenshot_2014-04-26-21-31-39\" width=\"357\" height=\"634\" /></a>As with the last update, the response list is synchronised only when changed using two checksums calculated internally on both sides, then compared when a contact is selected. This makes use of the app a lot faster and illustrates the usefulness of the Persistent Storage API!\n\nAs always, you can get Wristponder from Google Play:\n\n<strong>Download</strong>\n<a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.wristponder\"> <img src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" alt=\"Get it on Google Play\" />\n</a>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "1918",
    "title": "Configurable Spark Core-connected LCD",
    "link": "https://ninedof.wordpress.com/2014/05/04/configurable-spark-core-connected-lcd/",
    "pubDate": "Sun, 04 May 2014 20:52:37 +0000",
    "postDate": "2014-05-04 20:52:37",
    "body": "After blowing up my last LCD module <a title=\"Raspberry Pi: IP Address to LCD Display\" href=\"http://ninedof.wordpress.com/2013/07/13/raspberry-pi-ip-address-to-lcd-display/\">used for a project</a>, I decided to buy a new one, and decided on this RGB back-light module <a title=\"Sparkfun RGB LCD\" href=\"https://www.sparkfun.com/products/10862\">from Sparkfun</a>. It shares the standard pin-out as any Arduino compatible module (the 4/8-bit parallel Hitachi HD44780 interface), and includes a back-light that can be illuminated using an RGB LED.\n\nI made the requisite connections for use on my Spark Core, and after discovering that the LED K connection is to ground and that the contrast adjustment pin requires a voltage of more than 4.5V (So grounding on a 3.3V system such as the Core is not enough) I had the module running nicely. As an additional feature, I connected the blue LED terminal via a BC457b transistor to allow control via software. Future expansion could include RGB PWM control for some funky effects, perhaps.\n\nAfter playing around with setting text in the Spark IDE, I expanded the firmware to allow reception of text from a POST request, and then created such a request in Android to allow control of the back-light and text shown in app form. After a bit of layout attention, this was the result. The font size and margins are chosen to wrap the same as the LCD (Word wrapping is a novel feature of the Core firmware I wrote).\n\n<a href=\"http://ninedof.files.wordpress.com/2014/05/screenshot_2014-05-04-21-31-28.png\"><img class=\"aligncenter size-large wp-image-1919\" src=\"http://ninedof.files.wordpress.com/2014/05/screenshot_2014-05-04-21-31-28.png?w=545\" alt=\"Screenshot_2014-05-04-21-31-28\" width=\"545\" height=\"300\" /></a>The small size of the LCD module image is due to the fact I couldn't find any on the internet larger (later I may create my own), and scaling it up proved unsightly. Still quite legible on my Nexus 5 display, however. Entering the above text and hitting 'SET' gives the following real-world result:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/05/img_20140504_213246.jpg\"><img class=\"aligncenter size-large wp-image-1920\" src=\"http://ninedof.files.wordpress.com/2014/05/img_20140504_213246.jpg?w=545\" alt=\"IMG_20140504_213246\" width=\"545\" height=\"408\" /></a>The font isn't exactly the same, but close enough for my own use. I think that on any other sized display some more advanced layout management would be required, but that is for a future time. Also featured in the above picture, but unused, is the ADXL362 accelerometer I also used with the Core after tweaking the Arduino library to run, but haven't written about yet.\n\nTwo useful code snippets I created for re-use in future LCD projects are sending the Spark Cloud request in Android:\n\n[code language=\"java\"]\npublic static String cloudRequest(String deviceId, String accessToken, String functionOrVariableName, String argString) {\n\ttry {\n\t\t//Setup connection\n\t\tURL url = new URL(&quot;https://api.spark.io/v1/devices/&quot; + deviceId + &quot;/&quot; + functionOrVariableName);\n\t\tHttpsURLConnection con = (HttpsURLConnection) url.openConnection();\n\t\tcon.setRequestMethod(&quot;POST&quot;);\n\t\tString urlParameters = &quot;access_token=&quot; + accessToken + &quot;&amp;args=&quot; + argString;\n\t\tcon.setDoOutput(true);\n\n\t\t//Send request\n\t\tDataOutputStream wr = new DataOutputStream(con.getOutputStream());\n\t\twr.writeBytes(urlParameters);\n\t\twr.flush();\n\t\twr.close();\n\n\t\t//Receive response\n\t\tcon.getResponseCode();\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n\t\tString inputLine;\n\t\tStringBuffer response = new StringBuffer();\n\t\twhile ((inputLine = in.readLine()) != null) {\n\t\t\tresponse.append(inputLine);\n\t\t}\n\t\tin.close();\n\n\t\treturn response.toString();\n\t} catch (Exception e) {\n\t\tSystem.err.println(SparkUtils.class.getName() + &quot;: Exception:&quot;);\n\t\te.printStackTrace();\n\t\treturn &quot;FAILED&quot;;\n\t}\n}\n[/code]\n\nAnd also performing simple word wrapping between lines 0 and 1 of the LCD display:\n\n[code language=\"cpp\"]\n//Check overrun\nif(msg.charAt(15) != ' ' &amp;&amp; msg.charAt(16) != ' ')\n{\n    //Find start of offending word\n    int index = 15;\n    while(msg.charAt(index) != ' ' &amp;&amp; index &gt;= 0)\n    {\n        index--;\n    }\n\n    String one = msg.substring(0, index);\n    String two = msg.substring(index + 1);\n\n    lcd.print(one);\n    lcd.setCursor(0, 1);\n    lcd.print(two);\n}\n[/code]\n",
    "tags": [
      "Android",
      "C++",
      "Integration",
      "Spark Core"
    ]
  },
  {
    "id": "1936",
    "title": "Linking Pebble and Spark Core",
    "link": "https://ninedof.wordpress.com/2014/05/12/linking-pebble-and-spark-core/",
    "pubDate": "Mon, 12 May 2014 00:41:21 +0000",
    "postDate": "2014-05-12 00:41:21",
    "body": "<strong>Note: This post assumes basic knowledge of Pebble <code>AppMessage</code>, PebbleKit JS, jQuery <code>$.ajax()</code>, <code>Spark.function()</code> and similar API calls.\n\nAlso, the JS code may only work on Android devices.\n</strong>\n\n<strong>Introduction</strong>\n\nA major appeal of the Pebble smartwatch is its potential both as a data display and a data input device. The addition of PebbleKit JS in SDK 2.0 allows a watchapp to connect to the internet and download data. Through the use of jQuery data can be requested, and with the <code>EventSource</code> object data can be listened for asynchronously.\n\nThis enables the watch to display data sent from the Core as well as make requests to the Spark Cloud to instruct the Core to execute functions or request the status of exposed variables. This means that the Pebble can use the Core as an interface for its I/O pins, which is an exciting prospect when considered with all the libraries available for Arduino (and by extension, the Core).\n\nThe purpose of this post is to instruct in what is required to get these two devices to interact. To do so, you must setup:\n<ul>\n\t<li><code>AppMessage</code> and keys for the Pebble C program.</li>\n\t<li>PebbleKit JS listeners (including jQuery and/or <code>EventSource</code>).</li>\n\t<li>Use <code>Spark.function()</code>, <code>Spark.variable()</code> or <code>Spark.publish()</code> to expose the data you want to request/functions you want to execute remotely.</li>\n</ul>\nVisually, the process for triggering a <code>Spark.function()</code> call from Pebble looks like this (<code>Spark.variable()</code> works in the same way):\n\n<a href=\"http://ninedof.files.wordpress.com/2014/05/pebble-core-fuction.png\"><img class=\"aligncenter size-large wp-image-1942\" src=\"http://ninedof.files.wordpress.com/2014/05/pebble-core-fuction.png?w=545\" alt=\"pebble-core-fuction\" width=\"545\" height=\"124\" /></a>\n\n<strong>Prepare Pebble</strong>\n\nTo prepare the Pebble end, declare the keys you will be using for <code>AppMessage</code> communication. For this example, we will use a key called <code>KEY_TOGGLE</code> with a value of 0. This will be used to instruct PebbleKit JS to call a function registered on the Core with <code>Spark.function()</code> to toggle a pin <code>HIGH</code> or <code>LOW</code>. This is shown below in the starting template for the watchapp:\n\n[code language=\"cpp\"]\n#include &lt;pebble.h&gt;\n\n#define KEY_TOGGLE 0\n\nstatic Window *window;\nstatic TextLayer *text_layer;\n\nstatic void select_click_handler(ClickRecognizerRef recognizer, void *context) \n{\n  text_layer_set_text(text_layer, &quot;Select&quot;);\n}\n\nstatic void click_config_provider(void *context) \n{\n  window_single_click_subscribe(BUTTON_ID_SELECT, select_click_handler);\n}\n\nstatic void window_load(Window *window) \n{\n  //Create TextLayer\n  text_layer = text_layer_create(GRect(0, 0, 144, 168));\n  text_layer_set_text(text_layer, &quot;Press SELECT to toggle Spark pin D0&quot;);\n  text_layer_set_text_alignment(text_layer, GTextAlignmentCenter);\n  layer_add_child(window_get_root_layer(window), text_layer_get_layer(text_layer));\n}\n\nstatic void window_unload(Window *window) \n{\n  //Destroy TextLayer\n  text_layer_destroy(text_layer);\n}\n\nstatic void init(void) \n{\n  //Create Window\n  window = window_create();\n  window_set_click_config_provider(window, click_config_provider);\n  window_set_window_handlers(window, (WindowHandlers) {\n    .load = window_load,\n    .unload = window_unload,\n  });\n  window_stack_push(window, true);\n}\n\nstatic void deinit(void) \n{\n  //Destroy Window\n  window_destroy(window);\n}\n\nint main(void) \n{\n  init();\n  app_event_loop();\n  deinit();\n}\n[/code]\n\nThe next step is to declare this key in the Pebble app package when it is compiled. This is in <code>appinfo.json</code> (or Settings on CloudPebble):\n\n[code]\n&quot;appKeys&quot;: {\n  &quot;KEY_TOGGLE&quot;: 0\n}\n[/code]\n\nNext, we open <code>AppMessage</code> in <code>init()</code>:\n\n[code language=\"cpp\"]\n//Prepare AppMessage\napp_message_open(app_message_inbox_size_maximum(), app_message_outbox_size_maximum());\n[/code]\n\ncreate a function to send a key-value pair through <code>AppMessage</code>:\n\n[code language=\"cpp\"]\nstatic void send_int(int key, int cmd)\n{\n  DictionaryIterator *iter;\n  app_message_outbox_begin(&amp;iter);\n  \n  Tuplet value = TupletInteger(key, cmd);\n  dict_write_tuplet(iter, &amp;value);\n  \n  app_message_outbox_send();\n}\n[/code]\n\nand add a call to send <code>KEY_TOGGLE</code> when the select button is pressed:\n\n[code language=\"cpp\"]\nstatic void select_click_handler(ClickRecognizerRef recognizer, void *context) \n{\n  send_int(KEY_TOGGLE, 0);  //Value can be any int for now\n}\n[/code]\n\n<strong>Prepare PebbleKit JS</strong>\nAfter preparing the Pebble app to send an <code>AppMessage</code>, we must prepare PebbleKit JS to receive it and make a call to the Spark Cloud. The first stage in this is to initialise the <code>pebble-js-app.js</code> file like so:\n\n[code language=\"javascript\"]\nvar deviceId = &quot;&quot;;\nvar accessToken = &quot;&quot;;\n\nPebble.addEventListener(&quot;ready&quot;,\n    function(e) {\n        console.log(&quot;Pebble JS Ready!&quot;);\n    }\n);\n\nPebble.addEventListener(&quot;appmessage&quot;,\n\tfunction(dict) {\n\t\tconsole.log(&quot;AppMessage received!&quot;);\n\t}\n);\n[/code]\n\nThe \"appmessage\" event callback is where we will make the Spark Cloud request, as this is triggered when an <code>AppMessage</code> is received. This will be run by any message received, but for the sake of precision and to accomodate multiple messages in an eventual application, we will single out messages with our <code>KEY_TOGGLE</code> key:\n\n[code language=\"javascript\"]\nif(typeof dict.payload[&quot;KEY_TOGGLE&quot;] !== &quot;undefined&quot;) {\n\tconsole.log(&quot;KEY_TOGGLE received!&quot;);\n}\n[/code]\n\nIt is in this clause that we will use jQuery to make the Spark Cloud request. First, we must include jQuery as it is not supported by default by PebbleKit JS (to the best of my knowledge!). We can do this by calling the following method in the \"ready\" event callback:\n\n[code language=\"javascript\"]\nvar importjQuery = function() {\n\tvar script = document.createElement('script');\n\tscript.src = 'http://code.jquery.com/jquery-latest.min.js';\n\tscript.type = 'text/javascript';\n\tdocument.getElementsByTagName('head')[0].appendChild(script);\n};\n\nPebble.addEventListener(&quot;ready&quot;,\n    function(e) {\n        importjQuery();\n        console.log(&quot;Pebble JS Ready!&quot;);\n    }\n);\n[/code]\n\nNext, we assemble the URL for the POST request and make the <code>$.ajax()</code> call. The URL contains the following elements (more details can be found on the <a href=\"http://docs.spark.io/#/api\">Spark Docs site</a>):\n\n<ul>\n<li>The base URL: https://api.spark.io/v1/devices/</li>\n<li>The Core Device ID</li>\n<li>The name of the function declared in <code>Spark.function()</code> (more on this later)</li>\n<li>The Access Token for secure access for token holders</li>\n<li>Any arguments (One string at this time)</li>\n</ul>\n\nOur function-to-be will be called <code>int toggle(String args)</code> as this is the accepted signature for <code>Spark.function()</code>. Storing our sensitive Device ID and Access Token as private variables in the JS file, the result looks like this:\n\n[code language=\"javascript\"]\nvar url = &quot;https://api.spark.io/v1/devices/&quot; + deviceId + &quot;/toggle?access_token=&quot; + accessToken;\n\n//Send with jQuery\n$.ajax({\n  type: &quot;POST&quot;,\n  url: url,\n  data: {&quot;args&quot;:&quot;none&quot;},\t//No args for the moment\n  success: function() {\n  \tconsole.log(&quot;POST successful!&quot;);\n  },\n  dataType: &quot;json&quot;\n});\n[/code]\n\n<strong>Make sure you change the <code>deviceId</code> and <code>accessToken</code> variables at the top of the JS file to be those of you own Core!</strong>\n\nThis completes the PebbleKit JS preparation!\n\n<strong>Prepare the Core</strong>\nThe final step in setting up a <code>Spark.function()</code> triggered by Pebble is to write the actual Core firmware. This is a very simple program. A function with the signature mentioned previously is created to do the toggling, with a <code>bool</code> variable to maintain state. This is then exposed to the Cloud API using <code>Spark.function()</code> in <code>setup()</code>. The end result looks like this:\n\n[code language=\"cpp\"]\nbool is_high = false;\n\nint toggle(String args)\n{\n    if(is_high == true)\n    {\n        digitalWrite(D0, LOW);\n        is_high = false;\n    }\n    else\n    {\n        digitalWrite(D0, HIGH);\n        is_high = true;\n    }\n    \n    return 0;\n}\n\nvoid setup() {\n    pinMode(D0, OUTPUT);\n    Spark.function(&quot;toggle&quot;, toggle);\n}\n\nvoid loop() {\n    //Nothing here\n}\n[/code]\n\nFinally, connect an LED to pin D0 of the Core. A recommended circuit is shown below (Using <a href=\"http://www.digikey.co.uk/schemeit\">SchemeIT</a>):\n\n<a href=\"http://ninedof.files.wordpress.com/2014/05/pebble-core-cir.png\"><img src=\"http://ninedof.files.wordpress.com/2014/05/pebble-core-cir.png\" alt=\"pebble-core-cir\" width=\"320\" height=\"481\" class=\"aligncenter size-full wp-image-1944\" /></a>\n\n<strong>Putting It All Together</strong>\nCompile and upload the watchapp to your Pebble, compile and upload the Core firmware to your Core and launch the watchapp when the Core upload is done. You should see something similar to this:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/05/pebble-spark-screen1.png\"><img src=\"http://ninedof.files.wordpress.com/2014/05/pebble-spark-screen1.png\" alt=\"pebble-spark-screen1\" width=\"150\" height=\"175\" class=\"aligncenter size-full wp-image-1945\" /></a>\n\nWhen the Core is breathing cyan and the Pebble watchapp is open, press the SELECT button. The LED should toggle on and off! \n\n<strong>Conclusion</strong>\nThat's a basic overview of the setup to enable the control of Spark Core pins (functions in general) from a Pebble. In the near future I'll write more to cover sending data asynchronously back the other way using <code>Spark.publish()</code> and <code>EventSource</code> JS objects to receive them. \n\nYou can get the sample project code for all stages <a href=\"https://github.com/C-D-Lewis/pebble-spark-link\" title=\"Source code\">here on GitHub</a>. \n\nAny queries or feedback if I've made a JS faux-pas (I'm relatively new!), let me know!",
    "tags": [
      "Integration",
      "Pebble",
      "Spark Core"
    ]
  },
  {
    "id": "1957",
    "title": "Linking Pebble and Spark Core (Part 2)",
    "link": "https://ninedof.wordpress.com/2014/05/13/linking-pebble-and-spark-core-part-2/",
    "pubDate": "Tue, 13 May 2014 21:26:32 +0000",
    "postDate": "2014-05-13 21:26:32",
    "body": "<strong>Note: The JS code may only work on Android devices.</strong>\n\nPart 1: <a href=\"http://ninedof.wordpress.com/2014/05/12/linking-pebble-and-spark-core/\" title=\"Linking Pebble and Spark Core\">Linking Pebble and Spark Core</a>\n\n<strong>Introduction</strong>\n\nIn the last post (linked above) I detailed the basics of connecting a Pebble watchapp's button clicks to a <code>Spark.function()</code> call on a Spark Core. In this post I will go over the reverse process: sending data back to the Pebble asynchronously. Once again this process uses a combination of Spark Cloud, PebbleKit JS and <code>AppMessage</code> to convey the message, which this time will be alerting a Pebble watch wearer that a button connected to the Core has been pressed via a short vibration pulse. \n\n<strong>Preparing Pebble</strong>\n\nThe initial Pebble C program code is similar in structure to the last post's starting point, but without any of the <code>Click</code> functionality, as this will be a receive-only app. Thus the start of your project's main <code>.c</code> file will look like this:\n\n[code language=\"cpp\"]\n#include &lt;pebble.h&gt;\n\n#define KEY_BUTTON_STATE 0\n\nstatic Window *window;\nstatic TextLayer *text_layer;\n\nstatic void window_load(Window *window) \n{\n\t//Create TextLayer\n\ttext_layer = text_layer_create(GRect(0, 0, 144, 168));\n\ttext_layer_set_text(text_layer, &quot;Press button on Core pin D0&quot;);\n\ttext_layer_set_text_alignment(text_layer, GTextAlignmentCenter);\n\tlayer_add_child(window_get_root_layer(window), text_layer_get_layer(text_layer));\n}\n\nstatic void window_unload(Window *window) \n{\n\t//Destroy TextLayer\n\ttext_layer_destroy(text_layer);\n}\n\nstatic void init(void) \n{\n\t//Create Window\n\twindow = window_create();\n\twindow_set_window_handlers(window, (WindowHandlers) {\n\t\t.load = window_load,\n\t\t.unload = window_unload,\n\t});\n\n\t//Prepare AppMessage\n\tapp_message_open(app_message_inbox_size_maximum(), app_message_outbox_size_maximum());\n\n\twindow_stack_push(window, true);\n}\n\nstatic void deinit(void) \n{\n\t//Destroy Window\n\twindow_destroy(window);\n}\n\nint main(void) \n{\n\tinit();\n\tapp_event_loop();\n\tdeinit();\n}\n[/code]\n\nNote that the name of the main <code>AppMessage</code> key has changed to a more appropriate <code>KEY_BUTTON_STATE</code>, but this is arbitrary - the value is still <code>0</code>.\n\nInstead of receiving button clicks, the app will be receiving messages sent from the phone on receiving a message from the Spark Cloud. To do this, we register an <code>AppMessageInboxReceived</code> handler before opening the service:\n\n[code language=\"cpp\"]\napp_message_register_inbox_received((AppMessageInboxReceived) in_recv_handler);\n[/code]\n\nand also declare the function above <code>init()</code>:\n\n[code language=\"cpp\"]\nstatic void in_recv_handler(DictionaryIterator *iterator, void *context)\n{\n\n}\n[/code]\n\nThis handler provides a <code>DictionaryIterator</code> structure that contains the received dictionary. To access the data, we use the <code>dict_read_first()</code> function to extract the tuple. This contains the key and value pair. We will then compare the value <code>cstring</code> and act accordingly (\"HIGH\" for button pressed and pulling pin D0 <code>HIGH</code> on the Core):\n\n[code language=\"cpp\"]\nstatic void in_recv_handler(DictionaryIterator *iterator, void *context)\n{\n\t//Get first tuple (should be KEY_BUTTON_STATE)\n\tTuple *t = dict_read_first(iterator);\n\n\t//If it's there\n\tif(t)\n\t{\n\t\tif(strcmp(&quot;HIGH&quot;, t-&gt;value-&gt;cstring) == 0)\n\t\t{\n\t\t\tvibes_short_pulse();\n\t\t}\n\t}\n}\n[/code]\n\nCompile this and upload to your Pebble to make sure it is ready to work with PebbleKit JS, which we will set up next.\n\n<strong>Preparing PebbleKit JS</strong>\n\nAlso similar to last time, we must setup the JS code to listen for events from the Spark Cloud and send <code>AppMessage</code>s on to the watch. However, this time we do not require jQuery but instead use an object called <code>EventSource</code> that will provide the messages in a callback. This is done in the \"ready\" event handler:\n\n[code language=\"javascript\"]\nPebble.addEventListener(&quot;ready&quot;,\n\tfunction(e) {\n\t\t//Register EventSource listener\n\t\tvar core = new EventSource(&quot;https://api.spark.io/v1/events/?access_token=&quot; + accessToken);\n\t\tcore.addEventListener(&quot;button_state&quot;, \n\t\t\tfunction(response) {\n\t\t\t\t\n\t\t\t}, \n\t\t\tfalse\n\t\t);\n\n\t\tconsole.log(&quot;Pebble JS Ready!&quot;);\n\t}\n);\n[/code]\n\nNote: This requires only your Access Token, not the Device ID. \n\nOnce this callback has been created, it will be executed whenever a Core firmware uses <code>Spark.publish()</code> with the topic \"button_state\". When this event occurs, we will send the accompanying payload, either \"HIGH\" or \"LOW\" (details later) to the Pebble for it to decide whether to vibrate or not. This process looks like this:\n\n[code language=\"javascript\"]\ncore.addEventListener(&quot;button_state&quot;, \n\tfunction(response) {\n\t\t//Interpret response as JSON\n\t\tvar json = JSON.parse(response.data);\n\n\t\tconsole.log(&quot;Payload is '&quot; + json.data + &quot;'&quot;);\n\n\t\t//Send the payload\n\t\tPebble.sendAppMessage(\n\t\t\t{&quot;KEY_BUTTON_STATE&quot;:json.data},\n\t\t\tfunction(e) {\n\t\t\t\tconsole.log(&quot;Sent '&quot; + json.data + &quot;' to Pebble.&quot;);\n\t\t\t},\n\t\t\tfunction(e) {\n\t\t\t\tconsole.log(&quot;Failed to send data to Pebble!&quot;);\n\t\t\t}\n\t\t);\n\t}, \n\tfalse\n);\n[/code]\n\nThe <code>AppMessage</code> dictionary takes the form of a JSON dictionary with the key-value pair consisting of the declared key (remember to alter <code>appinfo.json</code> or the App Keys section in Settings on CloudPebble) and the word \"HIGH\" or \"LOW\" as received from the Core. We also get to register two callbacks for if the message was successful, and if it is not. The above code segment uses this to provide some meaningful log output. \n\nThis completes the setup of the JS segment of the message's journey. With the JS code in place, re-compile and re-upload your Pebble <code>.pbw</code> file to your watch. \n\n<strong>Preparing the Core</strong>\n\nThe last thing to do is to configure the Core to call <code>Spark.publish()</code> to notify the JS and C code we have already set up. This is done in the <code>loop()</code> function and takes the form of a simple <code>if</code>, <code>else</code> statement, depending on whether <code>digitalRead(D0)</code> determines whether the button is pressed. If you don't have a button to hand, you can simulate one by simply touching the 3.3V pin of your core to D0 briefly once the following code is in place and uploaded:\n\n[code language=\"cpp\"]\nstatic bool pressed = false;\n\nvoid setup() {\n    pinMode(D0, INPUT);\n}\n\nvoid loop() {\n    //Publish button state\n    if(digitalRead(D0) == HIGH &amp;&amp; pressed == false)\n    {\n        Spark.publish(&quot;button_state&quot;, &quot;HIGH&quot;);\n        pressed = true;\n        \n        //Rate limit to prevent spamming the cloud\n        delay(500);\n    }\n    else if(digitalRead(D0) == LOW &amp;&amp; pressed == true)\n    {\n        Spark.publish(&quot;button_state&quot;, &quot;LOW&quot;);\n        pressed = false;\n    }\n}\n[/code]\n\nIf you do have a push button to hand, here is how to connect it up, as <a href=\"http://arduino.cc/en/tutorial/button\" title=\"Button\">depicted on the Arduino site</a>, except instead of pin 2, we are using Core pin D0. Once this is done, ensure both watchapp and Core firmware are uploaded and running before pressing the button. The watch should vibrate within a couple of seconds!\n\n<strong>Conclusion</strong>\n\nThere we have an expansion on the original post, showing how to send asynchronous events and data from the Spare Core to the Pebble watch. A slight reduction in latency between the two can be theoretically achieved by calling <code>app_comm_set_sniff_interval(SNIFF_INTERVAL_REDUCED)</code>, although this will consume more power over a long term period.\n\nAs always, the source code to this project can be found <a href=\"https://github.com/C-D-Lewis/pebble-spark-link-2\" title=\"Source code\">here on GitHub</a>.\n\nEnjoy! ",
    "tags": [
      "Integration",
      "Pebble",
      "Spark Core"
    ]
  },
  {
    "id": "1978",
    "title": "Pebble SDK 2.0 Tutorial #9: App Configuration",
    "link": "https://ninedof.wordpress.com/2014/05/24/pebble-sdk-2-0-tutorial-9-app-configuration/",
    "pubDate": "Sat, 24 May 2014 15:15:06 +0000",
    "postDate": "2014-05-24 15:15:06",
    "body": "<strong>Required Reading</strong>\n\n<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #2: Telling the Time.\" href=\"http://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/\">Pebble SDK 2.0 Tutorial #2: Telling the Time</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #3: Images and Fonts\" href=\"http://ninedof.wordpress.com/2013/12/22/pebble-sdk-2-0-tutorial-3-images-and-fonts/\">Pebble SDK 2.0 Tutorial #3: Images and Fonts</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #4: Animations and Timers\" href=\"http://ninedof.wordpress.com/2013/12/29/pebble-sdk-2-0-tutorial-4-animations-and-timers/\">Pebble SDK 2.0 Tutorial #4: Animations and Timers</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations\" href=\"http://ninedof.wordpress.com/2014/01/11/pebble-sdk-2-0-tutorial-5-buttons-and-vibrations/\">Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS\" href=\"http://ninedof.wordpress.com/2014/02/02/pebble-sdk-2-0-tutorial-6-appmessage-for-pebblekit-js/\">Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #7: MenuLayers\" href=\"http://ninedof.wordpress.com/2014/03/13/pebble-sdk-2-0-tutorial-7-menulayers/\">Pebble SDK 2.0 Tutorial #7: MenuLayers</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #8: Android App Integration\" href=\"http://ninedof.wordpress.com/2014/04/03/pebble-sdk-2-0-tutorial-8-android-app-integration/\">Pebble SDK 2.0 Tutorial #8: Android App Integration</a>\n\n<strong>Introduction</strong>\n\nIn this section of the tutorial series we will create a basic app that can be configured from the Pebble app. Lots of watchfaces and watchapps use this functionality to let the user tweak various aspects to their own liking. Watchfaces I've created before SDK 2.0 get around this by having each tweak in a separate watchface package, which lead to having five or six of the same watchface.\n\nI've not yet gotten around to adding configuration to any of my watchfaces (although I plan to in the future) due to the fact that the configuration pages loaded from the Pebble app are not included in the watchapp package itself but are loaded from a remote website, and I have no web hosting to speak of. However, I have since discovered (although I'm sure I'm not the first) that such a page can be hosted on Dropbox. It must be in the Public folder, otherwise it is offered as a download and not as a webpage to view.\n\nLet's get started!\n\n<strong>Watchapp Setup</strong>\nThe watchapp we will be creating will have a single option to keep things simple - the option to invert the colours. To begin with, create a new project and use the following code as a starting point:\n\n[code language=\"cpp\"]\n#include &lt;pebble.h&gt;\n\nstatic Window *window;\nstatic TextLayer *text_layer;\n\nstatic void window_load(Window *window) \n{\n  //Create TextLayer\n  text_layer = text_layer_create(GRect(0, 0, 144, 168));\n  text_layer_set_font(text_layer, fonts_get_system_font(FONT_KEY_GOTHIC_24_BOLD));\n  text_layer_set_text_color(text_layer, GColorBlack);\n  text_layer_set_background_color(text_layer, GColorWhite);\n  text_layer_set_text(text_layer, &quot;Not inverted!&quot;);\n\n  layer_add_child(window_get_root_layer(window), text_layer_get_layer(text_layer));\n}\n\nstatic void window_unload(Window *window) \n{\n  text_layer_destroy(text_layer);\n}\n\nstatic void init(void) \n{\n  window = window_create();\n  window_set_window_handlers(window, (WindowHandlers) {\n    .load = window_load,\n    .unload = window_unload,\n  });\n\n  window_stack_push(window, true);\n}\n\nstatic void deinit(void) \n{\n  window_destroy(window);\n}\n\nint main(void) \n{\n  init();\n  app_event_loop();\n  deinit();\n}\n[/code]\n\nThis should be familiar: a basic app that has a single <code>TextLayer</code> stating that the app is not inverted. The process I've adopted to setup app configuration has the following steps:\n\n1. Setup <code>AppMessage</code> to enable messages containing option data to be sent from PebbleKit JS.\n2. Setup the app to be configurable in <code>appinfo.json</code>, or the Settings page in CloudPebble.\n3. Setup PebbleKit JS code to load the configuration page and send the result to the watch.\n4. Write the HTML page that presents an interface to the user to allow them to choose their options.\n\n<strong>Setting Up AppMessage</strong>\nWe will start by declaring the key we will be using to receive the option to invert the watchapp. Don't forget to declare this in Settings on CloudPebble or in <code>appinfo.json</code> if you are working with the native SDK:\n\n[code language=\"cpp\"]\n#define KEY_INVERT 0\n[/code]\n\nNext, we create the <code>AppMessageInboxReceived</code> handler that will process any received messages. If they contain our key, we will compare the payload value <code>cstring</code> to set the colours of the app to be inverted or not, depending on the value received. We then use the <a title=\"Storage\" href=\"https://developer.getpebble.com/2/api-reference/group___storage.html\">Persistent Storage API</a> to save the result for the next time the watchapp is opened. This should be placed above <code>init()</code> as it will be called there in a moment:\n\n[code language=\"cpp\"]\nstatic void in_recv_handler(DictionaryIterator *iterator, void *context)\n{\n  //Get Tuple\n  Tuple *t = dict_read_first(iterator);\n  if(t)\n  {\n    switch(t-&gt;key)\n    {\n    case KEY_INVERT:\n      //It's the KEY_INVERT key\n      if(strcmp(t-&gt;value-&gt;cstring, &quot;on&quot;) == 0)\n      {\n        //Set and save as inverted\n        text_layer_set_text_color(text_layer, GColorWhite);\n        text_layer_set_background_color(text_layer, GColorBlack);\n        text_layer_set_text(text_layer, &quot;Inverted!&quot;);\n\n        persist_write_bool(KEY_INVERT, true);\n      }\n      else if(strcmp(t-&gt;value-&gt;cstring, &quot;off&quot;) == 0)\n      {\n        //Set and save as not inverted\n        text_layer_set_text_color(text_layer, GColorBlack);\n        text_layer_set_background_color(text_layer, GColorWhite);\n        text_layer_set_text(text_layer, &quot;Not inverted!&quot;);\n\n        persist_write_bool(KEY_INVERT, false);\n      }\n      break;\n    }\n  }\n}\n[/code]\n\nThe final step is to actually open <code>AppMessage</code> to enable communication with the phone. Do this in <code>init()</code>:\n\n[code language=\"cpp\"]\napp_message_register_inbox_received((AppMessageInboxReceived) in_recv_handler);\napp_message_open(app_message_inbox_size_maximum(), app_message_outbox_size_maximum());\n[/code]\n\nNote we used the <code>app_message_inbox_size_maximum()</code> and <code>app_message_outbox_size_maximum()</code> functions to get the maximum buffer sizes available. While not strictly required here, it is a good best practice. I've wasted a lot of time in past projects not realising the buffer sizes I'd chosen were too small!\n\nThe final step is to set up the app to load the last stored configuration when the app is restarted, and takes for form of a similar <code>if</code>, <code>else</code> as the <code>AppMessageInboxReceived</code> handler above. Again, we use the Persistent Storage API to get our last saved configuration value. The <code>window_load()</code>function becomes thus:\n\n[code language=\"cpp\"]\nstatic void window_load(Window *window) \n{\n  //Check for saved option\n  bool inverted = persist_read_bool(KEY_INVERT);\n\n  //Create TextLayer\n  text_layer = text_layer_create(GRect(0, 0, 144, 168));\n  text_layer_set_font(text_layer, fonts_get_system_font(FONT_KEY_GOTHIC_24_BOLD));\n\n  //Option-specific setup\n  if(inverted == true)\n  {\n    text_layer_set_text_color(text_layer, GColorWhite);\n    text_layer_set_background_color(text_layer, GColorBlack);\n    text_layer_set_text(text_layer, &quot;Inverted!&quot;);\n  }\n  else\n  {\n    text_layer_set_text_color(text_layer, GColorBlack);\n    text_layer_set_background_color(text_layer, GColorWhite);\n    text_layer_set_text(text_layer, &quot;Not inverted!&quot;);\n  }\n\n  layer_add_child(window_get_root_layer(window), text_layer_get_layer(text_layer));\n}\n[/code]\n\nNow the C code is complete!\n\n<strong>PebbleKit JS Setup</strong>\nThe PebbleKit JS component of the app is the part responsible for loading the configuration page and sends the results of the user interaction to the watch to be processed as we just set up. This is done through the \"showConfiguration\" and \"webviewclosed\" events. Here is our initial JS code. Add a new JS file in CloudPebble or to the <code>src/js/pebble-js-app.js</code> if coding natively:\n\n[code language=\"javascript\"]\nPebble.addEventListener(&quot;ready&quot;,\n  function(e) {\n    console.log(&quot;PebbleKit JS ready!&quot;);\n  }\n);\n[/code]\n\nSo far, so simple. Next, we add an event listener for the \"showConfiguration\" event, triggered when a user chooses the Settings button in the Pebble app, like that shown below:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/05/screenshot_2014-05-24-15-04-23.png\"><img class=\"aligncenter  wp-image-1982\" src=\"http://ninedof.files.wordpress.com/2014/05/screenshot_2014-05-24-15-04-23.png?w=545\" alt=\"Screenshot_2014-05-24-15-04-23\" width=\"299\" height=\"531\" /></a>\n\nThe job of this event listener is to call <code>Pebble.openURL()</code>, a requirement of the system. This is when the configuration page is loaded (we will design this later). As stated in the introduction a good place to store this file is in your Public Dropbox folder. This way it is shown as a webpage and not as a download. Use mine for the moment, but if you want to make any changes you will need to change this to point to your own file:\n\n[code language=\"javascript\"]\nPebble.addEventListener(&quot;showConfiguration&quot;,\n  function(e) {\n    //Load the remote config page\n    Pebble.openURL(&quot;https://dl.dropboxusercontent.com/u/10824180/pebble%20config%20pages/sdktut9-config.html&quot;);\n  }\n);\n[/code]\n\nWhen the user has chosen their options and closed the page, the \"webviewclosed\" event is fired. We will register another event listener to handle this. The data returned will be encoded in the URL as a JSON dictionary containing one element: \"invert\" which will have a value of either \"on\" or \"off\" depending on what the user chose. This is then assembled into an <code>AppMessage</code> and sent to the watch, which then sets and saves as appropriate:\n\n[code language=\"javascript\"]\nPebble.addEventListener(&quot;webviewclosed&quot;,\n  function(e) {\n    //Get JSON dictionary\n    var configuration = JSON.parse(decodeURIComponent(e.response));\n    console.log(&quot;Configuration window returned: &quot; + JSON.stringify(configuration));\n\n    //Send to Pebble, persist there\n    Pebble.sendAppMessage(\n      {&quot;KEY_INVERT&quot;: configuration.invert},\n      function(e) {\n        console.log(&quot;Sending settings data...&quot;);\n      },\n      function(e) {\n        console.log(&quot;Settings feedback failed!&quot;);\n      }\n    );\n  }\n);\n[/code]\n\nThat concludes the PebbleKit JS setup. Now for the last part - HTML!\n\n<strong>Configuration HTML Page Setup</strong>\nThe final piece of the puzzle is the part the user will actually see and takes the form of a HTML page consisting of form elements such as checkboxes, selectors and buttons. We will just use one selector and one button to let the user choose if they want the watchapp to be inverted or not. Here's the layout code:\n\n[code language=\"html\"]\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;SDKTut9 Configuration&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Pebble Config Tutorial&lt;/h1&gt;\n    &lt;p&gt;Choose watchapp settings&lt;/p&gt;\n\n    &lt;p&gt;Invert watchapp:\n    &lt;select id=&quot;invert_select&quot;&gt;\n      &lt;option value=&quot;off&quot;&gt;Off&lt;/option&gt;\n      &lt;option value=&quot;on&quot;&gt;On&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n    &lt;button id=&quot;save_button&quot;&gt;Save&lt;/button&gt;\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n[/code]\n\nWith this done we add a script to add a click listener to the button and a function to assemble the JSON option dictionary. This dictionary is then encoded into the URL and handed to the PebbleKit JS code to be sent to the watch in the \"webviewclosed\" event. Insert this into the HTML page:\n\n[code language=\"javascript\"]\n&lt;script&gt;\n  //Setup to allow easy adding more options later\n  function saveOptions() {\n    var invertSelect = document.getElementById(&quot;invert_select&quot;);\n\n    var options = {\n      &quot;invert&quot;: invertSelect.options[invertSelect.selectedIndex].value\n    }\n    \n    return options;\n  };\n\n  var submitButton = document.getElementById(&quot;save_button&quot;);\n  submitButton.addEventListener(&quot;click&quot;, \n    function() {\n      console.log(&quot;Submit&quot;);\n\n      var options = saveOptions();\n      var location = &quot;pebblejs://close#&quot; + encodeURIComponent(JSON.stringify(options));\n      \n      document.location = location;\n    }, \n  false);\n&lt;/script&gt;\n[/code]\n\nThat completes the page that will get the user's option choices and also the app itself! Compile the app and install on your watch. By choosing either 'On' or 'Off' on the configuration page you should be able to toggle the colour used in the watchapp. This should look like that shown below:\n\n<a href=\"http://ninedof.files.wordpress.com/2014/05/invert-notinvert.png\"><img src=\"http://ninedof.files.wordpress.com/2014/05/invert-notinvert.png?w=545\" alt=\"invert-notinvert\" width=\"545\" height=\"163\" class=\"aligncenter size-large wp-image-1983\" /></a>\n\n<strong>Conclusion</strong>\n\nSo, that's the process I've adopted to set up app configuration. You can expand it by adding more <code>AppMessage</code> keys and more elements in the HTML page. Make sure to add the fields to the JSON object constructed in <code>saveOptions()</code> though. \n\nAs usual, the full code is <a href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-9\" title=\"Source Code\">available on GitHub</a>. ",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "1996",
    "title": "New Pebble Watchapp: BBC News Headlines",
    "link": "https://ninedof.wordpress.com/2014/05/29/new-pebble-watchapp-bbc-news-headlines/",
    "pubDate": "Thu, 29 May 2014 22:35:06 +0000",
    "postDate": "2014-05-29 22:35:06",
    "body": "<strong>Updates:\n15/07/14 - Added option to change story detail view font size.\n\n31/5/14 - The news category and number of items is now exposed as a configuration page\n\n18/06/14 - v1.2.0 streams stories instead of pre-loading them for extra speed. Configuration page now shows version numbers and update news.</strong>\n\nMost of my Pebble apps so far have either been watchfaces or control watchapps - those that control a camera (<a title=\"Watch Trigger on Google Play\" href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchtrigger\">Watch Trigger</a>), SMS sending (<a title=\"Wristponder on Google Play\" href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.wristponder\">Wristponder</a>) or radios (<a title=\"Data Toggle on Google Play\" href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.datatoggle\">Data Toggle</a>). Another (and some would say the primary use of a Pebble smartwatch) is to be a data display device, rather than data input. With this in mind I decided to make a watchapp that I would myself use on a daily basis that involved data fetching and formatting for display. News is the obvious application that came to me, so after studying the BBC's public news RSS feeds I came up with this:\n\n<a href=\"https://ninedof.files.wordpress.com/2014/05/bbc-news.png\"><img class=\"aligncenter size-full wp-image-1997\" src=\"http://ninedof.files.wordpress.com/2014/05/bbc-news.png\" alt=\"bbc news\" width=\"487\" height=\"174\" /></a>When the user opens the watchapp, PebbleKit JS fetches the latest data from the <a title=\"RSS feed\" href=\"http://feeds.bbci.co.uk/news/rss.xml\">RSS feed</a> and creates 15 Story objects that contain the headline and the short description of the news story. These are streamed (using ACK callbacks for maximum speed) to the watch and displayed in a <code>MenuLayer</code> to the user. When the user clicks SELECT on a news item, the full summary is shown. The splash screen also uses my <a title=\"ProgressBarLayer repo\" href=\"https://github.com/C-D-Lewis/pebble-progressbar-layer\">recently developed</a> <code>ProgressBarLayer</code> object to show download progress.\n\nUsing the configuration skill recently gained from finally experimenting it is possible (and I'd like to do it) to use the configuration process to allow the user to choose their news category (such as Science and Technology or Sport), but for now the main headlines seem enough.\n\nYou can get this app from the <a title=\"Appstore link\" href=\"https://apps.getpebble.com/applications/5387b383f60819963900000e\">Pebble Appstore</a>. Enjoy!\n\n&nbsp;",
    "tags": [
      "Integration",
      "Pebble"
    ]
  },
  {
    "id": "2016",
    "title": "SMS Repeater",
    "link": "https://ninedof.wordpress.com/2014/06/15/sms-repeater/",
    "pubDate": "Sun, 15 Jun 2014 00:22:14 +0000",
    "postDate": "2014-06-15 00:22:14",
    "body": "<a href=\"https://ninedof.files.wordpress.com/2014/06/smsrepeater.png\"><img class=\"aligncenter  wp-image-2017\" src=\"http://ninedof.files.wordpress.com/2014/06/smsrepeater.png\" alt=\"smsrepeater\" width=\"170\" height=\"170\" /></a>\n\nMy mum recently got a new phone, a Moto G, after my recommendation. It's a big step up from Samsung S8000 Jet she had before (one of Samsung's last phones before adopting Android, and which had a beta version of Android 2.1 a.k.a JetDroid installed, <a title=\"JetDroid Guide\" href=\"http://www.jetdroid.org/forum/viewtopic.php?f=11&amp;t=18\">which I had a small hand in</a>).\n\nOne of the features she liked most about it was the option to have the SMS tone repeat every minute, which was useful if it went off when she was out of hearing range (this handset was before notification LEDs or smartwatches!). This feature was markedly missing from Android 4.4.2 KitKat which is currently on here phone, so I offered to create an app to emulate this feature, because I could and wanted to see if I could.\n\nAfter two hours, a brief foray into <code>Timer</code>s, <code>AlarmManager</code>s, <code>AsyncTask</code>s and <code>Handler</code>s, I arrived at a solution that uses a <code>BroadcastReceiver</code> to detect an incoming SMS, start a <code>Service</code> once every 1, 2, 5 or 10 minutes using an <code>AlarmManager Alarm</code> and re-emit the default notification tone. This cycle is broken when the keyguard is removed when the phone is unlocked to answer the SMS. She was very pleased to have the feature back, which makes up for the predictive keyboard I forced on her!\n\n<a href=\"https://ninedof.files.wordpress.com/2014/06/repeater-screeny.png\"><img class=\"aligncenter  wp-image-2018\" src=\"http://ninedof.files.wordpress.com/2014/06/repeater-screeny.png?w=545\" alt=\"repeater-screeny\" width=\"318\" height=\"564\" /></a>\n\nIf anyone is interested in using this or taking it further (I'm sure there are already many apps like this!), you can <a title=\"Source Code\" href=\"https://github.com/C-D-Lewis/sms-repeater\">find the source code here</a>.",
    "tags": [
      "Android"
    ]
  },
  {
    "id": "2040",
    "title": "Pebble SDK 2.0 Tutorial #10: Event Services",
    "link": "https://ninedof.wordpress.com/2014/07/15/pebble-sdk-2-0-tutorial-10-event-services/",
    "pubDate": "Tue, 15 Jul 2014 14:16:42 +0000",
    "postDate": "2014-07-15 14:16:42",
    "body": "<strong>Required Reading</strong>\n\n<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #2: Telling the Time.\" href=\"http://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/\">Pebble SDK 2.0 Tutorial #2: Telling the Time</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #3: Images and Fonts\" href=\"http://ninedof.wordpress.com/2013/12/22/pebble-sdk-2-0-tutorial-3-images-and-fonts/\">Pebble SDK 2.0 Tutorial #3: Images and Fonts</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #4: Animations and Timers\" href=\"http://ninedof.wordpress.com/2013/12/29/pebble-sdk-2-0-tutorial-4-animations-and-timers/\">Pebble SDK 2.0 Tutorial #4: Animations and Timers</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations\" href=\"http://ninedof.wordpress.com/2014/01/11/pebble-sdk-2-0-tutorial-5-buttons-and-vibrations/\">Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS\" href=\"http://ninedof.wordpress.com/2014/02/02/pebble-sdk-2-0-tutorial-6-appmessage-for-pebblekit-js/\">Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #7: MenuLayers\" href=\"http://ninedof.wordpress.com/2014/03/13/pebble-sdk-2-0-tutorial-7-menulayers/\">Pebble SDK 2.0 Tutorial #7: MenuLayers</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #8: Android App Integration\" href=\"http://ninedof.wordpress.com/2014/04/03/pebble-sdk-2-0-tutorial-8-android-app-integration/\">Pebble SDK 2.0 Tutorial #8: Android App Integration</a>\n\n<a title=\"Pebble SDK 2.0 Tutorial #9: App Configuration\" href=\"http://ninedof.wordpress.com/2014/05/24/pebble-sdk-2-0-tutorial-9-app-configuration/\">Pebble SDK 2.0 Tutorial #9: App Configuration</a>\n\n<strong>Introduction</strong>\n\nIn this section of the tutorial series, I will be covering some of the Event Services introduced in the 2.0 version of the Pebble SDK which have been oft requested due to their popularity in newer, interactive watchfaces. Namely:\n<ul>\n\t<li>Bluetooth Connection Service</li>\n\t<li>Battery State Service</li>\n\t<li>Accelerometer Service (tap and raw)</li>\n\t<li>App Focus Service (not covered, but works <strong>identically</strong> to the Bluetooth Connection Service)</li>\n</ul>\n<strong>Setup</strong>\n\nTo begin with, we will be using the blank template from before, shown below for convenience. Create a new CloudPebble project and start a new C file with the template as its contents:\n\n[code language=\"cpp\"]\n#include &lt;pebble.h&gt;\n\nstatic Window* window;\n\nstatic void window_load(Window *window)\n{\n\n}\n\nstatic void window_unload(Window *window)\n{\n\n}\n\nstatic void init()\n{\n  window = window_create();\n  WindowHandlers handlers = {\n    .load = window_load,\n    .unload = window_unload\n  };\n  window_set_window_handlers(window, (WindowHandlers) handlers);\n  window_stack_push(window, true);\n}\n\nstatic void deinit()\n{\n  window_destroy(window);\n}\n\nint main(void)\n{\n  init();\n  app_event_loop();\n  deinit();\n}\n[/code]\n\n<strong>Bluetooth Connection Service</strong>\nThe first Event Service we will be using is the Bluetooth Connection Service, which allows us to see the current connection status as well as subscribe to updates (only while Bluetooth is actually connected, so be careful with debug logs), much in the same way as with the <code>TickTimerService</code>. Firstly, we will create a <code>TextLayer</code> in <code>window_load()</code> to use for showing the events happening. First is the global pointer:\n\n[code language=\"cpp\"]\nstatic TextLayer *bt_layer;\n[/code]\n\nthen creation proper in <code>window_load()</code>. Note the use of <code>bluetooth_connection_service_peek()</code> to show the state of the connection at the time of creation. As always we also add the corresponding destruction function call to free memory:\n\n[code language=\"cpp\"]\nstatic void window_load(Window *window)\n{\n  //Setup BT Layer\n  bt_layer = text_layer_create(GRect(5, 5, 144, 30));\n  text_layer_set_font(bt_layer, fonts_get_system_font(FONT_KEY_GOTHIC_18));\n  if(bluetooth_connection_service_peek() == true)\n  {\n    text_layer_set_text(bt_layer, &quot;BT: CONNECTED&quot;);\n  }\n  else\n  {\n    text_layer_set_text(bt_layer, &quot;BT: DISCONNECTED&quot;);\n  }\n  layer_add_child(window_get_root_layer(window), text_layer_get_layer(bt_layer));\n}\n\nstatic void window_unload(Window *window)\n{\n  text_layer_destroy(bt_layer);\n}\n[/code]\n\nNext we will subscribe to the <code>BluetoothConnectionService</code> to update this <code>TextLayer</code> whenever the status of the Bluetooth connection to the phone changes. Like a <code>TickHandler</code>, we start by creating a function to use as a handler with the correct signature, and fill it with logic to change the text displayed. This should be placed before <code>init()</code>, where it will be registered:\n\n[code language=\"cpp\"]\nstatic void bt_handler(bool connected)\n{\n  if(connected == true)\n  {\n    text_layer_set_text(bt_layer, &quot;BT: CONNECTED&quot;);\n  }\n  else\n  {\n    text_layer_set_text(bt_layer, &quot;BT: DISCONNECTED&quot;);\n  }\n}\n[/code]\n\nThe final step is to perform the actual subscription, which is very easy to do, and happens in <code>init()</code>:\n\n[code language=\"cpp\"]\n//Subscribe to BluetoothConnectionService\nbluetooth_connection_service_subscribe(bt_handler);\n[/code]\n\nAfter compiling and installing the project, try disconnecting and re-connecting your phone's Bluetooth radio a few times and observe the result.\n\n<strong>Battery State Service</strong>\nThe next Event Service we will be adding will be the Battery State Service, which provides information on the Pebble's battery. It provides more detail than a simple <code>bool</code>, including charging status and whether the cable is plugged in or not. As before, we will create a new <code>TextLayer</code> to show the output. Add the pointer to the last one in the declaration:\n\n[code language=\"cpp\"]\nstatic TextLayer *bt_layer, *batt_layer;\n[/code]\n\nThen, perform the proper creation in <code>window_load()</code>. This time, the information provided by the Battery State Service comes in the form on the <code>BatteryChargeState</code> data structure, with fields <a title=\"BatteryChargeState\" href=\"https://developer.getpebble.com/2/api-reference/group___battery_state_service.html#struct_battery_charge_state\">as shown in the documentation</a>. It is worth noting that the Service only returns the battery charge in increments of 10. The setup of the new <code>TextLayer</code> is shown below:\n\n[code language=\"cpp\"]\n//Setup Battery Layer\nbatt_layer = text_layer_create(GRect(5, 25, 144, 30));\ntext_layer_set_font(batt_layer, fonts_get_system_font(FONT_KEY_GOTHIC_18));\nlayer_add_child(window_get_root_layer(window), text_layer_get_layer(batt_layer));\n\n//Get info, copy to long-lived buffer and display\nBatteryChargeState state = battery_state_service_peek();\nstatic char buffer[] = &quot;Battery: 100/100&quot;;\nsnprintf(buffer, sizeof(&quot;Battery: 100/100&quot;), &quot;Battery: %d/100&quot;, state.charge_percent);\ntext_layer_set_text(batt_layer, buffer);\n[/code]\n\nAfter re-compiling, the battery charge percentage should be shown below the Bluetooth status.\n\n<strong>Accelerometer Service (tap)</strong>\nThe Accelerometer Service operates in a very similar manner to the previous two Event Services, but can operate in two modes: tap and raw data. The tap mode will call a handler that we subscribe when the Pebble is tapped (or wrist is shaken), whereas the raw data mode will supply X, Y and Z values at an rate we select. I'll show both of these for the sake of completeness. An application of the latter mode <a title=\"Block Game using Pebble Accelerometer\" href=\"http://ninedof.wordpress.com/2014/04/24/block-game-using-pebble-accelerometer/\">can be seen here</a>.\n\nFirst, we create a further <code>TextLayer</code> to show the output data:\n\n[code language=\"cpp\"]\nstatic TextLayer *bt_layer, *batt_layer, *accel_layer;\n[/code]\n\nThe first mode we will use is the tap mode. Let's create the <code>TextLayer</code> proper in <code>window_load()</code>:\n\n[code language=\"cpp\"]\n//Setup Accel Layer\naccel_layer = text_layer_create(GRect(5, 45, 144, 30));\ntext_layer_set_font(accel_layer, fonts_get_system_font(FONT_KEY_GOTHIC_18));\ntext_layer_set_text(accel_layer, &quot;Accel tap: N/A&quot;);\nlayer_add_child(window_get_root_layer(window), text_layer_get_layer(accel_layer));\n[/code]\n\nNext, we will create the handler function to be called whenever a tap is detected, and furnish it with logic to show what kind of tap was detected:\n\n[code language=\"cpp\"]\nstatic void accel_tap_handler(AccelAxisType axis, int32_t direction)\n{\n  switch(axis)\n  {\n  case ACCEL_AXIS_X:\n    if(direction &gt; 0)\n    {\n      text_layer_set_text(accel_layer, &quot;Accel tap: X (+)&quot;);\n    }\n    else\n    {\n      text_layer_set_text(accel_layer, &quot;Accel tap: X (-)&quot;);\n    }\n    break;\n  case ACCEL_AXIS_Y:\n    if(direction &gt; 0)\n    {\n      text_layer_set_text(accel_layer, &quot;Accel tap: Y (+)&quot;);\n    }\n    else\n    {\n      text_layer_set_text(accel_layer, &quot;Accel tap: Y (-)&quot;);\n    }\n    break;\n  case ACCEL_AXIS_Z:\n    if(direction &gt; 0)\n    {\n      text_layer_set_text(accel_layer, &quot;Accel tap: Z (+)&quot;);\n    }\n    else\n    {\n      text_layer_set_text(accel_layer, &quot;Accel tap: Z (-)&quot;);\n    }\n    break;\n  }\n}\n[/code]\n\nFinally, we subscribe our handler function to the Accelerometer Event Service in <code>init()</code>:\n\n[code language=\"cpp\"]\n//Subscribe to AccelerometerService\naccel_tap_service_subscribe(accel_tap_handler);\n[/code]\n\nYou should now be able to see the result of tapping the watch. Personally I've found that shaking the wrist is a more reliable way of triggering events (such as showing more information on a watchface), but taps can still be used as an option.\n\n<strong>Accelerometer Service (raw data)</strong>\nFinally, we will use the raw data mode of the Accelerometer Service. To do this, we will first remove the existing Accelerometer Service subscription (but still keep the handler for reference).\n\nIn the raw data mode, the data values arrive at a specific interval chosen with a call to <code>accel_service_set_sampling_rate()</code>, and the number of samples in a batch can be chosen using <code>accel_service_set_samples_per_update()</code>. We will stick with the default rate and update size for simplicity. Be aware that this mode will drain the battery significantly faster than the tap mode.\n\nNext, we will create a new handler function to let us access the data that arrives from the Event Service. Accessing the data is as simple as reading the fields in the <code>data</code> parameter in the handler, as shown below:\n\n[code language=\"cpp\"]\nstatic void accel_raw_handler(AccelData *data, uint32_t num_samples)\n{\n  static char buffer[] = &quot;XYZ: 9999 / 9999 / 9999&quot;;\n  snprintf(buffer, sizeof(&quot;XYZ: 9999 / 9999 / 9999&quot;), &quot;XYZ: %d / %d / %d&quot;, data[0].x, data[0].y, data[0].z);\n  text_layer_set_text(accel_layer, buffer);\n}\n[/code]\n\nFinally, we add the new subscription, making sure we have disabled the one one in <code>init()</code>:\n\n[code language=\"cpp\"]\n//Subscribe to AccelerometerService (uncomment one to choose)\n//accel_tap_service_subscribe(accel_tap_handler);\naccel_data_service_subscribe(1, accel_raw_handler);\n[/code]\n\nNow this is all in place, re-compile and re-install the watch app to see the live values. Try tilting the watch in each axis to see the <a title=\"g\" href=\"http://en.wikipedia.org/wiki/Standard_gravity\">constant g acceleration</a> act on each in turn.\n\nThe final result should look like this:\n<a href=\"https://ninedof.files.wordpress.com/2014/07/final.png\"><img class=\"aligncenter size-full wp-image-2054\" src=\"http://ninedof.files.wordpress.com/2014/07/final.png\" alt=\"final\" width=\"150\" height=\"174\" /></a>\n\n<strong>Conclusion</strong>\nSo, that's the new Event Services. As I mentioned, there is another called the App Focus Service which tells you when your app is covered by a notification, but it works in a very similar way to the Bluetooth Connection Service, so you should be able to figure it out!\n\nThe full source code can be <a title=\"Tutorial 10 source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-10\">found here on GitHub</a>.",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "2044",
    "title": "Graduation Watchface",
    "link": "https://ninedof.wordpress.com/2014/07/10/graduation-watchface/",
    "pubDate": "Thu, 10 Jul 2014 00:31:11 +0000",
    "postDate": "2014-07-10 00:31:11",
    "body": "Later today I will be (finally!) graduating from university, and to mark the occasion I will be wearing a special watchface bearing the university's coat of arms, which will be a cool example to show anyone who asks about my Pebble. Exciting!\n\n\n<a href=\"https://ninedof.files.wordpress.com/2014/07/wpid-wp-1404952202778.png\"><img title=\"wp-1404952202778\" class=\"alignnone size-full\" alt=\"image\" src=\"https://ninedof.files.wordpress.com/2014/07/wpid-wp-1404952202778.png\" /></a>",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "2097",
    "title": "CL Pebble Apps + SDK Tutorials",
    "link": "https://ninedof.wordpress.com/2014/07/26/cl-pebble-apps-sdk-tutorials/",
    "pubDate": "Sat, 26 Jul 2014 14:55:49 +0000",
    "postDate": "2014-07-26 14:55:49",
    "body": "CL Pebble Apps (formerly Watch App Selector) now has a third tab; SDK Tutorial. It's been an idea I've had for a while, but only just got around to implementing.\n\nThis means that as well as being able to install all my published watch apps and watchfaces, users can now also see a list and be linked to my Pebble SDK tutorials.\n\n<a href=\"https://ninedof.files.wordpress.com/2014/07/screenshot_2014-07-26-15-10-48.png\"><img class=\"aligncenter size-medium wp-image-2098\" src=\"http://ninedof.files.wordpress.com/2014/07/screenshot_2014-07-26-15-10-48.png?w=168\" alt=\"Screenshot_2014-07-26-15-10-48\" width=\"168\" height=\"300\" /></a>\n\nNeat! If I write more parts to the tutorial, this app will be updated as it will for new versions of the other watch apps and watchfaces.\n\n<a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.watchappselector\"><img class=\"aligncenter\" src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" alt=\"Get it on Google Play\" /></a>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "2107",
    "title": "ColorLayer for Pebble",
    "link": "https://ninedof.wordpress.com/2014/07/29/colorlayer-for-pebble/",
    "pubDate": "Tue, 29 Jul 2014 14:55:30 +0000",
    "postDate": "2014-07-29 14:55:30",
    "body": "<strong>Edit: 100th post!</strong>\n\nQuick post to share  a 'new' <code>Layer</code> type I created for an upcoming project: <code>ColorLayer</code>. It's supposed to be a convenience for adding a simple layer of colour. Problem is, unless I'm missing something very obvious, the two options are to declare a standard <code>Layer</code> and assign it a basic <code>_fill_rect()</code> <code>LayerUpdateProc</code>, or use a <code>TextLayer</code> and modifying the background colours.\n\nI normally choose the latter, so for the umpteenth time of doing so I decided to wrap it up to make it a bit simpler to use. Here's the result!\n\n<strong>ColorLayer.h</strong>\n[code language=\"cpp\"]\n/**\n * Layer on top of TextLayer used just for coloring areas without using LayerUpdateProc\n * Author: Chris Lewis (@Chris_DL)\n * Version 1.0.0\n */\n#include &lt;pebble.h&gt;\n\n#ifndef COLOR_LAYER_H\n#define COLOR_LAYER_H\n\ntypedef struct {\n\tTextLayer *layer;\n} ColorLayer;\n\nColorLayer* color_layer_create(GRect bounds, GColor fill_color);\nvoid color_layer_destroy(ColorLayer *this);\nvoid color_layer_set_color(ColorLayer *this, GColor fill_color);\nvoid color_layer_set_frame(ColorLayer *this, GRect bounds);\nLayer* color_layer_get_layer(ColorLayer *this);\n\n#endif\n[/code]\n\n<strong>ColorLayer.c</strong>\n[code language=\"cpp\"]\n#include &quot;color_layer.h&quot;\n\nColorLayer* color_layer_create(GRect bounds, GColor fill_color)\n{\n\tColorLayer *this = malloc(sizeof(ColorLayer));\n\tthis-&gt;layer = text_layer_create(bounds);\n\ttext_layer_set_background_color(this-&gt;layer, fill_color);\n\n\treturn this;\n}\n\nvoid color_layer_destroy(ColorLayer *this)\n{\n\ttext_layer_destroy(this-&gt;layer);\n\tfree(this);\n}\n\nvoid color_layer_set_color(ColorLayer *this, GColor fill_color)\n{\n\ttext_layer_set_background_color(this-&gt;layer, fill_color);\n}\n\nvoid color_layer_set_frame(ColorLayer *this, GRect bounds)\n{\n\tlayer_set_frame(text_layer_get_layer(this-&gt;layer), bounds);\n}\n\nLayer* color_layer_get_layer(ColorLayer *this)\n{\n\treturn text_layer_get_layer(this-&gt;layer);\n}\n[/code]\n\nIt could be argued that it's such a thin layer you may as well not bother, but I find it to be sufficiently easier to setup and read (as well as avoiding confusion with <code>TextLayer</code>s that actually show text), so once again I'm glad coding allows a degree of personal preference and style!",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "2126",
    "title": "Wristponder for Pebble v2.5.0",
    "link": "https://ninedof.wordpress.com/2014/08/12/wristponder-for-pebble-v2-5-0/",
    "pubDate": "Tue, 12 Aug 2014 23:23:34 +0000",
    "postDate": "2014-08-12 23:23:34",
    "body": "<p>A not insignificant amount of time after starting work on this update, it is finally here!</p><p>New features include:</p><p>- All data to be synchronised is now done in a streaming manner after each <code>Window</code> appears, meaning no more waiting for sync!<br /> - Favourite contacts are now chosen using the Android Contact Picker, and not from five (potentially very large) spinners.<br /> - The debug log can now be read and reported from the Settings screen. This makes reporting bugs to me much simpler.</p><p>Here's a before and after shot of the Favourites selection <code>Activity</code>:</p><p><a href=\"https://ninedof.files.wordpress.com/2014/08/favourite-selection.png\"><img class=\"aligncenter size-large wp-image-2128\" src=\"http://ninedof.files.wordpress.com/2014/08/favourite-selection.png?w=545\" alt=\"favourite-selection\" width=\"545\" height=\"496\" /></a></p><p>There is only really one major comment to make that arose during development for this version, and that's on the subject of an Android <code>Activity</code> in KitKat. I came across a a strange behaviour when launching the Pebble Android app to install the watchapp. It appears that in the event that the user chooses 'Install Watchapp' from Wristponder Settings, completes the installation and returns to the Settings <code>Activity</code>, they will not be able to launch any new ones such as Favourites or Import for anywhere between 10 to 45 seconds. On top of this any spamming of buttons done by a bemused user results in just as many launches when the <code>Activity</code>s requested are eventually delivered.</p><p>The only evidence of this in a single logcat output something along the lines of \"Waited long enough for ServiceRecord\" (unable to reproduce it at the time of writing, which is a good thing!) and <a title=\"StackOverflow\" href=\"http://stackoverflow.com/questions/21512469/my-service-always-getting-waited-long-enough-for-servicerecord-error-in-kitkat\">this is the only link</a> I can find on the subject. Apparently its to do with serializing launches from background services, although none of my launches are <code>Services</code>.</p><p>Anyway, that is the only problem with this release, and I feel that Wristponder is now a pretty solid and smooth piece of software. For this I am proud!</p><p><strong>Download</strong><br /> <a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.wristponder\"> <img src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" alt=\"Get it on Google Play\" /><br /> </a></p>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "2146",
    "title": "Dashboard 1.3: Toggle Order Configuration",
    "link": "https://ninedof.wordpress.com/2014/09/09/dashboard-1-3-toggle-order-configuration/",
    "pubDate": "Tue, 09 Sep 2014 04:23:48 +0000",
    "postDate": "2014-09-09 04:23:48",
    "body": "<p>Just released Dashboard 1.3!</p><p>The major new feature in this version is the ability to dynamically re-order the toggles to suit your preference. The way this works involves selecting each position in an Android Spinner in the 'Configure' tab:</p><p><a href=\"https://ninedof.files.wordpress.com/2014/09/screenshot_2014-09-07-19-46-17.png\"><img class=\"alignnone  wp-image-2144\" src=\"http://ninedof.files.wordpress.com/2014/09/screenshot_2014-09-07-19-46-17.png?w=576\" alt=\"Screenshot_2014-09-07-19-46-17\" width=\"303\" height=\"534\" /></a></p><p> </p><p>Each time a user makes a selection in one of the positions, the rest of the Spinner array is checked to look for a duplicate of the toggle the user has just chosen, and switches the two around. For example, if the user changes the Wi-Fi toggle to Autosync, the first toggle becomes Autosync and then the existing Autosync Spinner duplicate is changed to the only other missing toggle type - Wi-Fi!</p><p>This means that the toggles can be any order possible, such as the examples below:</p><p><a href=\"https://ninedof.files.wordpress.com/2014/09/toggle-config.png\"><img class=\"alignnone size-full wp-image-2145\" src=\"http://ninedof.files.wordpress.com/2014/09/toggle-config.png\" alt=\"toggle-config\" width=\"512\" height=\"174\" /></a></p><p>That's a total of P(8,8) = 40320!</p><p> </p>",
    "tags": [
      "Android",
      "Pebble",
      "Releases"
    ]
  },
  {
    "id": "2151",
    "title": "Trends on Pebble and Spark Core",
    "link": "https://ninedof.wordpress.com/2014/09/19/trends-on-pebble-and-spark-core/",
    "pubDate": "Fri, 19 Sep 2014 06:59:02 +0000",
    "postDate": "2014-09-19 06:59:02",
    "body": "Not a lot has been happening on this blog for the last few weeks, and the reason for that is that I have been busy beginning my internship at Pebble! It's been a great experience so far (<a href=\"https://developer.getpebble.com/sdk/\">We released SDK 2.5 today!</a>) and I can't wait to work on more awesome things to help make Pebble even more useful smartwatch.\n\nThat being said, I've been able to find time to maintain and update my public Pebble apps at weekends, and hope to continue this pattern whenever I can, because I have some ideas I want to implement even just for myself.\n\nA result of this is a new application of my <a href=\"http://ninedof.wordpress.com/2014/05/04/configurable-spark-core-connected-lcd/\">Spark Core driven LCD project</a> in collaboration with a new colleague to display social media trends from <a href=\"http://www.whatthetrend.com\">WhatTheTrend</a> on animated cards on Pebble, and as an added bonus show the same information on the LCD display. \n\nAfter some teething issues, it was eventually presentable and works pretty well - but for some reason only on Wi-Fi. Here's a photo of the whole thing in action. (Eduardo Sasha is imprinted on my brain now from all the testing...)\n\n<a href=\"https://ninedof.files.wordpress.com/2014/09/wpid-wp-1411109854910.jpeg\"><img title=\"wp-1411109854910\" class=\"alignnone size-full\" alt=\"image\" src=\"https://ninedof.files.wordpress.com/2014/09/wpid-wp-1411109854910.jpeg\" /></a>\n\n\n\nStay tuned for coming updates to Dashboard and Wristponder, as well as bringing Watch Trigger up to date as well!",
    "tags": [
      "Integration",
      "JavaScript",
      "Pebble",
      "Spark Core"
    ]
  },
  {
    "id": "2156",
    "title": "Pebble Library: ToastLayer For Pop Up Notifications",
    "link": "https://ninedof.wordpress.com/2014/10/17/pebble-library-toastlayer-for-pop-up-notifications/",
    "pubDate": "Fri, 17 Oct 2014 04:36:31 +0000",
    "postDate": "2014-10-17 04:36:31",
    "body": "A while ago I created a simple <a title=\"Pebble Alert Lib\" href=\"https://github.com/C-D-Lewis/pebble-alert-lib\">Alert Library</a>, which provides functions to show and hide a set of layers to show an 'alert window' for a time that tells the user of an event without changing Window.\n\n<a href=\"https://ninedof.files.wordpress.com/2014/10/screenshot.png\"><img class=\"aligncenter size-full wp-image-2157\" src=\"https://ninedof.files.wordpress.com/2014/10/screenshot.png\" alt=\"screenshot\" width=\"148\" height=\"172\" /></a>\n\nContinuing this theme, today I created another similar library called the <a title=\"ToastLayer\" href=\"https://github.com/C-D-Lewis/ToastLayer\">ToastLayer</a>, which has two advantages over the Alert Library:\n\n1. The toast notification animates up from the bottom, instead of covering the majority of the Window.\n\n2. It is designed as an object, like any of the other Layers in the Pebble SDK. This means there can be more than one!\n\nFeel free to use it to show notifications without changing Window! I will probably look into including this in some of my existing apps.",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "2161",
    "title": "New Pebble Library: PGE (formerly PGame)",
    "link": "https://ninedof.wordpress.com/2014/10/25/new-pebble-library-pgame/",
    "pubDate": "Sat, 25 Oct 2014 19:48:24 +0000",
    "postDate": "2014-10-25 19:48:24",
    "body": "For a couple of my existing <a href=\"https://apps.getpebble.com/applications/529e8742d7894b189c000012\" title=\"Pebble Tube Status\">watchapps</a> and <a href=\"https://apps.getpebble.com/applications/52cd48ecc296577c6c00002f\" title=\"Starfield Smooth\">watchfaces</a> I have implemented a smooth animation using an <code>AppTimer</code>. This involves something like the snippet below:\n\n[code language=\"c\"]\nstatic void some_layer_update_proc(Layer *layer, GContext *ctx) {\n  // Graphics calls\n\n}\n\nstatic void timer_handler(void *context) {\n  // Update frame\n  layer_mark_dirty(some_layer);\n\n  // Finally schedule next frame\n  app_timer_register(34, timer_handler, NULL);\n}\n\n...\n\nstatic void start_animation() {\n  // Schedule first frame to start loop\n  layer_set_update_proc(some_layer, some_layer_update_proc);\n  app_timer_register(34, timer_handler, NULL);\n}\n[/code]\n\nAs you can see, after the first frame is scheduled with an <code>AppTimer</code>, the timer's handler schedules the next, and so an infinite loop is born. After implementing this multiple times, it occurred to me that I could make this process easier to set up, even if it was just for myself. \n\nThe result of this is a new library called <a href=\"https://github.com/C-D-Lewis/pge\" title=\"pge\">pge</a>, which creates an object that handles this looping of game logic and rendering per-frame for you, similar to STL. It also handles button clicks with an easier abstraction for the developer. Here's a quick example of usage, from the GitHub README file:\n\n[code language=\"c\"]\n#include &quot;pge.h&quot;\n\nstatic PGE *s_game;\n\nvoid loop() {\n\n}\n\nvoid draw(GContext *ctx) {\n\n}\n\nvoid click(int button_id) {\n\n}\n\n...\n\ns_game = pge_begin(s_window, loop, draw, click);\n[/code]\n\nThis will start a 30 FPS loop that calls the developer's implementation of <code>draw()</code> and <code>loop()</code> every frame, and <code>click()</code> when a button is clicked. The developer can then check the button ID as usual using the Pebble SDK constants, such as <code>BUTTON_ID_UP</code>. The loop will end and the <code>PGE</code> can be destroyed as part of a normal <code>Window</code>'s lifecycle:\n\n[code language=\"c\"]\nstatic void main_window_unload(Window *window) {\n  // Destroy all game resources\n  pge_finish(s_game);\n}\n[/code]\n\nThe GitHub repo also includes a sample app where I implemented a simple 'game' of controlling a 'robot', using select to start/stop the robot and the up and down buttons to rotate its direction of travel. \n\n<img src=\"https://raw.githubusercontent.com/C-D-Lewis/pge/master/screenshots/screenshot1.png\" alt=\"Robot game\" />\n\nI'm currently working on implementing an <code>Entity</code> object that can be added to a list for automatic looping and rendering by the <code>PGE</code>. This will eventually also allow collision, as well as couple of other useful features.\n\nIf you are thinking of creating such a game, this library can hopefully help get you started. Let me know when you end up creating! The repo can be <a href=\"https://github.com/C-D-Lewis/pge\" title=\"pge repo\">found here</a>.",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "2175",
    "title": "Dashboard for Pebble v1.11: When Bugs Attack",
    "link": "https://ninedof.wordpress.com/2014/11/09/dashboard-for-pebble-v1-11-when-bugs-attack/",
    "pubDate": "Sun, 09 Nov 2014 05:48:43 +0000",
    "postDate": "2014-11-09 05:48:43",
    "body": "Over the last week, there have been have been four version of Dashboard released (9, 10, 11 and now 12) following the inclusion of the <a href=\"http://pbldev.io/wakeup\">Wakeup API</a>. I used this shiny new firmware feature to let users of Dashboard schedule daily wakeups to issue an on/off command to the Dashboard Android app, at times they would use the toggles anyway.\n\n<a href=\"https://ninedof.files.wordpress.com/2014/11/pebble-screenshot_2014-11-08_21-37-47.png\"><img class=\"alignnone size-full wp-image-2176\" src=\"https://ninedof.files.wordpress.com/2014/11/pebble-screenshot_2014-11-08_21-37-47.png\" alt=\"pebble-screenshot_2014-11-08_21-37-47\" width=\"144\" height=\"168\" /></a>    <a href=\"https://ninedof.files.wordpress.com/2014/11/pebble-screenshot_2014-11-08_21-38-04.png\"><img class=\"alignnone size-full wp-image-2177\" src=\"https://ninedof.files.wordpress.com/2014/11/pebble-screenshot_2014-11-08_21-38-04.png\" alt=\"pebble-screenshot_2014-11-08_21-38-04\" width=\"144\" height=\"168\" /></a>\n\n<a href=\"https://ninedof.files.wordpress.com/2014/11/pebble-screenshot_2014-11-08_21-38-21.png\"><img class=\"alignnone size-full wp-image-2178\" src=\"https://ninedof.files.wordpress.com/2014/11/pebble-screenshot_2014-11-08_21-38-11.png\" alt=\"pebble-screenshot_2014-11-08_21-38-11\" width=\"144\" height=\"168\" />    <img class=\"alignnone size-full wp-image-2179\" src=\"https://ninedof.files.wordpress.com/2014/11/pebble-screenshot_2014-11-08_21-38-21.png\" alt=\"pebble-screenshot_2014-11-08_21-38-21\" width=\"144\" height=\"168\" /></a>\n<blockquote>A new 'HOLD' icon prompts access to the scheduling feature, including list of existing events and UI to create new ones.</blockquote>\nA personal example of this is that every night at about midnight I turn off WiFi on my phone to save power through the night using Tasker. Now, I can remove the Tasker icon from the status bar and use Dashboard to carry out the action instead. Of course, Tasker didn't require me to keep my Bluetooth on overnight, but it's a small price to pay for automated control of Android radios!\n\nWhen adding such a complex feature (Dashboard itself went from two main code files to eight and ~600 to ~1300 lines of code), bugs will occur. Some will be code-based, such as not handling setting two wakeups for the same time (which the system will not allow) and warning the user, and some are behavioral.\n\nAt the moment, the Pebble appstore will not always update the released watchapp when a new version is uploaded. This can make co-ordinating a release with Google Play Store very difficult. Users were prompted to 'update watchapp from Android app'. What I intended was for them to use the 'Install Watchapp' button in the Dashboard Android app to get the bundled compatible version, but in reality they were unloading and reloading the watchapp from the Pebble app locker, which ended up with them still having the old version. And so the loop continued until some concerned users emailed me about it. In all cases I clarified the correct procedure and every case was fixed. So now that process is hopefully a bit more explicit!",
    "tags": [
      "Android",
      "Pebble",
      "Releases"
    ]
  },
  {
    "id": "2182",
    "title": "Dashboard for Pebble 1.13 - Lollipop Consequences",
    "link": "https://ninedof.wordpress.com/2014/11/23/dashboard-for-pebble-1-13-lollipop-consequences/",
    "pubDate": "Sun, 23 Nov 2014 00:51:00 +0000",
    "postDate": "2014-11-23 00:51:00",
    "body": "Dashboard for Pebble is now version 1.13. This version contains a new Materially design, as well as fixes to the Data and ringer toggles as a result of the changes in Android 5.0 Lollipop.\n\nThe major point to note is that the method reflection I was using to implement the Data <a href=\"http://stackoverflow.com/questions/26539445/the-setmobiledataenabled-method-is-no-longer-callable-as-of-android-l-and-later\">relied on an internal API</a> in the ConnectivityManager class (which has existed in Android since very early versions). This API has since been moved to a more system-exclusive location (the Telephony class) that cannot be invoked using method reflection and as such the feature stopped working on Android 5.\n\nBeing one of the main features of Dashboard (and half the sole purpose in the <a title=\"New Watchapp: Data Toggle for Pebble (Android)\" href=\"http://ninedof.wordpress.com/2013/12/21/new-watchapp-data-toggle-for-pebble/\">original Data Toggle watchapp</a>), this outcome was unacceptable. After searching for an alternative and finding nothing but <a href=\"https://code.google.com/p/android/issues/detail?id=78084\">similarly disgruntled Android developers</a>, I came across a <a href=\"http://forum.xda-developers.com/android/apps-games/app-toggle-data-5-0-widget-to-toggle-t2937936\">widget developer named Cygery</a> who had found a way to implement this behavior in Android 5, and after a brief email exchange I was informed of his method, which was quite ingenious.\n\nAs a result, full functionality has been restored on Android 5, but at a large price - <strong>the feature now requires root privileges</strong> to change that particular settings. This is obviously not ideal, but the only way I can see the feature working beyond Android 5. Users on KitKat and below remain unaffected and the app should work as it did for them. Therefore, the Dashboard Android app will request root when it starts, as well as post a notification if the Data toggle is used and root access is not given. Most SuperUser apps will allow this access to be given on a per-app basis, so please allow this if you are a Android 5 user and need to use the Data toggle.\n\n<strong>Download</strong>\n<a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.dashboard\">\n<img src=\"https://developer.android.com/images/brand/en_generic_rgb_wo_60.png\" alt=\"Get it on Google Play\" />\n</a>",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "2190",
    "title": "Open Image on Pebble Time",
    "link": "https://ninedof.wordpress.com/2015/03/17/open-image-on-pebble-time/",
    "pubDate": "Tue, 17 Mar 2015 06:11:32 +0000",
    "postDate": "2015-03-17 06:11:32",
    "body": "Long time no blog! There hasn't been much time for experimentation (besides creating a couple of <a title=\"Isotime\" href=\"https://github.com/pebble-hacks/isotime\">color</a> <a title=\"block-world\" href=\"https://github.com/pebble-hacks/block-world\">apps</a> for Pebble Time) in the months leading up the <a title=\"Pebble Time Kickstarter\" href=\"https://www.kickstarter.com/projects/597507018/pebble-time-awesome-smartwatch-no-compromises\">Pebble Time Kickstarter</a>. Totally worth the effort though, after seeing the response to the <a title=\"Pebble Developers\" href=\"https://developer.getpebble.com/getting-started/\">new material</a> on the Pebble Developers site.\n\nThis weekend, however, I found some time to bring to reality an idea I have had since I first learned of the ability to make color apps for Pebble. Being a big fan of PebbleKit Android (used in Dashboard, Wristponder, Watch Trigger etc) to remotely control/access the connected phone. The idea is this: create an app for Android that registers as a receptor of opening image files. This app then resizes and reduces the color palette of the file before piping it to an automatically opening watchapp for viewing. This stemmed partly from a desire to avoid constantly changing resource files and recompiling a simple app for viewing PNG files every time I wanted to see how a new image looked on Pebble Time.\n\nThe implementation was pretty straightforward: Make a simple Android app that included an Intent filter for image files, and a watchapp that simply accepted data packets and stored them in the image data allocated for a GBitmap of the right size. The difficulty came in the signaling between the two. I'm no stranger to establishing communication schemes between Android and Pebble apps, but I'm only human. For some reason I was trying to use a mix of PebbleDataReceivers and PebbleAckReceivers. The former is for processing messages from the watch, and the latter is for reacting to the event that the watch acknowledges a message from the phone. By sending the next data packet in an 'ACK' handler, you can ensure maximum transmission speed as no time is wasted between the watch processing one packet and being ready for the next. This is the same method that apps like Wristponder use for transferring lots of data (try 30 canned responses!). If you're not careful, mixing these two modes (one of which can be considered manual, the other semi-automatic when set up in a continuous data transmission loop) can result in puzzling behavior that is difficult to debug.\n\nOnce debugged, however, the result is an app that sends a complete uncompressed image (save that for another day) 24k image to the watch in about 11 - 16 seconds (approx 2 kB/s) and then displays it on the watch. In the meantime, both the Android and Pebble apps show the progress of the transfer:\n\n<a href=\"https://ninedof.files.wordpress.com/2015/03/screenshot_2015-03-08-18-41-59.png\"><img class=\" size-medium wp-image-2191 alignleft\" src=\"https://ninedof.files.wordpress.com/2015/03/screenshot_2015-03-08-18-41-59.png?w=169\" alt=\"Screenshot_2015-03-08-18-41-59\" width=\"169\" height=\"300\" /><img class=\" size-medium wp-image-2192 alignleft\" src=\"https://ninedof.files.wordpress.com/2015/03/screenshot_2015-03-08-18-19-10.png?w=169\" alt=\"Screenshot_2015-03-08-18-19-10\" width=\"169\" height=\"300\" /></a>\n\n<a href=\"https://ninedof.files.wordpress.com/2015/03/transfer.png\"><img class=\" size-full wp-image-2193 alignright\" src=\"https://ninedof.files.wordpress.com/2015/03/transfer.png\" alt=\"transfer\" width=\"144\" height=\"168\" /></a>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\nThe app sends a built-in image of a tree as a default option when it is launched by itself, or another image if presented one using 'Open With' actions, such as from file managers or emails. The result of sending the tree image is thus:\n\n<a href=\"https://ninedof.files.wordpress.com/2015/03/img_20150308_182032-e1425865838845.jpg\"><img class=\"aligncenter size-medium wp-image-2195\" src=\"https://ninedof.files.wordpress.com/2015/03/img_20150308_182032-e1425865838845.jpg?w=242\" alt=\"IMG_20150308_182032\" width=\"242\" height=\"300\" /></a>\n\nFor some reason I can't quite fathom the color reduction process the app uses (admittedly brittle bit shifting) doesn't handle all files as well, producing discolored results, which I will try and iron out with a better solution, perhaps in the Android SDK itself. When that day comes, I'll polish both app components and hopefully make another Google Play app of it (free, of course, this doesn't do anything particularly useful) and also a two-part library generalized to facilitating large data transfers between phone and watch.\n\nWatch this space!\n\n&nbsp;",
    "tags": [
      "Android",
      "Pebble"
    ]
  },
  {
    "id": "2203",
    "title": "First Pebble Timeline App - BBC News",
    "link": "https://ninedof.wordpress.com/2015/04/05/first-pebble-timeline-app-bbc-news/",
    "pubDate": "Sun, 05 Apr 2015 13:19:24 +0000",
    "postDate": "2015-04-05 13:19:24",
    "body": "<strong>Introduction</strong>\n\nAs a side-effect of being involved with the development and testing of the new Pebble timeline experience, I've been eager to try my hand at exploiting this new mechanism to bring timely updates to users of BBC News (which as with most of my apps, began as an app for personal use) with timeline pins.\n\n<strong>The Concept</strong>\n\nAs you may know from reading the <a title=\"timeline guides\" href=\"https://developer.getpebble.com/guides/timeline/\">Pebble Developers timeline guides</a>, Pebble watchapps can now incorporate a purely web-based element to display data from web data sources (such as the <a href=\"http://feeds.bbci.co.uk/news/rss.xml\">BBC News feeds</a>) on the timeline. This is ideal for chronological events such as news stories, as each pin is shown on the timeline according to date.\n\nPins can also include notifications that appear when they are first created or updated, keeping the user informed as details change. This functionality is used to show a notification each time a new news story is available. The pin itself includes only the icon (standard timeline pin icon) and the title, which is the main title of the story. In addition, timeline pins can have actions associated with them, enabling the user to launch the associated watchapp (whose API key is used to push the pins) and pass a single integer as a context argument. My idea was to use this action ability to enable the pin to open the <a href=\"https://apps.getpebble.com/applications/5387b383f60819963900000e\">BBC News watchapp</a> to show the full story details, since a very long timeline pin body was a poor scrolling experience.\n\n<strong>The Problem</strong>\n\nThe fundamental question was this; <em><strong>How does one tell the watchapp which story to show from the pin using a single integer?</strong> </em>The first guess was to specify the <code>launchCode</code> (the argument) as the position in the array of downloaded news stories. This would work for a very recent pin only, as the order of news stories in the feed changes frequently as new stories are added and removed from the headlines. After an hour or two, the order would change and an existing pin would possess a <code>launchCode</code> pointing to the same array location, but no longer guaranteed to be the same story.\n\n<strong>Implementation</strong>\n\nThe solution I ended up choosing came from <a href=\"https://apps.getpebble.com/applications/52ff6a14432d1cef0000007c\">Wristponder</a>, which uses a checksum of the persisted list of responses on the Android and Pebble sides, prompting a re-download to the watch if the two do not match (i.e.: The user has modified their list of responses). Thus the procedure to open a news story from its pin is this:\n\n1. Backend server running on <a href=\"https://www.digitalocean.com/\">DigitalOcean</a> downloads the RSS feed from the BBC every half an hour, using a function to create a list of story objects from the XML;\n\n[code language=\"js\"]\nvar parseFeed = function(responseText) {\n  var items = [];\n  var longestTitle = 0;\n  var longestDesc = 0;\n  while(responseText.indexOf('&lt;title&gt;') &gt; 0 &amp;&amp; items.length &lt; MAX_ITEMS) {\n    //Title\n    var title = responseText.substring(responseText.indexOf('&lt;title&gt;') + '&lt;title&gt;'.length);\n    title = title.substring(0, title.indexOf('&lt;/title&gt;'));\n    responseText = responseText.substring(responseText.indexOf('&lt;/title&gt;') + '&lt;/title&gt;'.length);\n\n    //Desc\n    var desc = responseText.substring(responseText.indexOf('&lt;description&gt;') + '&lt;description&gt;'.length);\n    desc = desc.substring(0, desc.indexOf('&lt;/description&gt;'));\n\n    // Date\n    var date = responseText.substring(responseText.indexOf('&lt;pubDate&gt;') + '&lt;pubDate&gt;'.length);\n    date = date.substring(0, date.indexOf('&lt;/pubDate&gt;'));\n\n    //Add\n    var s = { 'title': title, 'description': desc, 'date': date };\n    items.push(s);\n\n    // Metrics\n    Log('Story '+ items.length + ': ' + s.title + ' // ' + s.description);\n    Log('(' + s.title.length + 'x' + s.description.length + ')');\n    if(s.title.length &gt; longestTitle) {\n      longestTitle = s.title.length;\n    }\n    if(s.description.length &gt; longestDesc) {\n      longestDesc = s.description.length;\n    }\n\n    // Next\n    responseText = responseText.substring(responseText.indexOf('&lt;/description&gt;') + '&lt;/description&gt;'.length);\n  }\n\n  Log('parseFeed(): Extracted ' + items.length + ' items.');\n  Log('parseFeed(): Longest title/description: ' + longestTitle + '/' + longestDesc);\n  return items;\n};\n[/code]\n\n2. Backend uses story titles, publish dates and checksums of the titles to push a pin for each story. The id field of each pin is a prefix followed by the Unix timestamp of the pubDate RSS field (as an easy solution of a fairly unique number from each story). The checksum is generated by simply adding all the character codes in each title, then specifying this number as the 'Open Story' <a href=\"https://developer.getpebble.com/guides/timeline/pin-structure/#pin-actions\">pin action's lanchCode</a>;\n\n[code language=\"js\"]\nvar pin = {\n  'id': 'bbcnews-story-' + pubDate.unix(),\n  'time': pubDate.toDate(),\n  'layout': {\n    'type': 'genericPin',\n    'tinyIcon': 'system://images/TIMELINE_PIN_TINY',\n    'title': gStories[i].title,\n    'subtitle': 'BBC News Headline'\n  },\n  'createNotification': {\n    'layout': {\n    'type': 'genericPin',\n    'tinyIcon': 'system://images/TIMELINE_PIN_TINY',\n    'title': gStories[i].title,\n    'subtitle': 'BBC News Headline'\n    }\n  },\n  'actions': [\n    {\n      'title': 'Open Story',\n      'type': 'openWatchApp',\n      'launchCode': checksum(gStories[i].title)\n    }\n  ]\n};\n[/code]\n\n3. These pins are filtered for duplicates and staleness by the Pebble timeline public API, then pushed through the Pebble mobile app to the user's watch. This is demanded by a subscription to the 'headlines' topic that all users are subscribed to when they first launch the BBC News watchapp (this will be optional in the first release).\n\n4. The user selects a BBC News story from their timeline and chooses the 'Open Story' pin action. This opens the watchapp with the launch_get_args() value set as the checksum stored in the pin when it was originally generated. If the <code>launchCode</code> is not zero, a pin was specified;\n\n[code language=\"c\"]\n#ifdef PBL_PLATFORM_APLITE\n\n// Timeline not available, give me ALL the stories!\ncomm_request(COMM_MODE_LIST, 0);\n\n#elif PBL_PLATFORM_BASALT\n\n// Is launchCode specified from a pin?\nint launch_code = launch_get_args();\n\nif(launch_code == 0) {\n  // Get all stories\n  comm_request(COMM_MODE_LIST, 0);\n\n  stories_window_set_desc_text(&quot;Updating...&quot;);\n} else if(launch_reason() == APP_LAUNCH_TIMELINE_ACTION) {\n  // Check this checksum, JS!\n  comm_request(COMM_MODE_PIN, launch_code);\n\n  stories_window_set_desc_text(&quot;Getting pin story...&quot;);\n}\n\n#endif\n[/code]\n\n5. The watchapp sends the checksum for the pin in question to PebbleKit JS, which downloads the latest feed from the BBC News site and checks the query checksum against checksums of all the stories downloaded. First, the checksum is obtained from the watch's <code>AppMessage</code>;\n\n[code language=\"js\"]\nif(hasKey(dict, 'KEY_ACTION')) {\n  gLaunchCode = getValue(dict, 'KEY_ACTION');\n  Log('TIMELINE PIN LAUNCH CODE: ' + gLaunchCode + '\\n\\n\\n');\n\n  // Download stories, and match the titles to the pin\n  download(persistRead('category', 'headlines'), findPinWithHash);\n}\n[/code]\n\nNext, the matching story is found;\n\n[code language=\"js\"]\nfunction findPinWithHash(responseText) {\n  //Strip metadata\n  var spool = responseText.substring(responseText.indexOf('&lt;item&gt;') + '&lt;item&gt;'.length);\n  gQuantity = 30; // Get all\n\n  var stories = parseFeed(spool);\n  Log('Finding title with launchCode=' + gLaunchCode + ' in list of ' + stories.length + ' stories');\n\n  var found = false;\n  for(var i = 0; i &lt; stories.length; i += 1) {\n    var check = checksum(stories[i].title);\n    if('' + check == '' + gLaunchCode) {\n      Log('Found! check=' + check + ', gLaunchCode=' + gLaunchCode);\n\n      // Send to phone\n      var dict = {\n        'KEY_ACTION': 0,\n        'KEY_TITLE': stories[i].title,\n        'KEY_DESCRIPTION': stories[i].description\n      };\n      Pebble.sendAppMessage(dict, function() {\n        Log('Sent pin data to watch!');\n        found = true;\n      });\n    }\n  }\n\n  // Not found?\n  if(found == false) {\n    var dict = {\n      'KEY_FAILED': 1\n    };\n    Pebble.sendAppMessage(dict, function() {\n      Log('Informed Pebble of failure to find story.');\n    },\n    function(err) {\n      Log('Failed to inform of failure!');\n    });\n  }\n}\n[/code]\n\n6. If the story is still relatively recent (this can vary) and a checksum match is found, the story's full title and body are sent to the watchapp for display to the user. The RSS feed also contains links to thumbnails already formatted to 144 pixels in width, which is ideally placed to be a possible future feature.\n\n<strong>Results</strong>\n\nThe resulting flow looks something like the image below, which is still a work in progress:\n\n<a href=\"https://ninedof.files.wordpress.com/2015/04/pin.png\"><img class=\"aligncenter size-full wp-image-2209\" src=\"https://ninedof.files.wordpress.com/2015/04/pin.png\" alt=\"pin\" width=\"545\" height=\"195\" /></a>\n\nThis new layout will be available soon (once bugs are worked out) for Aplite users of the existing BBC News Headlines watchapp, in color on Basalt for those with Pebble Time watches (admittedly few right now!). Stay tuned!",
    "tags": [
      "Integration",
      "Pebble"
    ]
  },
  {
    "id": "2218",
    "title": "Opening Images on Pebble: Now With Intent Import!",
    "link": "https://ninedof.wordpress.com/2015/04/20/opening-images-on-pebble-now-with-intent-import/",
    "pubDate": "Mon, 20 Apr 2015 00:55:37 +0000",
    "postDate": "2015-04-20 00:55:37",
    "body": "A few weeks ago I wrote about transmitting images to Pebble Time from Android, as a quick and convenient way to open any image via an Intent and display it on the watch. At that time, I had problems sending some types of images, where only the blue channel appeared to make it across correctly. The only exception appeared to be the image bundled in the Android app's resources, which always displayed correctly.\n\nAfter a getting and re-write of the flaky transmission system (and a bonus first-time working solution!), I now have the app in a state where any image opened with the Android app from a file manager will be resized to fit the Pebble screen and transmitted for display.\n\nNow, the focus will be to enable cropping and scaling of the image in the Android app to let the user choose which part of the image to display (as a photo shown on the watch loses detail somewhat!). In the meantime, here are some images!\n\n<strong>Original Image (<a href=\"http://forum.kerbalspaceprogram.com/threads/113008-Riding-Asteroids\">credit to gmiezis!</a>)</strong>\n\n<a href=\"https://ninedof.files.wordpress.com/2015/04/11034411_954803447872213_3799211289901104533_o.jpg\"><img class=\"alignnone size-medium wp-image-2219\" src=\"https://ninedof.files.wordpress.com/2015/04/11034411_954803447872213_3799211289901104533_o.jpg?w=212\" alt=\"11034411_954803447872213_3799211289901104533_o\" width=\"212\" height=\"300\" /></a>\n\n<strong>Imported to the Android app</strong>\n\n<a href=\"https://ninedof.files.wordpress.com/2015/04/screenshot_2015-04-19-17-45-46.png\"><img class=\"alignnone wp-image-2220 \" src=\"https://ninedof.files.wordpress.com/2015/04/screenshot_2015-04-19-17-45-46.png?w=576\" alt=\"Screenshot_2015-04-19-17-45-46\" width=\"204\" height=\"363\" /></a>\n\n<strong>Image on Pebble Time</strong>\n\n<a href=\"https://ninedof.files.wordpress.com/2015/04/img_20150419_174608.jpg\"><img class=\"alignnone wp-image-2221 \" src=\"https://ninedof.files.wordpress.com/2015/04/img_20150419_174608.jpg?w=660\" alt=\"IMG_20150419_174608\" width=\"493\" height=\"370\" /></a>",
    "tags": [
      "Android",
      "Integration",
      "Pebble"
    ]
  },
  {
    "id": "2223",
    "title": "Revisiting Beam Up for Pebble with SDK 3.0",
    "link": "https://ninedof.wordpress.com/2015/04/28/revisiting-beam-up-for-pebble-with-sdk-3-0/",
    "pubDate": "Tue, 28 Apr 2015 03:12:21 +0000",
    "postDate": "2015-04-28 03:12:21",
    "body": "According to the Pebble dev portal, the last version of Beam Up to be released was December 14th, 2014. If I remember correctly, that version was the much required update that rolled all the different versions (inverted, with date, with battery etc.) into one version. This was a move away from the SDK 1.x hangover where app config pages did not exist, so multiple apps were required.\n\nThe SDK has come a long way since then, with the latest release (3.0-dp9) released today, after much testing. The biggest change this time around is deprecating the <code>InverterLayer</code> element, popularly used to add a quick black-on-white effect to many watchfaces, as it no longer makes sense in a world of 64 colors.\n\nHow do you invert a color? As I found out during my degree course, techniques applied to colors (and even grayscale) cannot be easily applied to color in the same way. A prime example from that work was the techniques involved in <a title=\"Morphology\" href=\"http://en.wikipedia.org/wiki/Mathematical_morphology\">Mathematical Morphology</a> and utilized ordering of pixels heavily. A white pixel can be defined as 'greater' than a black pixel, a grayscale pixel with value 128 can be 'lesser' than one with a value of 238, and so on. This enabled the implementation of various filters that went on to enable the automatic counting of tree canopies. But the last part of the work was adapting these techniques for color images. The crucial question was this: how can you decide whether one color is 'greater' than another? There were several options, with no clear leader in terms of logic. Was the 'greater' color:\n<ul>\n\t<li>The one with the largest single component?</li>\n\t<li>The one with the largest averaged value?</li>\n\t<li>The one with the largest total component value?</li>\n</ul>\nThe answer I chose was borne out of a piece I read arguing that the human eye is more sensitive to green light (perhaps a hangover from living in the verdant wilderness?), and so proposed that the colors be ordered with a preference for the green component, and this gave good results.\n\nThe same problem exists when placing a Pebble <code>InverterLayer</code> over another color in a Layer beneath it: what's the inverse of yellow? Is it:\n<ul>\n\t<li>The inverted color according to classic opposites?</li>\n\t<li>The inverted bits in the byte representation?</li>\n\t<li>The inverted values of the RGB channels?</li>\n</ul>\nSo it was removed, and APIs added to <code>MenuLayer</code> (the chief user of the <code>InverterLayer</code> in the system) to allows developers to specify their own choice of colors for menu items when each is selected. A more general approach I adopted to enable me to continue to develop Beam Up (a handy coincidence when I wanted to add color themes) is to have the developer specify two colors, and use the frame buffer API to invert then to each other wherever they appear. This approach worked really well, and enables any color combination desired as an artificial 'inversion'; especially useful for adding themes to Beam Up. These take the form of pairs of colors, selectable in presets (for now!) in the app config page.\n\nThe image below shows three of the new themes in action: blue, green and midnight. Classic, Inverted Classic, Red, and Yellow are also initially available.\n<p style=\"text-align:center;\"><a href=\"https://ninedof.files.wordpress.com/2015/04/themes.png\"><img class=\"alignnone size-full wp-image-2224\" src=\"https://ninedof.files.wordpress.com/2015/04/themes.png\" alt=\"themes\" width=\"660\" height=\"296\" /></a></p>\n<p style=\"text-align:left;\">The new version is <a title=\"Appstore link\" href=\"https://apps.getpebble.com/applications/5299d4da129af7d723000079\">available on the Pebble appstore</a>. On Aplite (Pebble, Pebble Steel) it behaves as it ever did, except now the config page remembers your choices from last time you saved. On Basalt, the new themes are available, using the new pseudo-<code>InverterLayer</code>, called <a title=\"InverterLayerCompat code\" href=\"https://github.com/C-D-Lewis/beam-up/blob/master/src/shim/InverterLayerCompat.h\"><code>InverterLayerCompat</code></a> in the code. This is still <a title=\"Source code\" href=\"https://github.com/C-D-Lewis/beam-up\">available in full on GitHub</a>!</p>",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "2226",
    "title": "Isometric Library in Java",
    "link": "https://ninedof.wordpress.com/2015/05/03/isometric-library-in-java/",
    "pubDate": "Sun, 03 May 2015 19:44:07 +0000",
    "postDate": "2015-05-03 19:44:07",
    "body": "A feverish evening spent with little else to do resulted in a quick port of my <a href=\"http://github.com/C-D-Lewis/isometric\">isometric Pebble library</a> to Java Canvas with Graphics2D. Might prove useful for an isometric tile game or such if the mood takes me. There's something distinctly satisfying about seeing the same results on a different platform.\n\n<a href=\"https://ninedof.files.wordpress.com/2015/05/screenshot.png\"><img class=\"alignnone size-full wp-image-2227\" src=\"https://ninedof.files.wordpress.com/2015/05/screenshot.png\" alt=\"screenshot\" width=\"660\" height=\"520\" /></a>\n\nTo use, create a context where a <code>Graphics2D</code> object is available, then use static methods of the <code>Isometric</code> class to draw stuff.\n\n[code language=\"java\"]\npublic void program(Graphics2D g2d) {\n  // Black background\n  g2d.setColor(Color.BLACK);\n  g2d.fillRect(0, 0, Build.WINDOW_SIZE.width, Build.WINDOW_SIZE.height);\n\n  Isometric.drawRect(g2d, new Vec3(100, 100, 100), new Dimension(100, 100), Color.BLUE);\n  Isometric.fillRect(g2d, new Vec3(50, 50, 50), new Dimension(50, 50), Color.RED);\n\n  Isometric.fillBox(g2d, new Vec3(150, 150, 150), new Dimension(25, 25), 25, Color.YELLOW);\n  Isometric.drawBox(g2d, new Vec3(150, 150, 150), new Dimension(25, 25), 25, Color.BLACK);\n}\n[/code]\n\nYou can see all the applicable code <a title=\"GitHub repo\" href=\"https://github.com/C-D-Lewis/isometric-java\">on GitHub</a>.",
    "tags": [
      "Java",
      "Pebble"
    ]
  },
  {
    "id": "2230",
    "title": "News Headlines for Pebble v1.5: New Design, Timeline Pins & On-Watch Config",
    "link": "https://ninedof.wordpress.com/2015/05/10/news-headlines-for-pebble-v1-5-new-design-timeline-pins-on-watch-config/",
    "pubDate": "Sun, 10 May 2015 22:52:59 +0000",
    "postDate": "2015-05-10 22:52:59",
    "body": "On <a title=\"New Pebble Watchapp: BBC News Headlines\" href=\"https://ninedof.wordpress.com/2014/05/29/new-pebble-watchapp-bbc-news-headlines/\">May 29th, 2014</a> I released 'BBC News Headlines', an app I had used personally for a while to read BBC News stories on my wrist to keep up on current affairs with minimal effort. With the config page, I added some settings (category selection, font size, etc.) and it worked well.\n\nWhen I learned about the concept behind the timeline, one of my first thoughts was \"I can use this!\". I had the idea to add timeline pins to the app, as well as update it for Pebble Time to use colors, pins, as well as a new 'cards' design (as recommended by Pebble's new <a title=\"D&amp;I Guides\" href=\"https://developer.getpebble.com/guides/design-and-interaction/\">Design and Interaction</a> guides, which you should check out!) to replace the unnecessary menu screen. I did this, which <a title=\"First Pebble Timeline App – BBC News\" href=\"https://ninedof.wordpress.com/2015/04/05/first-pebble-timeline-app-bbc-news/\">you can read about</a> when the app was half-way through redesign.\n\nNow the re-design is finished, the timeline integration improved (reduced push interval, custom colors, aggressive de-duplication and status reporting to the watchapp), and config page moved into the app itself, removing a need for an external page entirely. I also added a whole bunch of polish behind the scenes, with persistent storage of the last downloaded news stories, timeout and disconnection handling, adaptive scrolling and subtle animations etc.\n<p style=\"text-align:center;\"><a href=\"https://ninedof.files.wordpress.com/2015/05/1-5-flow.png\"><img class=\"alignnone size-full wp-image-2231\" src=\"https://ninedof.files.wordpress.com/2015/05/1-5-flow.png\" alt=\"1.5-flow\" width=\"650\" height=\"200\" /></a></p>\n<p style=\"text-align:left;\">With a new name 'News Headlines', this version is now available as a straight update to 'BBC News Headlines' for existing and new users, and is fully compatible with Aplite (Pebble &amp; Pebble Steel).</p>\n<p style=\"text-align:left;\">As a stretch goal, I have implemented all the necessary code to download the (conveniently sized 144x81) thumbnails for each news story for display in a sort of 'viewer pane' within the app, but discovered too late that neither the HTML5 Canvas object (which could be used to get JPEG pixel data once rendered to the object), or on-board JPEG de-compression is an option, so that feature, while exciting, will have to wait for now.</p>\n<p style=\"text-align:left;\"></p>\n<p style=\"text-align:left;\">In the meantime, you <a title=\"News Headlines on Pebble appstore\" href=\"https://apps.getpebble.com/applications/5387b383f60819963900000e\">can find it on the Pebble appstore</a>!</p>",
    "tags": [
      "JavaScript",
      "Pebble"
    ]
  },
  {
    "id": "2234",
    "title": "Big Changes to PGE",
    "link": "https://ninedof.wordpress.com/2015/06/15/big-changes-to-pge/",
    "pubDate": "Mon, 15 Jun 2015 03:08:45 +0000",
    "postDate": "2015-06-15 03:08:45",
    "body": "After integration of the <a href=\"https://github.com/C-D-Lewis/pge/blob/master/docs/pge_isometric.md\">Isometric</a> and <a href=\"https://github.com/C-D-Lewis/pge/blob/master/docs/pge_ws.md\">WebSocket</a> modules (previously 'additional') into <a href=\"https://github.com/C-D-Lewis/pge\">PGE</a>, I took some time to do something I'd wanted to do for a while: make it a repo usable directly after <code>git clone</code>. Previously the repo was an example project which could be cloned and played around with, but to use the engine in a new game required knowing which files to copy into the new project.\n\nAfter re-organization, the repo can now be directly <code>git clone</code>d into the new project's <code>src</code> directory and requires no further manipulation to be compiled. The previous asteroids example has been moved to a new <a href=\"https://github.com/C-D-Lewis/pge-examples\">pge-examples</a> repository on the <code>asteroids</code> branch, which also hosts a new example 'game' for the WebSockets module PGE WS, which aims to allow developers to send and receive multiplayer data with as few lines as possible. The example allows each player who installs the example to trigger a vibration on all other player's watches while they are running the game, after hosting the server.\n\nFor an overview of how to use the new WebSockets module, <a href=\"https://github.com/C-D-Lewis/pge/blob/master/docs/pge_ws.md\">check out the docs for PGE WS</a>, which summarizes how to set up the server (which forwards all data both directions automatically by default), the JS client, and a C client, which needs only to connect, send and receive data.",
    "tags": [
      "Integration",
      "JavaScript",
      "Pebble"
    ]
  },
  {
    "id": "2243",
    "title": "Updates for Chalk",
    "link": "https://ninedof.wordpress.com/2015/11/06/updates-for-chalk/",
    "pubDate": "Fri, 06 Nov 2015 06:49:36 +0000",
    "postDate": "2015-11-06 06:49:36",
    "body": "First of all, an apology to my app users - I've been slow updating my apps, and fixing new bugs!\n\nRecently <a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.dashboard&amp;hl=en\">Dashboard</a> and <a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.wristponder&amp;hl=en\">Wristponder</a> have had updates fixing a connectivity bug introduced in FW 3.6, which seem to have done the trick. In addition, select watchfaces and apps <a href=\"https://apps.getpebble.com/applications/554574943bbdc6c8560000bf\">Isotime</a>, <a href=\"http://apps.getpebble.com/en_US/application/529e8742d7894b189c000012\">Tube Status</a> have also been updated for Pebble Time Round. Thanks for universal-fb (below), Isotime is now available on Aplite for free. Got to love drop-in libraries!\n<p style=\"text-align:center;\"><a href=\"https://ninedof.files.wordpress.com/2015/11/pebble_screenshot_2015-11-05_22-42-23.png\"><img class=\"alignnone size-full wp-image-2244\" src=\"https://ninedof.files.wordpress.com/2015/11/pebble_screenshot_2015-11-05_22-42-23.png\" alt=\"pebble_screenshot_2015-11-05_22-42-23\" width=\"144\" height=\"168\" /></a> <a href=\"https://ninedof.files.wordpress.com/2015/11/pebble_screenshot_2015-11-05_22-43-31.png\"><img class=\"alignnone size-full wp-image-2245\" src=\"https://ninedof.files.wordpress.com/2015/11/pebble_screenshot_2015-11-05_22-43-31.png\" alt=\"pebble_screenshot_2015-11-05_22-43-31\" width=\"144\" height=\"168\" /></a> <a href=\"https://ninedof.files.wordpress.com/2015/11/pebble_screenshot_2015-11-05_22-44-00.png\"><img class=\"alignnone size-full wp-image-2246\" src=\"https://ninedof.files.wordpress.com/2015/11/pebble_screenshot_2015-11-05_22-44-00.png\" alt=\"pebble_screenshot_2015-11-05_22-44-00\" width=\"180\" height=\"180\" /></a></p>\nPGE has been updated for Chalk compatibility, and new libraries <a href=\"https://github.com/pebble-hacks/owm-weather\">owm-weather</a> and <a href=\"https://github.com/C-D-Lewis/universal-fb\">universal-fb</a> have been released to help developers add popular features with ease. owm-weather enables developers to add weather data to their apps with only one C function call and one callback, the rest is done automatically in JS. Another library to enable drawing of PebbleDrawCommand files is in the final stages.\n\nNews Headlines and Beam Up have updates in progress, but as with any app development problems do come up and require time to fix. Between working for Pebble creating and updating developer documentation, guides, tutorials, and examples, time for long sessions of code revamps, bug fixes and complete redesigns is at a premium. Be assured though, that my Pebble apps have a special place in my heart and will eventually be updated. Users just have to be patient. As always, bugs have the highest priority, with redesigns for Basalt and Chalk coming a close second.\n\nLastly, here's a sneak preview of News Headlines and Beam Up on a round display:\n<p style=\"text-align:center;\"><a href=\"https://ninedof.files.wordpress.com/2015/11/pebble_screenshot_2015-11-05_22-47-36.png\"><img class=\"alignnone size-full wp-image-2247\" src=\"https://ninedof.files.wordpress.com/2015/11/pebble_screenshot_2015-11-05_22-47-36.png\" alt=\"pebble_screenshot_2015-11-05_22-47-36\" width=\"180\" height=\"180\" /></a> <a href=\"https://ninedof.files.wordpress.com/2015/11/pebble_screenshot_2015-11-05_22-49-17.png\"><img class=\"alignnone size-full wp-image-2248\" src=\"https://ninedof.files.wordpress.com/2015/11/pebble_screenshot_2015-11-05_22-49-17.png\" alt=\"pebble_screenshot_2015-11-05_22-49-17\" width=\"180\" height=\"180\" /></a></p>",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "2268",
    "title": "News Headlines 3.6 and Other Updates",
    "link": "https://ninedof.wordpress.com/2016/04/13/news-headlines-3-6-and-other-updates/",
    "pubDate": "Wed, 13 Apr 2016 12:49:04 +0000",
    "postDate": "2016-04-13 12:49:04",
    "body": "Once again, it's been a while! The last update talked about updating apps for Chalk (Pebble Time Round), and it was around that time that I was aiming for stability on the 'Big Three' apps (namely Dashboard, News Headlines, and Wristponder), as well as a couple of the more popular watchfaces (namely Thin, Beam Up, Isotime, etc), so I could not be doing Pebble development all day and all night.\n\nHappily, I eventually achieved this after a few weekend sessions, and all was good. With some interesting developments in the world of app configuration (see <a href=\"https://github.com/pebble/clay\">Clay</a>), I added vastly improved color-selection configuration pages to those watchfaces. Color pickers beat manually entering hex strings any day of the week!\n\nSince I'm no longer doing developer documentation/other general advocacy for Pebble (perhaps the massive <a href=\"https://developer.pebble.com/blog/2016/03/09/Dont-Panic-We-Are-Here-To-Guide-You/\">Guides rewrite</a> was my parting gift?), I have decided to try and pick it up again as a hobby, like I was doing before getting hired. I found it great fun, and very rewarding when I saw people using my apps. In general, they start life as apps I want to use my watch for, then I polish and publish them so other can find them useful.\n\nThe trouble I was running into was finding time to meet the maintenance demands of bugs/feedback from users, so now I have more time for that. Indeed, I've picked up a few processes/skills from my time managing my projects at Pebble that should make this process much easier. It is yet to be seen if Sheets is more efficient for a single person than JIRA, but I think I know what the answer is...\n\n<a href=\"https://ninedof.files.wordpress.com/2016/04/region.png\" rel=\"attachment wp-att-2269\"><img class=\"aligncenter size-full wp-image-2269\" src=\"https://ninedof.files.wordpress.com/2016/04/region.png\" alt=\"region\" width=\"180\" height=\"180\" /></a>\n\nAnyway, just now I released version 3.6 of News Headlines. For some time, I've received the question \"Can it show news from outside the UK?\". Since it started life as 'BBC News', that makes more sense. Yesterday I saw that the BBC has feeds for <a href=\"http://www.bbc.co.uk/news/10628494\">multiple regions</a>, and so a fun exercise in adding a new feature presented itself, with a lot of potential value for users who aren't interested in the <a href=\"http://www.bbc.co.uk/news/uk-politics-35994283\">latest scandal at Westminster</a>.\n\nIn adding this new feature, I was reminded how complicated News Headlines is as an app, but it made the end result that much more satisfying. The process went something like this:\n<ul>\n\t<li>Add new enumerations for the region values.</li>\n\t<li>Add new defaults and internal APIs for passing around the region value.</li>\n\t<li>Add new UI items and logic to the Settings Window.</li>\n\t<li>Add new keys for AppMessage and Persistent Storage APIs.</li>\n\t<li>Add region-passing to the initial sync communication phase.</li>\n\t<li>Generalise JS feed download to choose either a selected region, or a 'category' if the region is 'UK'.</li>\n\t<li>Ensure all these things played nicely for new users and also upgrading users (the latter where I've been stung far too many times before).</li>\n\t<li>And as usual get massively sidetracked with refactoring and code style updates.</li>\n</ul>\nSo now we have that. Readers around the world can make their headlines-reading experience a tad more localised if they wish. Another request I've been getting recently in general is to accept donations. Historically (excepting the paid version of Watch Trigger) I've not dabbled in donations, but since I'm not paid by Pebble anymore I will use this update to do a little experimentation. It can always be removed if nothing happens. Another experiment is making a /r/pebble subreddit post, so we'll also see how that's received.",
    "tags": [
      "Integration",
      "JavaScript",
      "Pebble"
    ]
  },
  {
    "id": "2281",
    "title": "Dashboard 4.0 now available!",
    "link": "https://ninedof.wordpress.com/2016/05/04/dashboard-4-0-now-available/",
    "pubDate": "Wed, 04 May 2016 18:30:55 +0000",
    "postDate": "2016-05-04 18:30:55",
    "body": "<a href=\"https://ninedof.files.wordpress.com/2016/05/blogbanner.png\"><img class=\"aligncenter size-full wp-image-2282\" src=\"https://ninedof.files.wordpress.com/2016/05/blogbanner.png\" alt=\"blogbanner\" width=\"545\" height=\"249\" /></a>\n\nIt's here! The redesign I've been planning since many months ago (the previous colour watchapp design was a bit of a bodge), and I've wanted to add in a few extra features:\n<ul>\n \t<li>GSM signal strength</li>\n \t<li>Wifi network name</li>\n \t<li>Phone free space</li>\n \t<li>Resync every 30 seconds while the app is open</li>\n \t<li>Option to jump straight to a certain toggle when the app is opened</li>\n</ul>\n...and all the usual refactoring (I can't help myself) and some protocol simplification. Here's a rule of thumb: if your AppMessage protocol uses arithmetic and nested switch statements, ditch it!\n\nI also improved a lot of the Android code, added fail cases, and more logging etc. to better help me diagnose problems when a user sends me a debug log. Finally, I brought a little animation magic to the UI, and relied more heavily on system UI components instead of over-complicating things by rolling my own version of everything.\n\nDownload on <a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.dashboard\">Google Play</a> and <a href=\"https://apps.getpebble.com/en_US/application/53ec8d840c3036447e000109\">Pebble appstore</a>!",
    "tags": [
      "Android",
      "Integration",
      "Java",
      "Pebble",
      "Releases"
    ]
  },
  {
    "id": "2293",
    "title": "SceneEngine (Java Game Engine)",
    "link": "https://ninedof.wordpress.com/2016/06/14/glsceneengine-java-game-engine/",
    "pubDate": "Tue, 14 Jun 2016 16:55:39 +0000",
    "postDate": "2016-06-14 16:55:39",
    "body": "Contrary to popular belief, I do other programming stuff outside of Pebble apps (as well as my other hobby - ignoring app feature requests!). One of these things is a arcade game side project that's been on-for-a-few-weekends, off-for-a-few-months. Inspired by the sort of rapid-fire indie games my brother and his friends play (Duck Game, Samurai Gunn, Monaco, and recently Ultimate Chicken Horse), I embarked on a project to make a game similar to these that could be played by several friends around a single TV, much like local multiplayer games from my Youth (particularly Worms).\n\nThis effort saw me create a basic looping game prototype with Java2D, which began life as a top-down space-themed ship simulator, but didn't make it very far before switching to the arcade-multiplayer genre I wanted it to become. Soon enough, drawing lots of tiles hit its max potential and so I had to spend a lot of time tearing it apart and replacing Java2D with LWJGL OpenGL for speed. The results were worth the effort, but I'm still left with an incomplete game.\n\nLike many of my programming projects, I work on it less constantly, and more in inspired fits and bursts. So far I have intro sequences, a menu system, a tiled world system with lighting based on a novel pathfinding algorithm, up to four XBox controller support, player sprite animation and collision, and other things. But it's still incomplete. Until I add weapons, NPCs, effects, and room generation, it'll stay that way.\n\nBut in the meantime, I created lots of very useful sub-components that I really don't want to have been for nothing, and will probably end up reusing in my own projects. So I decided to pull out the engine, and release it on GitHub as a standalone project that can be run independently of all the other fluff that makes up the game in progress. Importing the code into Eclipse and adding LWJGL.jar (with local libraries and binaries) will let you play around with it and build a game on top of it if you want.\n\nCheck out the <a href=\"https://github.com/C-D-Lewis/GLSceneEngine\">GitHub repository README.md</a> for a full list of features and how to implement it. Once I have a working prototype of the game, I'll probably post about that as well. It's all about the journey, right?\n\n<a href=\"https://ninedof.files.wordpress.com/2016/06/screenshot.png\"><img class=\"aligncenter size-full wp-image-2294\" src=\"https://ninedof.files.wordpress.com/2016/06/screenshot.png\" alt=\"screenshot\" width=\"545\" height=\"347\" /></a>",
    "tags": [
      "Java",
      "Releases"
    ]
  },
  {
    "id": "2302",
    "title": "Pebble Libraries and Other Recent Stuff",
    "link": "https://ninedof.wordpress.com/2016/06/30/pebble-libraries-and-other-recent-stuff/",
    "pubDate": "Thu, 30 Jun 2016 00:41:04 +0000",
    "postDate": "2016-06-30 00:41:04",
    "body": "So Pebble recently added proper library support to their SDK. Fantastic! Now I have a streamlined outlet for all my obsessive and productive refactoring. A lot of my apps and watchfaces contain modular elements that get reused. I also have a strange draw to making libraries, examples of which you can find in <a href=\"https://github.com/C-D-Lewis/pebble\">this handy GitHub README</a>.\n\nAfter the feature went live, I spent some time reviewing work done by Cherie, and published two libraries on NPM (more will probably follow, if I find the time/energy):\n<ul>\n\t<li><a href=\"https://www.npmjs.com/package/pebble-pge\">pebble-pge</a> - Everybody's favourite Pebble game engine they've probably never heard of.</li>\n\t<li><a href=\"https://www.npmjs.com/package/universal-fb\">universal-fb</a> - Universal access to set/get/swap colours in a Layer's LayerUpdateProc without having to worry about the buffer format/how to manipulate bits in bytes (I already did that for you, twice)</li>\n</ul>\nThis concludes today's library announcements.\n\nIn other news, I finally caved an made the icon grid/menu compromise in Dashboard that the more vocal users were complaining about. I have to admit, cramming both screens into one Window with an animation between them does work very well, and is likely to be the status quo for some time to come.\n\nSpeaking of which, watching the <a href=\"https://www.youtube.com/watch?v=oP7lRK9Q8tw\">latest Developer Meetup video</a> made me sad to no longer be a part of improving the Pebble Development experience, but excited to remain a community member and spend even more time putting off adding new features to my apps that are enabled by the new SDK APIs. I'm looking at you, App Glances.",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "2321",
    "title": "Dashboard 4.3 Released (Plus All The Gory Implementation Details)",
    "link": "https://ninedof.wordpress.com/2016/07/12/dashboard-4-3-released-plus-all-the-gory-implementation-details/",
    "pubDate": "Tue, 12 Jul 2016 22:07:34 +0000",
    "postDate": "2016-07-12 22:07:34",
    "body": "That's right, the latest and greatest update to Dashboard is now live (pending Google Play deployment delay). The new features are (in descending order of number of requests received):\n<ul>\n\t<li>A choice of Find Phone sound from system notification sounds. While these are guaranteed to be available, free-form choice of file proved too tricky to handle (see Android file manage <code>content://</code> URI problems discussed elsewhere).</li>\n\t<li>An option to post an Android notification (and by extension, to the watch) when the phone has fully charged (see details below). This approach is better than the original one planned which involved custom UI in the watchapp, but would rely on an assumption about how long PebbleKit Android would take to launch the watchapp before messaging it.</li>\n\t<li>Holding down the button now uses repeat button clicks to reduce wear on the Pebble buttons while scrolling through toggles.</li>\n\t<li>Since I'm making bigger use of Notifications, installed a proper white notification icon to improve upon the old 'white circle'.</li>\n\t<li>More misc UI improvements in both app components, including a donation link for those inclined, after some minor success in News Headlines.</li>\n</ul>\nSo how does the new 'full charge notification' feature work? I'm glad you asked!\n\n<strong>The Short Answer</strong>\n\nOnce your phone has reached 100% charge (when it was previously 99% or less), an Android notification is posted, which is displayed on Pebble (for free!) unless for some reason Dashboard was disabled in the Pebble app.\n\n<strong>The Long Answer</strong>\n\nOh boy, this was a tricky one. While the <code>ACTION_BATTERY_CHANGED</code> Intent is available for apps to know when the battery level changes, it's a special case that cannot be simply registered in AndroidManifest.xml for spin-up whenever required. It has to be <strong>programmatically registered</strong>. For an app designed to run with extremely minimal interaction with the Android app component, this is tricky.\n\nSo what have I done? When the user toggles the feature on in the Android app, the BroadcastReceiver for the above Intent is registered. Sounds simple, right? Well that works for anywhere between ten minutes and an hour or so. I was charging my phone from 99% in testing, and seeing the notification after a few minutes as expected, but a frustrating lack of notification after leaving the phone idle for couple of hours on longer charges.\n\nFor reasons unknown to me, the system kills my programmatically registered BroadcastReceiver at seemingly random intervals. Remember, this wouldn't happen with a nice and convenient receiver registered in AndroidManifest.xml.\n\nUndeterred by this (because this is a nice feature idea), I found another solution. I made the receiver object a static class member, and used the Android AlarmManager to check it was not <code>null</code> at infrequent intervals (currently half an hour). This seemed to work well, once I realised by trial and error that Android Studio appears to kill BroadcastReceivers and AlarmManager alarms, but<strong> not</strong> deliver the <code>ACTION_PACKAGE_CHANGED</code> which I use to restore the alarms after a theoretical future app update is installed.\n\nIn addition, new users would not have their 'keep alive' alarms registered upon first install, since <code>ACTION_PACKAGE_ADDED</code> is <strong>not</strong> delivered to the app that has just installed (why!?). Fancy another complication? Here you go: AlarmManager alarms are all killed when the device is rebooted, so I make additional use of <code>ACTION_BOOT_COMPLETED</code> to restore them.\n\n<strong>Finally</strong>\n\nSo there we go! I've always been a vocal proponent of Android's Intent system for IPC, but after this set of complications (which has still yielded an apparently solid solution), I'm not so sure. Ah, who am I kidding? Still a big fan!\n\nDashboard can be installed from the <a href=\"https://apps.getpebble.com/en_US/application/53ec8d840c3036447e000109\">Pebble appstore</a> and the <a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.dashboard\">Google Play Store</a>.",
    "tags": [
      "Android",
      "Integration",
      "Pebble",
      "Releases"
    ]
  },
  {
    "id": "2374",
    "title": "Dash API For Easy Pebble and Android Integration",
    "link": "https://ninedof.wordpress.com/2016/07/20/dash-api-for-easy-pebble-and-android-integration/",
    "pubDate": "Wed, 20 Jul 2016 22:44:03 +0000",
    "postDate": "2016-07-20 22:44:03",
    "body": "A few days ago, an interesting idea came up in the PebbleDev Slack channel: could a library make it easier for Pebble developers to integrate their apps with Android APIs, but save the pain of each and every one of them needing to publish an app with PebbleKit Android? This would be similar to how Dashboard operates, but by sharing the API access to other apps that are installed.\n\nTurns out, it can! In one of my signature coding bursts I set to work, and prototyped a system that did just this. The result is the Dash API. With it, you can finally (and easily) provide one of the most common watchface widget requests - things like the phone's battery level, or connectivity status.\n\n<strong>How does it work?</strong>\n\nThe <a href=\"https://github.com/C-D-Lewis/dash-api\">Dash API</a> (named after Dashboard) <a href=\"https://www.npmjs.com/package/pebble-dash-api\">Pebble package</a> uses AppMessage to send requests to read data (such as WiFi network name, or phone battery level), or write to an API (such as turning off WiFi). Using a unique key to recognise Dash API messages, the Android app can respond to these by reading the data or manipulating the Android API and returning a response code. All the developer needs to do is instruct their users to install my <a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.dashapi\">Dash API Android app</a>, and then their app (and any others that use the Dash API) can take advantage of the APIs presented through the library. This approach makes the Dash API an install once, use in many apps service.\n\nThe upshot of all this is that a C developer making a watchface that wants to show the phone battery level (such as the demo app <a href=\"https://apps.getpebble.com/en_US/application/578cb2e31e00a6c4b3000312\">Dual Gauge</a>) need only use the Pebble package and not write a single line of Java, let alone go to the trouble of publishing an Android app on Google Play.\n\nBut how can one companion app target them all, without knowing they exist?\n\nLuckily, you can extract the UUID of an app that sends an AppMessage packet to the phone from the Intent object broadcast from the Pebble Android app. Most (hopefully app) companion apps that manually register a BroadcastReceiver do a 'good citizen' UUID check to make sure they only respond to messages from their corresponding watchapp. This data can be used to simply redirect an incoming message's result right back at it, without the need to create a PebbleKit Android app with baked in UUID for each individual app.\n\n<strong>So how can I use it?</strong>\n\nSimple. As explained in the <a href=\"https://github.com/C-D-Lewis/dash-api/blob/master/README.md#setting-up\">GitHub README.md file</a>, a C developer should first install the package:\n\n<code>\n$ pebble package install pebble-dash-api\n</code>\n\nNext, include the single library file and call the initialiser when your app is starting, supplying the app's name (for presentation in the Android app) and an error callback for receiving any errors that may occur:\n\n[code language=\"cpp\"]\n#include &lt;pebble-dash-api/pebble-dash-api.h&gt;;\n#include &lt;pebble-events/pebble-events.h&gt;\n\n#define APP_NAME &quot;My App&quot;\n\nstatic void error_callback(ErrorCode code) {\n  // Receive error codes here\n}\n\nstatic void init() {\n  dash_api_init(APP_NAME, error_callback);\n  events_app_message_open();\n\n  /* Other init code */\n}\n[/code]\n\nNext, check the Android app is available and up to date:\n\n[code language=\"cpp\"]\ndash_api_check_is_available();\n[/code]\n\nThe result will be passed to your <code>error_callback</code>. Once you get <code>ErrorCodeSuccess</code>, it is safe to start making queries, such as getting the battery level, etc. Code examples are included in the <a href=\"https://github.com/C-D-Lewis/dash-api#get-data\">GitHub README.md file</a>.\n\n<strong>What else do I need to know?</strong>\n\nAs of 1.1 (released today), apps that read data and API states can do so invisibly. However, apps that wish to write to an API (such as turning off WiFi) will cause a notification to appear that will prompt the user to grant it access within the Dash API app. Once this is done, operation will continue without further intervention, unless permission is revoked. This should hopefully prevent any rogue apps messing with the phone, and give users visibility into which Pebble apps they have used are using the Dash API.\n\n<strong>Links</strong>\n\n<a href=\"https://github.com/C-D-Lewis/dash-api\">GitHub Repo</a>\n\n<a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.dashapi\">Dash API Android app</a> (direct your users here!)\n\n<a href=\"https://www.npmjs.com/package/pebble-dash-api\">NPM Package</a>\n\n<a href=\"https://apps.getpebble.com/en_US/application/578cb2e31e00a6c4b3000312\">Example App (Dual Gauge)</a>\n\n<strong>What's next?</strong>\n\nIn the future, I'd like to expand the capabilities offered by the Dash API to other popular widget requests, things such as unread SMS count and next Calendar appointment. Perhaps for another day - coordinating GitHub repos, NPM packages, Android apps, and Pebble apps is quite tiring!",
    "tags": [
      "Android",
      "Integration",
      "Java",
      "Pebble",
      "Releases"
    ]
  },
  {
    "id": "2383",
    "title": "Say Hello to Your New Pin Pusher!",
    "link": "https://ninedof.wordpress.com/2016/09/11/say-hello-to-your-new-pin-pusher/",
    "pubDate": "Sun, 11 Sep 2016 13:48:25 +0000",
    "postDate": "2016-09-11 13:48:25",
    "body": "<strong>Update: Added changed IP facility details.</strong>\n\n<strong>Update: Added status watchapp details.</strong>\n\nTwo of my Pebble apps push pins to the timeline to enhance their experience beyond the apps themselves:\n<ul>\n\t<li><a href=\"https://apps.getpebble.com/en_US/application/5387b383f60819963900000e\">News Headlines</a> - Posts the top headline (if it's new) every four hours. Used to push notifications and serve decoded PNG images, but that went away. Maybe someday they will return. But not for now.</li>\n\t<li><a href=\"https://apps.getpebble.com/en_US/application/529e8742d7894b189c000012\">Tube Status</a> - Checks the TFL feed every five minutes, and pushes a pin if there is a change in the delay status. This can be a new delay, a delay that's ended, and 'all clear' (no delays anymore).</li>\n</ul>\nBoth servers also respond to <code>GET /status</code> to show app users if they're up, and this has proved useful when they occasionally went down. Thanks for a 'do node index.js forever' loop script, this is very rarely now an issue.\n\nUp until now, these pins were served from a $5 Digital Ocean instance which essentially spends 99.9% of its time doing absolutely nothing! After coming back to the UK and making progress towards cancelling subscriptions and emptying my US bank account, I had a better idea - use my dusty Raspberry Pi instead!\n\nAs part of my new job at EVRYTHNG, a natural avenue of exploration for getting to grips with the IoT is using a Raspberry Pi, which can run Node.js, as it turns out. Perfect! The pin servers for the two apps above use Node.js with Express.\n\nSo after a bit of code/dependency cleanup, I set up both servers on the Pi with <code>screen</code> and put plenty of stickers around warning against turning it off or rebooting the router.\n\nSo far, so good! What could go wrong?\n\n<img class=\"alignnone size-full wp-image-2397\" src=\"https://ninedof.files.wordpress.com/2016/09/img_20160911_143438.jpg\" alt=\"img_20160911_143438\" width=\"4000\" height=\"2992\" />\n<p style=\"text-align:center;\">The new 'Pin Pusher' Raspberry Pi in its native habitat - under the family computer desk.</p>\n<p style=\"text-align:left;\"><strong>Followup: Getting a Changed Router IP while Out the House</strong></p>\n<p style=\"text-align:left;\">In the eventuality that I have to update the IP of the family router for apps to use in their status check (otherwise they think the servers have gone down, bad for users!), I used to have a Python script email me its own IP address. Sadly, Google doesn't like this unauthenticated use of my GMail account, so I devised an alternative.</p>\n<p style=\"text-align:left;\">I set up my Pi as an EVRYTHNG Thng, gave it an 'ip' property, and wrote the following Python script to update this property in the EVRYTHNG cloud when it boots up. This way, all I have to do is ask whoever's in to reboot the Pi, and then wait for the updated IP address! I may also make it run periodically to cover the 'router randomly restarted' scenario.</p>\n[code language=\"python\"]\n\n#!/usr/bin/python\n\nimport requests\nimport socket\nimport fcntl\nimport struct\nimport json\n\nuser_api_key = &quot;&lt;key&gt;&quot; # Probably shouldn't publish this!\nthng_id = &quot;&lt;id&gt;&quot;\n\ndef get_ip_address(ifname):\n  r = requests.get(&quot;http://www.canyouseeme.org&quot;)\n  spool = r.text\n  start_str = &quot;name=\\&quot;IP\\&quot; value=\\&quot;&quot;\n  start_index = spool.index(start_str) + len(start_str)\n  spool = spool[start_index:]\n  end_index = spool.index(&quot;/&gt;&quot;) - 1\n  return spool[:end_index]\n\ndef main():\n  ip = get_ip_address(&quot;eth0&quot;)\n  print(&quot;IP: {}&quot;.format(ip))\n\n  headers = {\n    &quot;Authorization&quot;: user_api_key,\n    &quot;Content-Type&quot;: &quot;application/json&quot;,\n    &quot;Accept&quot;: &quot;application/json&quot;\n  }\n  payload = [{\n    &quot;value&quot;: ip\n  }]\n  r = requests.put(&quot;https://api.evrythng.com/thngs/{}/properties/ip&quot;.format(thng_id), headers=headers, data=json.dumps(payload))\n  res = r.text\n  print(res)\n\nmain()\n\n[/code]\n\n<strong>Followup: Checking Status Conveniently</strong>\n\nEach of the two apps mentioned above have a built-in server monitoring feature in their settings screens, but that's a lot of scrolling. To put my mind at ease I have also created a simple monitoring app that uses the same backend mechanism:\n\n<img class=\"alignnone size-full wp-image-2410\" src=\"https://ninedof.files.wordpress.com/2016/09/img_20160911_225459.jpg\" alt=\"img_20160911_225459\" width=\"4000\" height=\"2992\" />",
    "tags": [
      "Integration",
      "JavaScript",
      "Pebble",
      "Raspberry Pi"
    ]
  },
  {
    "id": "2423",
    "title": "Dynamic PC Backlight with Raspberry Pi and Blinkt",
    "link": "https://ninedof.wordpress.com/2016/11/20/dynamic-pc-backlight-with-raspberry-pi-and-blinkt/",
    "pubDate": "Sun, 20 Nov 2016 23:18:44 +0000",
    "postDate": "2016-11-20 23:18:44",
    "body": "I'm a big fan of <a href=\"https://shop.pimoroni.com/products/blinkt\">Blinkt light hats</a> for Raspberry Pi. I have one showing me server status, rail delays, and weather conditions.\n\n<a href=\"https://ninedof.files.wordpress.com/2016/11/20161016_153730.jpg\"><img class=\"aligncenter wp-image-2424\" src=\"https://ninedof.files.wordpress.com/2016/11/20161016_153730.jpg\" alt=\"_20161016_153730\" width=\"358\" height=\"286\" /></a>\n<p style=\"text-align:center;\">Server down!</p>\nI have another at work showing the status of the last link check on our ReadMe.io site.\n\n<a href=\"https://ninedof.files.wordpress.com/2016/11/img_20161117_165458.jpg\"><img class=\"aligncenter wp-image-2425\" src=\"https://ninedof.files.wordpress.com/2016/11/img_20161117_165458.jpg\" alt=\"img_20161117_165458\" width=\"366\" height=\"274\" /></a>\n\nAnd now I have one as a dynamic backlight for my new PC build.\n\n<a href=\"https://ninedof.files.wordpress.com/2016/11/img_20161120_135026.jpg\"><img class=\"aligncenter wp-image-2426\" src=\"https://ninedof.files.wordpress.com/2016/11/img_20161120_135026.jpg\" alt=\"img_20161120_135026\" width=\"358\" height=\"268\" /></a>\n\nAnd the best part? This last one has an API! It has five modes, powered by a Node.js Express server and the <code>node-blinkt</code> NPM package:\n<ul>\n \t<li><code>/set { \"to\": [r, g, b] }</code> - Set a color instantly.</li>\n \t<li><code>/fade { \"to\": [r, g, b] }</code> - Fade from the current colour to this one.</li>\n \t<li>'CPU' - Fade to a colour on a HSV scale from green to red depending on current CPU load.</li>\n \t<li>'Screen' - Take an average of the four screen corners, and set to that colour ten times a second.</li>\n \t<li>'Demo' - Fade to a random colour from the rainbow every 15 seconds.</li>\n \t<li>'Test' - Ping the Pi and set the 'Test' button to green if it responds 'OK' and HTTP 200.</li>\n</ul>\nThe last three are driven by a Java control panel that permanently lives on the new PC.\n\n<a href=\"https://ninedof.files.wordpress.com/2016/11/controller.png\"><img class=\"aligncenter size-full wp-image-2427\" src=\"https://ninedof.files.wordpress.com/2016/11/controller.png\" alt=\"controller\" width=\"452\" height=\"157\" /></a>\n\nThanks to the motherboard supplying power after the PC turns off, I can use 'Demo' as a nightlight! Not that I need one...",
    "tags": [
      "Integration",
      "Java",
      "Raspberry Pi"
    ]
  },
  {
    "id": "2432",
    "title": "Map of Pebble Services Architecture",
    "link": "https://ninedof.wordpress.com/2016/12/03/map-of-pebble-services-architecture/",
    "pubDate": "Sat, 03 Dec 2016 16:39:11 +0000",
    "postDate": "2016-12-03 16:39:11",
    "body": "Here's a little something to take everybody's mind of things.\n\n&nbsp;\n\nThis is a neat idea I had a while ago but only just got around to doing -\n\n<em>\"What would a map of all the interconnections and services that my Pebble apps rely upon look like?\"</em>\n\nWell, thanks to the neat tool that is Google Drawings, here it is. Scary dependencies!\n\n<a href=\"https://ninedof.files.wordpress.com/2016/12/services-architecture.png\"><img class=\"aligncenter wp-image-2433 size-full\" src=\"https://ninedof.files.wordpress.com/2016/12/services-architecture.png\" alt=\"services-architecture\" width=\"545\" height=\"454\" /></a>\n\nOf course, this isn't the full picture. The Server Pi and Monitor Pi provide me with useful services I use in my day-to-day life, such as train delay timeline pins, weather alerts, and updates on the health of the services apps rely upon. Those details aren't shown here for brevity, but would increase the complexity of the drawing about 50%.",
    "tags": [
      "Integration",
      "Pebble",
      "Raspberry Pi"
    ]
  },
  {
    "id": "2438",
    "title": "My Pebble Story",
    "link": "https://ninedof.wordpress.com/2016/12/08/my-pebble-story/",
    "pubDate": "Thu, 08 Dec 2016 22:29:48 +0000",
    "postDate": "2016-12-08 22:29:48",
    "body": "This post was originally going to be a lot gloomier, but the <a href=\"https://www.kickstarter.com/projects/597507018/pebble-2-time-2-and-core-an-entirely-new-3g-ultra/posts/1752929\">official announcement</a> yesterday (after a few days of utter FUD) has proven that the worst-case scenario has not come to be, and there's reason to be optimistic about Pebble's future.\n\nSo what better time to summarise my part of the Pebble story?\n\n<strong>The Beginning</strong>\n\nI backed the original Pebble in the <a href=\"https://www.kickstarter.com/projects/597507018/pebble-e-paper-watch-for-iphone-and-android/description\">first Kickstarter campaign</a>, after a few weeks on the fence I was finally convinced by the promise of an open SDK. I'd had a bit of experience with C as part of my degree course, and played with Java in the second year (including prodding the Android SDK to see if I could make it do anything interesting). Why not try and make my watch do some cool things?\n\nAfter the now legendary delays, I finally got my watch. It had screen tearing from the moment I turned it on, but I found that by pressing a certain part of the case I could get it to behave (Pebble replaced it within two weeks, so props to them for that). The original 1.x SDK was a bit harder to grasp than the one we have now, but even so, I eventually got my first app working:\n\n<a href=\"https://ninedof.files.wordpress.com/2016/12/img_20130420_121302.jpg\"><img class=\" wp-image-2439 aligncenter\" src=\"https://ninedof.files.wordpress.com/2016/12/img_20130420_121302.jpg\" alt=\"SAMSUNG\" width=\"384\" height=\"288\" /></a>\n\nWhat a moment! I could put any message I wanted on my wrist! Over the next couple of weeks I worked on a couple of watchfaces, most notable of which was Split Horizon. Back then we had MyPebbleFaces in place of an official app store, which involved the community uploading the build PBW files and then users downloading them and installing via the Android/iOS apps, which were also quite primitive at the time. Also due to the lack of app configuration, watchfaces were released in multiple listings, so Split Horizon has a Seconds Edition (animation every 15 seconds), Minutes Edition, and Plain Edition.\n\nOnce SDK 1.12 was released (two-way communication, woo!) I was able to use the first version of PebbleKit Android to do interesting things with Android APIs. The first outcome of this was Watch Trigger, the first app that allowed you to capture a photo remotely using your Pebble as the remote. This was since superseded by better efforts (PebbleCam, etc), but it was a big thing for me at the time to have this futuristic capability. I would then go on to a paid app experiment by offering a video capture upgrade (Watch Trigger +) for £0.99, and the main lesson learned was that 95% of my users loved free stuff! Here's the second iteration (the first was just the logo!):\n\n<img class=\" wp-image-2442 aligncenter\" src=\"https://ninedof.files.wordpress.com/2016/12/img_20130902_160916.jpg\" alt=\"SAMSUNG\" width=\"398\" height=\"299\" />\n\nHot on the heels of this was my exploration of other Android APIs. At the time, I had an Android phone (Galaxy S) that would suck power if it was connected to the wrong network. To solve this problem, I created Data Toggle to allow me to turn off WiFi when I went outside, and switch over to 3G. This would later become Dashboard as we now it today.\n\n<a href=\"https://ninedof.files.wordpress.com/2014/03/photo1.jpg\"><img class=\"wp-image-1732 aligncenter\" src=\"https://ninedof.files.wordpress.com/2014/03/photo1.jpg\" alt=\"photo1\" width=\"283\" height=\"320\" /></a>\n<p style=\"text-align:center;\">...became...</p>\n<a href=\"https://ninedof.files.wordpress.com/2016/12/img_20140907_124913.jpg\"><img class=\"aligncenter wp-image-2459\" src=\"https://ninedof.files.wordpress.com/2016/12/img_20140907_124913.jpg\" alt=\"img_20140907_124913\" width=\"357\" height=\"264\" /></a>\n\nAt the same time I also begun work on Wristponder to allow initiating and replying to SMS messages (before it was integrated into the firmware!):\n\n<img class=\"wp-image-2443 aligncenter\" src=\"https://ninedof.files.wordpress.com/2016/12/img_20140228_171926.jpg\" alt=\"img_20140228_171926\" width=\"396\" height=\"293\" />\n\n<strong>The SDK Tutorials</strong>\n\nIt was that summer I started working on my <a href=\"https://ninedof.wordpress.com/pebble-sdk-tutorial/\">SDK tutorials</a>. Little did I know that these pieces (drafted on a notepad in Tuscany, and originally quite popular with other community members, being the only real tutorials at the time) would <strong>literally change my life</strong>.\n\nNot shown in the image below is the pad I was writing feverishly my ideas for structured learning content that would guide through the exciting Pebble SDK opportunities:\n\n<a href=\"https://ninedof.files.wordpress.com/2016/12/img_20130704_184311.jpg\"><img class=\" wp-image-2445 aligncenter\" src=\"https://ninedof.files.wordpress.com/2016/12/img_20130704_184311.jpg\" alt=\"SAMSUNG\" width=\"360\" height=\"270\" /></a>\n\nWhen SDK 2.0 came out (along with PebbleKit JS, localStorage, and a better C style API) I wrote another whole multi part series out of the same motivation as the 1.x tutorial - <strong>now that I'd learned how to make this revolutionary device do my bidding, I wanted to help everyone else do the same to theirs</strong>. I still maintain that the ability to make Pebble fit into your own lifestyle (down to news stories, train delay alerts, even scheduling when your phone switches to Silent for the night) was it's most potent feature. Especially the potential of being paired with the whole Android platform, which I hope Dashboard and the Dash API demonstrate as well as I was able.\n\n<strong>Getting Hired</strong>\n\nAfter I was almost done with the SDK 2.0 tutorials, I was contacted out of the blue on Twitter by Pebble's lead Developer Evangelist - Thomas Sarlandie:\n\n<a href=\"https://ninedof.files.wordpress.com/2016/12/thomas.png\"><img class=\"aligncenter size-full wp-image-2447\" src=\"https://ninedof.files.wordpress.com/2016/12/thomas.png\" alt=\"thomas\" width=\"537\" height=\"76\" /></a>\n\nOriginally the deal was to write some tutorials for Pebble's Developer Blog, but that quickly turned into a full job offer. I was torn - I was in my last year of University with no job lined up, but I'd never lived out of the country before. It was such a huge opportunity I had no idea what to do. My mind was made up when one of my best uni friends said \"You know your friends who are off doing amazing things travelling the world? This is your opportunity to do that too. Take it!\".\n\nSo I did.\n\nAfter a few months of sorting visas, I arrived in Palo Alto and was greeted into the arranged shared accommodation by Joseph Kristoffer. The effect was incredible. I'd practically run myself into the ground finishing my fourth year of university - physically and emotionally. Being on the other side of the world in sunny California surrounded by people who <em>wanted</em> me there so badly was very good for me. A chance to start again, make new friends, and new first impressions.\n\nThe welcome was extremely friendly wherever you looked at Pebble, everyone wanted to know who I was and how I'd come to be in the office. I was quickly given a Macbook (which I had very little idea of how to use) and tasked with managing the original drab docs for the colourful Pebble Developer site design you see now:\n\n<a href=\"https://ninedof.files.wordpress.com/2016/12/devgpcom.png\"><img class=\"aligncenter size-full wp-image-2448\" src=\"https://ninedof.files.wordpress.com/2016/12/devgpcom.png\" alt=\"devgpcom\" width=\"545\" height=\"317\" /></a>\n\nAfter a few weeks, and a very quick crash course in git, we did it, and shipped the new site. It was bright and colourful and full of opportunity for new content. We had a company retreat and the famous 2014 Developer Retreat (<a href=\"https://www.youtube.com/watch?v=Xpuop931GuM\">with ROBOTS!!1</a>). I got to go to Maker Faire, see the East Coast and New York on my way to YHack in Connecticut. I was having the time of my life, and knew how lucky I was at every turn.\n\n<strong>Pebble Time</strong>\n\nBut there was little time to rest. After SDK 2.5 and the Compass API, the company threw itself into the Pebble Time project, which gradually sifted out from the Design team to the whole company. It would be more powerful, with a <em>colour screen</em>, a <em>web API</em>, and a <em>microphone</em>! I think the excitement started to climb when the film crew came in to film the second Kickstarter video, which if you look really carefully, you can see me in:\n\n<a href=\"https://ninedof.files.wordpress.com/2016/12/ks2.png\"><img class=\"aligncenter size-full wp-image-2449\" src=\"https://ninedof.files.wordpress.com/2016/12/ks2.png\" alt=\"ks2\" width=\"545\" height=\"289\" /></a>\n\nWe launched the campaign, and there was much celebration with every million the campaign earned. It was a sign of how passionate everybody was, and how badly they wanted to make this awesome new kind of Pebble a reality, if only for at least themselves. Many of the engineers worked long hours and weekends, and famously took no voluntary holidays, their passion was that great. The same engineers who managed to fit firmware 3.x into the original hardware with <strong>mere bytes to spare</strong>. After the manufacturing started, we got some samples in the office and tried building some colour apps. I say 'tried', because the SDK was on the bleeding edge of what firmware functionality was built each and every day. Each new API brought more possibilities, such as the block game demo, and an early version of Isotime:\n\n<a href=\"https://ninedof.files.wordpress.com/2016/12/img_20150226_160104.jpg\"><img class=\"aligncenter wp-image-2451\" src=\"https://ninedof.files.wordpress.com/2016/12/img_20150226_160104.jpg\" alt=\"img_20150226_160104\" width=\"423\" height=\"313\" /></a>\n\nFinally, the backers started receiving watches, and the developer community responded admirably. Every day someone would be going round showing off the latest cool colour app they'd found on the app store, and I worked in my spare time to update all my apps and watchfaces to use the new colour functionality. After this we finished working on timeline, culminating in a 4AM final merge of a monstrous documentation Pull Request.\n\n<strong>Product Owner</strong>\n\nSometime while writing the Smartstrap guides and the Design guides I began planning my own work and execution, with input from the rest of the team. This was completely new to me, but with a few well-maintained Google Sheets, project after project came together without issue. It was good to be more at the helm of the documentation, and being able to help all developers with useful guides, tutorials, and example apps. I also loved (and still do love!) chatting with the more active developer community members in the then Slack chat (now on <a href=\"https://discordapp.com/invite/aRUAYFN\">Discord</a>) and giving one on one feedback and help as much as I could.\n\nIt was during this time that we had the 2015 Developer Retreat in San Francisco, and I did fresh re-writes of the Big Four (Dashboard, News Headlines, Wristponder, and Beam Up) to make them more modular and maintainable. I'm glad I did now! I can can dive in, change some things, and only have to look at small parts of the app at any one time. I took great pleasure in perfecting my modular pattern and module interfaces, such as data_get_news_story(), or splash_window_reload_data(), allowing easy exchange of data and actions from anywhere in an app. I guess that was the result of getting better with each app I made, which is a natural part of software development, apparently.\n\n<strong>Moving Up</strong>\n\nRight as the office moved from Palo Alto to Redwood City (and myself getting my first apartment in RWC), we were already two months into a complete re-write of the Guides section. Reducing 78 guides crammed into ageing categories in inconsistent styles into about 60 new ones, written from the ground up show how to do everything in the same manner, from button input, to JS/Android/iOS communication (including images!), to bespoke frame-buffer drawing. I did such a thorough job that even now I frequently find myself using the snippets from those new guides in my own apps. MenuLayer? Sure, chuck that snippet in. No problem!\n\nThis last huge project was completely planned and executed by me, and I consider my last great gift to the community in an official capacity. I'm very proud of it, I won't lie! Here's where the magic happened, until the end:\n\n<a href=\"https://ninedof.files.wordpress.com/2016/12/img_20160127_170000.jpg\"><img class=\"aligncenter wp-image-2452\" src=\"https://ninedof.files.wordpress.com/2016/12/img_20160127_170000.jpg\" alt=\"img_20160127_170000\" width=\"413\" height=\"309\" /></a>\n\n<strong>Moving On</strong>\n\nIn March, <a href=\"http://arstechnica.com/gadgets/2016/03/pebble-to-lay-off-25-percent-of-workforce/\">Pebble made 25% (about 40 people) redundant</a>, but it was made very clear it was <strong>not from a lack of good work</strong>. At the time it felt like a cost-saving measure, and now we can look back with full clarity. Since my visa was tied to my job, I had to leave the country, my apartment, my bills/utilities, furniture rental, etc, as soon as possible. I had the option of trying to transfer my visa by getting another job in the Valley, but I was quite put out by the shock of it all, so just decided to pack it all in and come home. I also had to say rushed goodbyes to about 100 people I'd come to know over the last two years. Hardest of all was the Developer Relations team, who I'd shared many adventures, days out, travel trips, etc. with. It was very hard to do, but had to be done.\n\nI came back to the UK with everything I could fit into two airport style cases, and it was all I wanted - except my beloved walnut bass guitar, which was two inches too large (and would have cost half its value to transport properly), so I left it behind.\n\n<a href=\"https://ninedof.files.wordpress.com/2016/12/img_20160120_011241.jpg\"><img class=\"aligncenter wp-image-2454\" src=\"https://ninedof.files.wordpress.com/2016/12/img_20160120_011241.jpg\" alt=\"img_20160120_011241\" width=\"406\" height=\"304\" /></a>\n\nAfter Easter (which I'd spookily already booked flights and leave for), I went back to the US for a gallop around Yosemite with my Dad. We'd planned it in November 2015, planning to use my apartment to lessen the cost, but decided to go for it anyway, and boy, was it worth it!\n\n<a href=\"https://ninedof.files.wordpress.com/2016/12/img_20160606_102910.jpg\"><img class=\"aligncenter wp-image-2455\" src=\"https://ninedof.files.wordpress.com/2016/12/img_20160606_102910.jpg\" alt=\"img_20160606_102910\" width=\"398\" height=\"298\" /></a>\n\nComing back from this trip I had no idea what I was going to do with my Pebble development. I'd sunk so much time, and accrued too many thousands of users to stop completely. But my sudden ejection back to the UK left me without any energy to do anything. Days blurred into weeks. Eventually I got it together and started looking for jobs. After about 12 attempts, I found an extremely warm and welcome home at EVRYTHNG. I can say with confidence that I wouldn't have this job if it weren't for Thomas taking a chance on hiring me for Pebble and giving me the credential on my CV!  I also created the <a href=\"https://ninedof.wordpress.com/2016/07/20/dash-api-for-easy-pebble-and-android-integration/\">Dash API</a> to let C app developers use Android APIs, which was an interesting extension to the ecosystem.\n\n<strong>Keeping My Hand In</strong>\n\nI decided to maintain my apps, and only do improvements if I got the burst of energy and inspiration required to crack the dusty covers off monsters like Dashboard or News Headlines and gently coerce the insides into accepting new features. I reconnected with the developer community in my original role as a third party developer, but with some insight into how Pebble worked. But I still didn't see the recent acquisition coming. With so many days of just rumours to go off, the community admirably began simultaneously panicking and trying to preserve everything it could in case the servers and SDK ecosystem vanished overnight. Happily, <a href=\"https://developer.pebble.com/blog/2016/12/06/developer-community-update/\">it did not</a>, but we don't know how long it will last.\n\n<strong>The Future</strong>\n\nWe're at a cross roads. It's time for developers to keep the flame alive, as I know they can and want to do. I foresee a time when the servers are gone (no app login, timeline, lockers, dictation, etc), but we can still keep going with side-loaded apps (remember MyPebbleFaces? Ahead of its time, perhaps) until the watches die!\n\nAnd that's what I intend to do. I'll still maintain my apps (since the most popular ones I happen to use myself every day) as long as it is possible to do so with the SDK ecosystem. I used to have an Android app to distribute my Pebble app/face's PBW files, but it was a nightmare to keep in sync with the app store. Now the latter may one day disappear (or it may not!), I will dust it off and use it to preserve my offerings for all who are interested.\n\nIn addition to this maintenance, I will also be completing my open-source collection - including the Big Four! Well, Beam Up is already open source, so that leaves <strong>Dashboard</strong>, <strong>News Headlines</strong>, and <strong>Wristponder</strong>. Understand that this <strong>isn't</strong> because I'm abandoning them - this recent shift has put emphasis on the community carrying the torch, and this is the best way to keep contributing to the whole and helping others learn how things are done. And maybe now it'll force me to clean the code up! So look out for those in the next few weeks, when I get round to them in my free time. And I'll save time by not needing to upgrade them to Emery's display... bitter sweet.\n\nFor now, you can see all my open source apps <strong><a href=\"http://github.com/C-D-Lewis\">on my GitHub account</a></strong>.\n\n<strong>Thanks</strong>\n\nI hope it's passively become clear in reading this piece how much of a personal impact Pebble has had on my life. The experience of living and working in Palo Alto patched me up after my gruelling final year of uni. I got to see and experience things and places I never would have otherwise. I got to meet and make friends with so many Team Pebble members, and so many Pebble Developer community member too, who I very much hope to keep collaborating with into 2017 and hopefully beyond. So many people, places, occasions captured in so many photos -  I would never be able to post them all. But I am lucky to be able to look back fondly on all the good times.\n\n<img class=\"alignnone wp-image-2465 aligncenter\" src=\"https://ninedof.files.wordpress.com/2016/12/cjw_5824.jpg\" alt=\"cjw_5824\" width=\"510\" height=\"341\" />\n\nIn the words of what I imagine Eric said at the company's inception: \"Let's see how far we can take this thing!\"\n\n&nbsp;\n\n#PDR15",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "2473",
    "title": "News Headlines Now Open-Source!",
    "link": "https://ninedof.wordpress.com/2016/12/12/news-headlines-now-open-source/",
    "pubDate": "Mon, 12 Dec 2016 22:56:52 +0000",
    "postDate": "2016-12-12 22:56:52",
    "body": "In my last post, I promised I would open-source the remainder of my apps to promote community learning and collaboration. Well, I'm following through, and the first to be shown naked to the world (please don't judge my code, it's accumulated over at least two years!) is News Headlines!\n\nIncluded here is the code for the watchapp, as well as the backend server that's been serving pins obediently for the last year and a half or so.\n\nThe only things left out are API keys and the current public server URL, but these are configurable through simple config.json files if you want to roll your own.\n<h3 style=\"text-align:center;\"><a href=\"https://github.com/C-D-Lewis/news-headlines\">&gt;&gt;&gt; News Headlines source code  &lt;&lt;&lt;</a></h3>",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "2475",
    "title": "Tube Status Now Open-Source!",
    "link": "https://ninedof.wordpress.com/2016/12/13/tube-status-now-open-source/",
    "pubDate": "Tue, 13 Dec 2016 22:09:28 +0000",
    "postDate": "2016-12-13 22:09:28",
    "body": "As with yesterday's post, today's new open-source app is Tube Status!\n\nThis one also includes the backend server that powers the delay alerts through timeline.\n<h3 style=\"text-align:center;\"><a href=\"https://github.com/C-D-Lewis/tube-status\">&gt;&gt;&gt; Tube Status source code &lt;&lt;&lt;</a></h3>",
    "tags": [
      "Pebble"
    ]
  },
  {
    "id": "2482",
    "title": "Dashboard Now Open-source!",
    "link": "https://ninedof.wordpress.com/2016/12/18/dashboard-is-now-open-source/",
    "pubDate": "Sun, 18 Dec 2016 17:43:59 +0000",
    "postDate": "2016-12-18 17:43:59",
    "body": "This one took a while. Weighing in at 38 versions and I-don't-know-how-many reflected and hacked APIs, Dashboard is now open-source for all to see. This was probably the app that took the most development time until now (still on-going!), and I think the one I'm most proud of.\n\nI'm liking the idea of doing future releases via self-approved pull requests. Could be interesting!\n<h3 style=\"text-align:center;\"><a href=\"https://github.com/C-D-Lewis/dashboard\">&gt;&gt;&gt; Dashboard source code &lt;&lt;&lt; </a></h3>",
    "tags": [
      "Android",
      "Integration",
      "Java",
      "Pebble"
    ]
  },
  {
    "id": "2491",
    "title": "Vector Dev 1/1: Headlines Stream",
    "link": "https://ninedof.wordpress.com/2017/01/15/vector-dev-11-headlines-stream/",
    "pubDate": "Sun, 15 Jan 2017 11:18:08 +0000",
    "postDate": "2017-01-15 11:18:08",
    "body": "After Pebble disappeared, I felt adventurous enough to buy <em>another vendor's smartwatch</em> (!) just to see what another experience was like.\n\nIn one way, it was <a href=\"https://twitter.com/Chris_DL/status/818926070309289987\">an eerily similar experience</a>.\n\nIn terms of the watch itself, it's solidly built, has a larger display, and since charging on Boxing Day last year, it's <em>still</em> at about 50%! In terms of development, I was impressed with how you can write some JavaScript for a 'stream' widget that goes on a watchface, run it in the browser and then use that instance to <em>power an actual device from the phone app's appstore</em>!\n\nA good start. I was looking forward to the upcoming native app SDK, but sadly that doesn't look to be arriving after all. In the short time I spent with it, I ported over some code from News Headlines to show a fraction (which scrolled) of a latest BBC News headline on a watchface.\n\n<a href=\"https://ninedof.files.wordpress.com/2017/01/c1hyubbxaamh-pa.jpg\"><img class=\"aligncenter size-full wp-image-2492\" src=\"https://ninedof.files.wordpress.com/2017/01/c1hyubbxaamh-pa.jpg\" alt=\"c1hyubbxaamh-pa\" width=\"530\" height=\"398\" /></a>\n\nAnd the code is <a href=\"https://github.com/C-D-Lewis/vector-dev/blob/master/streams/headline.js\">available on GitHub</a>, for historical institutions to reference.\n\nI think I'll take a break from buying smartwatches for a while. In case I take another one down.",
    "tags": [
      "Uncategorized"
    ]
  },
  {
    "id": "2500",
    "title": "Blinking an LED & Infra Update",
    "link": "https://ninedof.wordpress.com/2017/03/04/blinking-an-led-infra-update/",
    "pubDate": "Sat, 04 Mar 2017 22:21:45 +0000",
    "postDate": "2017-03-04 22:21:45",
    "body": "For some just beginning their programming journeys a common example to conquer is blinking an LED, which usually goes something like this:\n\n[code language=\"c\"]\ndigitalWrite(13, HIGH);\ndelay(1000);\ndigitalWrite(13, LOW);\n[/code]\n\nFor me, I decided to try a much harder approach, in a fiddly effort that could be regarded as virtually pointless. Nevertheless, I persisted, because I thought it would be cool.\n\n<strong>The idea</strong>: blink a Blinkt LED on Server Pi whenever it serviced a request from the outside.\n\nFor those unfamiliar with my little family of Raspberry Pi minions, here is a brief overview:\n<ul>\n \t<li><a href=\"https://twitter.com/Chris_DL/status/836336013790298112\">Server Pi</a> - A Raspberry Pi 3 running three Node.js processes for various Pebble apps (News Headlines pin pusher, Tube Status pin pusher, unreleased notification and discovery service).</li>\n \t<li>Backlight Pi - Another Raspberry Pi 3 with a single Node.js Express server that allows any device in the house to HTTP POST a colour to be shown behind my PC.</li>\n \t<li><a href=\"https://twitter.com/Chris_DL/status/806750464322568193\">Monitor Pi</a> - A Raspberry Pi Zero W (W, as of today) that pings the three processes running on Server Pi <em>via</em> the GitHub Gist discovery mechanism to give me peace of mind that they're still up. It also checks the weather for ice and rain, and whether or not Greater Anglia have fallen over before I've taken the trouble of leaving for work at 7AM.</li>\n</ul>\nMaintaining this small fleet is a joy and a curse (one or both of \"my own mini infrastructure, yay!\" or  \"It's all fallen over because Node exceptions are weird, noo!\"), but since I started versioning it all in Git and adding crontab and boot scripts, it's become a lot easier. However, for this particular task, I found only one process can usefully control the Blinkt LEDs on top of Server Pi. Since this is a parameterised (services only) instance of Monitor Pi, it must be this process that does the blinking when a request is processed.\n\nSince I'm already a big fan of modular Node.js apps, I just added another module that sets up a single-endpoint Express server, and have each of the other three Server Pi processes POST to it whenever they service a request with their own Express servers. Neat!\n\nAn hour of synchronising and testing four processes locally and on-device later, and I now have a blue blinking LED whenever a request is serviced. Sadly the activity isn't as high as it was in the News Headlines heyday when it was tasked with converting news story images to Pebble-friendly 64 colour thumbnails and an experimental analytics service late last year, but with the interesting tentative steps the unreleased notification service is taking, Server Pi may end up seeing a bit more action than simple status checks and app news lookups in the future.\n\nWith all this work done, it's also time for <a href=\"https://ninedof.wordpress.com/2016/12/03/map-of-pebble-services-architecture/\">another </a>diagrammatic mess that I like to call my infrastructure...\n\n<a href=\"https://ninedof.files.wordpress.com/2017/03/services-architecture-march-20173.png\"><img class=\"aligncenter wp-image-2510 size-full\" src=\"https://ninedof.files.wordpress.com/2017/03/services-architecture-march-20173.png\" width=\"840\" height=\"714\" /></a>",
    "tags": [
      "Integration",
      "JavaScript",
      "Pebble",
      "Raspberry Pi"
    ]
  },
  {
    "id": "2517",
    "title": "How I Write My Node Apps",
    "link": "https://ninedof.wordpress.com/2017/07/14/how-i-write-my-node-apps/",
    "pubDate": "Fri, 14 Jul 2017 22:53:46 +0000",
    "postDate": "2017-07-14 22:53:46",
    "body": "With not a lot going on in terms of my Pebble apps (still very much in a 'if it ain't broke' situation), my hobbyist attentions in recent months turned to my Raspberry Pi. With not a lot of exciting ideas for hardware hacking, it occurred to me that <em>software</em> applications of the device might be a bit more interesting.\n\nBeginning with moving the backend services for News Headlines and Tube Status out of a $5 Digital Ocean Droplet to a $0 Raspberry Pi under my desk (with a few forwarded ports, of course), I've steadily refined the standard pattern used to write and maintain these apps. At the most there have been six, but today there are five:\n<ul>\n \t<li><a href=\"https://github.com/C-D-Lewis/news-headlines/tree/master/backend\"><strong><em>News Headlines Backend</em></strong></a> - pushing headlines pins.</li>\n \t<li><a href=\"https://github.com/C-D-Lewis/tube-status/tree/master/backend\"><strong><em>Tube Status Backend</em></strong></a> - pushing delay alerts pins.</li>\n \t<li><a href=\"https://github.com/C-D-Lewis/led-server\"><strong><em>LED Server</em></strong></a> - providing a localhost RESTful interface to the Blinkt! hat on the physical Pi between apps.</li>\n \t<li><a href=\"https://github.com/C-D-Lewis/attic\"><strong><em>Attic</em></strong></a> - a new app, serving and receiving simple JSON objects for storage, backed by a Gist.</li>\n \t<li><a href=\"https://github.com/C-D-Lewis/monitor\"><strong><em>Monitor</em></strong></a> - responsible for monitoring uptime of the other services, and providing Greater Anglia and TfL Rail outage alerts to myself via my watch. Monitor actually just schedules regular invocations of its plugins' <code>update</code> interface function, making it extremely extensible.</li>\n</ul>\nWith my adventures in Node and discovering convenient or standardised ways of doing things like modules, data storage/sharing, soft configuration, etc. these apps have all been refined to use common file layouts, common modules, and a standard template. With its relatively stable state of maturity, I'd like to share this with readers now!\n\n<em>What? It's not February 2017 anymore? The pattern has matured even further, but I've only now found the time to write this blog post? Well, OK then, we can make some edits...</em>\n\n<em><strong>Disclaimer: </strong><strong>This isn't an implementation of any actual accepted standard process/pattern I know of, just the optimum solution I have reached and am happy with under my own steam. Enjoy!</strong></em>\n\n<strong>File Layout</strong>\n\nAs you can see from any of the linked repositories above, the basic layout for one of my Node apps goes as follows:\n<pre>src/\n  modules/\n    app-specific-module.js\n  common/\n    config.js\n    log.js\n  main.js\npackage.json\nconfig.json\n.gitignore   // 'config.json'</pre>\nThe <code>src</code> folder contains <code>modules</code> (modules that are specific to the app), and <code>common</code> (using common modules shared between all apps, such as <code>log.js</code> (standard logger, <code>pid</code> logging, and <code>uncaughtException</code> &amp; <code>unhandledRejection</code> handlers), as well as <code>main.js</code>, which initialises the app.\n\nThis pattern allows all apps to use common modules that can be guaranteed not only the presence of each other, but of a common <code>config.json</code> that they can all use to draw configuration information (such as log level, API keys, latitude and longitude, etc.).\n\n<strong>Soft Configuration</strong>\n\nOf particular interest is the <code>config.js</code> module, which all modules that use <code>config.json</code> information include <em>instead</em> of <code>config.json</code>. It is untracked in git, and so can safely contain sensitive keys and other values. It also guarantees that keys required by modules are present It also provides some additional benefits:\n<ul>\n \t<li>Ensuring the <code>config.json</code> file is present</li>\n \t<li>Allowing modules that include it to requireKeys to be present in the <code>config.json</code> file, that they themselves require. <a href=\"https://github.com/C-D-Lewis/monitor/blob/master/src/modules/timeline.js#L6\">Here is an example</a>.</li>\n \t<li>Stop app launch if any of these keys are not present</li>\n \t<li>Allow access to the app's launch directory context.</li>\n</ul>\nFor example, a fictitious module may require an API key to be present in the <code>ENV</code> member of <code>config.json</code>:\n<pre>const config = require('../common/config');\n\nconfig.requireKeys('fictitious.js', {\n  ENV: {\n    API_KEY: ''\n  }\n});</pre>\nThe way <code>config.js</code> behaves, if this structure is not present in <code>config.json</code>, the app will not start, and will tell the operator (i.e: me!) that the value should be provided. Handy!\n\n<strong>Standard Modules</strong>\n\nAny of these Node apps (and any new apps that come along in the future) can make use of a library of drop-in standard modules, many of which can be found in action in any of the linked repositories at the top of this post), including:\n<ul>\n \t<li><code>event-bus.js</code> - Provide a pub/sub 'event bus' style of communication between modules</li>\n \t<li><code>fcm.js</code> - Send an event to Firebase Cloud Messaging to show me a notification</li>\n \t<li><code>led-server-client.js</code> - Communicate with the localhost Blinkt! LED Server instance</li>\n \t<li><code>scraper.js</code> - Scrape some text using a series of 'before' markers, and one after 'marker'</li>\n \t<li><code>config.js</code> - Access 'smart' configuration with additional capabilities</li>\n \t<li><code>gist-sync.js</code> - Synchronise a local JSON file/set with a remote Gist</li>\n \t<li><code>leds.js</code> - Directly drive the connected Blinkt! hat</li>\n \t<li><code>db.js</code> - Emulate a simple get/set/exists interface with a local JSON file</li>\n \t<li><code>ip.js</code> - Look up the address of the 'mothership' server (either Server Pi or a Digital Ocean Droplet)</li>\n \t<li><code>log.js</code> - Standard logger, asserts, uncaught/unhandled catching.</li>\n</ul>\n<strong>Wrapping Up</strong>\n\nSo with this standard pattern to my Node apps, it makes it a lot easier to manage the common modules as they are updated/improved, manage SCM untracked soft configuration values (as well as make sure I provide them after migration!), and allow modules to be as drop-in as possible. As with most/all of my hobbyist programming, these approaches and modules are the result of personal refinement, and not from any accepted standard, which is my preferred style when I am the only consumer. Maximise the learnings!\n\nExpect more sporadic information as these apps develop, and enjoy the pins!",
    "tags": [
      "Integration",
      "JavaScript",
      "Pebble",
      "Raspberry Pi"
    ]
  },
  {
    "id": "2525",
    "title": "Music-coloured Backlighting with the Spotify API",
    "link": "https://ninedof.wordpress.com/2017/09/03/music-coloured-backlighting-with-the-spotify-api/",
    "pubDate": "Sun, 03 Sep 2017 10:59:07 +0000",
    "postDate": "2017-09-03 10:59:07",
    "body": "Adding Raspberry Pi based backlighting to my desktop PC with <a href=\"https://github.com/C-D-Lewis/backlight-server\">backlight-server</a>, and moving to a new flat gave me an interesting idea - add an API to the backlight server to set the lights to the dominant colour of whatever album is playing in my Spotify account. How hard could it be?\n\nThe first step was to read up on the Spotify API. I quickly found the <a href=\"https://developer.spotify.com/web-api/get-the-users-currently-playing-track/\">'Get the User's Currently Playing Track'</a> API, which fit the bill. Since it deals with user data, I had to authenticate with their <a href=\"https://developer.spotify.com/web-api/authorization-guide/#authorization_code_flow\">Authorization Code Flow</a>, which requires multiple steps as well as a static address for a callback containing the authorization code granted to my application. I experimented with giving the Spotify Developer site the IP address of my Server Pi, but that could change, which would mean editing the application listing each time that happened, which was unacceptable for a seamless 'setup and forget' experience I was aiming for.\n\nThe solution was to resurrect my DigitalOcean account to host a small Node.js app with a simple task - receive the callback from Spotify with the authorization code with which access and refresh codes would be granted, and fetch and determine the dominant colour of the album art currently playing. This service would in turn be used by backlight-server to light up my living room with the appropriate colour.\n\nThis authorization flow took a long time to get right, both from a code perspective (I used the <a href=\"https://github.com/thelinmichael/spotify-web-api-node\">spotify-web-api-node</a> npm package to make things programmatically easier), as well as a behavioural perspective (when should the token be refreshed? How to propagate errors through different services? How can the app know it is authorized at any given time?), but once it worked, it was very cool to see the room change colour as my playlist shuffled by.\n\nI had a half-hearted attempt at figuring out the dominant colour myself using buckets and histograms, but in the end decided to preserve my sanity and use the <a href=\"https://github.com/akfish/node-vibrant\">node-vibrant</a> package instead, which worked like magic!\n\nSo this is basically how the whole thing works, and you can see the code for the <a href=\"https://github.com/C-D-Lewis/spotify-auth\">spotify-auth microservice on GitHub</a>. The diagram below may also help explain:\n\n<a href=\"https://ninedof.files.wordpress.com/2017/09/spotify-auth-flow.png\"><img class=\"aligncenter size-full wp-image-2526\" src=\"https://ninedof.files.wordpress.com/2017/09/spotify-auth-flow.png\" alt=\"\" width=\"545\" height=\"400\" /></a>So what next? Well, those smart RGB light bulbs are looking a lot more interesting now...",
    "tags": [
      "Integration",
      "JavaScript",
      "Raspberry Pi"
    ]
  },
  {
    "id": "2533",
    "title": "Simpler Inter-service Communication with MBus",
    "link": "https://ninedof.wordpress.com/2017/12/24/simpler-inter-service-communication-with-mbus/",
    "pubDate": "Sun, 24 Dec 2017 13:33:29 +0000",
    "postDate": "2017-12-24 13:33:29",
    "body": "A problem I had found when setting up my Node.js services on a new Raspberry Pi (or resetting one that had gotten into a bad state) was keeping track of the individual port numbers of each one. This might typically look like this:\n<ul>\n \t<li>New Headlines Backend - 5000</li>\n \t<li>Tube Status Backend - 5050</li>\n \t<li>LED Server - 5001</li>\n \t<li>Backlight Server - 5005</li>\n \t<li>Attic - 5500</li>\n \t<li>Spotify Auth - 5009</li>\n</ul>\n...and so on. This wasn't only a problem with setup, but also with maintaining all the numerous <code>config.json</code> files for each app that needed to talk to any of the other ones.\n\nSo to do something about it, I decided to have a go implementing a central message broker service (nominally called Message Bus, or MBus) from scratch (one of the key features of my hobbyist development, as you tend to learn a lot more this way). This new service had to be generic to allow all kinds of messages to flow between the services that they define themselves. It had to be fault tolerant and so should use JSON Schema to make sure the messages are all of the correct format. And lastly, it shouldn't care what the connection details are for each app at startup.\n\n&nbsp;\n\n<strong>Client Registration and Message Exchange</strong>\n\nTo solve this last problem, each app uses a common Node.js modules that knows the port of a local instance of MBus and requests a port assignment. MBus responds with a randomly rolled port number from a range (making sure it isn't already allocated to another app), and the client app then creates an Express server that listens on the allocated port. If MBus receives a message with a known client app as the destination, it simply sends it on to that port within the local machine, where the client app will be listening as expected. These two processes are summarised below:\n\n<a href=\"https://ninedof.files.wordpress.com/2017/12/2-client-registration-and-exchange.png\"><img class=\"aligncenter size-full wp-image-2534\" src=\"https://ninedof.files.wordpress.com/2017/12/2-client-registration-and-exchange.png\" alt=\"\" width=\"545\" height=\"483\" /></a>\n\n&nbsp;\n\n<strong>Client Implementation</strong>\n\nTo implement a new client to talk to MBus, it includes the <code>mbus.js</code> common module, and registers itself at runtime. It also specifies the message schema it will expect from MBus using conventional JSON Schemas:\n\n[code language=\"js\"]\nconst mbus = require('../node-common').mbus();\n\nconst GET_MESSAGE_SCHEMA = {\n  type: 'object',\n  required: [ 'app', 'key' ],\n  properties: {\n    app: { type: 'string' },\n    key: { type: 'string' }\n  }\n};\n\nconst SET_MESSAGE_SCHEMA = {\n  type: 'object',\n  required: [ 'app', 'key', 'value' ],\n  properties: {\n    app: { type: 'string' },\n    key: { type: 'string' },\n    value: {}\n  }\n};\n\nasync function setup() {\n  await mbus.register();\n\n  mbus.addTopic('get', require('../api/get'), GET_MESSAGE_SCHEMA);\n  mbus.addTopic('set', require('../api/set'), SET_MESSAGE_SCHEMA);\n}\n[/code]\n\nOnce this is done, the <code>config.json</code> is also updated to specify where it can find the central MBus instance and the name it is to be identified as when messages are destined for it:\n\n[code language=\"js\"]\n{\n  &quot;MBUS&quot;: {\n    &quot;HOST&quot;: &quot;localhost&quot;,\n    &quot;PORT&quot;: 5959,\n    &quot;APP&quot;: &quot;LedServer&quot;\n  }\n}\n[/code]\n\nThe <code>mbus.js</code> module also takes care of the message metadata and the server checks the overall packet schema:\n\n[code language=\"js\"]\nconst MESSAGE_SCHEMA = {\n  type: 'object',\n  required: [ 'to', 'from', 'topic', 'message' ],\n  properties: {\n    status: { type: 'integer' },\n    error: { type: 'string' },\n    to: { type: 'string' },\n    from: { type: 'string' },\n    topic: { type: 'string' },\n    message: { type: 'object' },\n    broadcast: { type: 'boolean' }\n  }\n};\n[/code]\n\n&nbsp;\n\n<strong>Example Implementations</strong>\n\nYou can find the code for <a href=\"https://github.com/C-D-Lewis/mbus\">MBus</a> in the GitHub repository, and also check some example clients including <a href=\"https://github.com/C-D-Lewis/attic\">Attic</a>, <a href=\"https://github.com/C-D-Lewis/led-server\">LED Server</a>, and <a href=\"https://github.com/C-D-Lewis/monitor\">Monitor</a>.\n\nBarring a few client app updates (luckily no very serious user-facing apps depend on these services for core functionality right now), all the main services now use MBus to talk to each other. The image below shows these setups for the main machines they are deployed on:\n\n<a href=\"https://ninedof.files.wordpress.com/2017/12/services-1.png\"><img class=\"aligncenter size-full wp-image-2535\" src=\"https://ninedof.files.wordpress.com/2017/12/services-1.png\" alt=\"\" width=\"545\" height=\"630\" /></a>\n\nFinally, over the next few months I'll be updating what clients there are to talk to their remote counterparts in this manner, and also take advantage of the fact it is now each to add and address future services in the same manner without needing to configure ports and addresses for every individual service.",
    "tags": [
      "Integration",
      "JavaScript",
      "Raspberry Pi"
    ]
  },
  {
    "id": "2541",
    "title": "Tests With Extra Sweetness",
    "link": "https://ninedof.wordpress.com/2018/02/17/tests-with-extra-sweetness/",
    "pubDate": "Sat, 17 Feb 2018 22:11:28 +0000",
    "postDate": "2018-02-17 22:11:28",
    "body": "A quick post about moving my Node app tests to <a href=\"https://mochajs.org/\">Mocha</a> and <a href=\"http://chaijs.com/\">Chai</a>. These are frameworks used where I work, and I figured I may as well learn something new and have more confidence in my Node apps when I deploy them, so how hard can it be?\n\nTurns out, quite easy. These testing frameworks are deigned to be flexible and resemble plain-english test descriptions. In fact, the new testing code looks a lot like my home-grown test framework. Have a look below for a comparison (taken from the <a href=\"https://github.com/C-D-Lewis/led-server\"><code>led-server</code></a> project):\n\n(You can see the implementation of <code>testBed</code> module in the <a href=\"https://github.com/C-D-Lewis/node-common/blob/master/testBed.js\"><code>node-common</code></a> project)\n\n<strong>Home-grown</strong>\n\n[code language=\"js\"]\nasync function testSetAll(expected) {\n  const response = await testBed.sendConduitPacket({\n    to: 'LedServer',\n    topic: 'setAll',\n    message: { all: [ 25, 25, 52 ] }\n  });\n\n  testBed.assert(response.status === 200 &amp;&amp; response.message.content === 'OK',\n    'setAll: response contains status:200 and content:OK');\n}\n\nasync function testSetPixel(expected) {\n  const response = await testBed.sendConduitPacket({\n    to: 'LedServer',\n    topic: 'setPixel',\n    message: {\n      '0': [ 25, 25, 52 ],\n      '1': [ 100, 100, 100 ]\n    }\n  });\n\n  testBed.assert(response.status === 200 &amp;&amp; response.message.content === 'OK',\n    'setPixel: response contains status:200 and content:OK');\n}\n[/code]\n\n<strong>Mocha/Chai</strong>\n\n[code language=\"js\"]\ndescribe('Conduit topic: setPixel', () =&gt; {\n  it('should return 200 / OK', async () =&gt; {\n    const response = await testBed.sendConduitPacket({\n      to: 'LedServer',\n      topic: 'setPixel',\n      message: {\n        '0': [ 10, 20, 30],\n        '1': [30, 50, 60]\n      }\n    });\n\n    expect(response.status).to.equal(200);\n    expect(response.message.content).to.equal('OK');\n  });\n});\n\ndescribe('Conduit topic: setAll', () =&gt; {\n  it('should return 200 / OK', async () =&gt; {\n    const response = await testBed.sendConduitPacket({\n      to: 'LedServer',\n      topic: 'setAll',\n      message: { all: [64,64,64] }\n    });\n\n    expect(response.status).to.equal(200);\n    expect(response.message.content).to.equal('OK');\n  });\n});\n[/code]\n\nAs a result, my script to run all the test suites of each Node app (after booting them all together locally) looks like a lot of this - all green, and no red!\n\n<a href=\"https://ninedof.files.wordpress.com/2018/02/screen-shot-2018-02-17-at-22-09-10.png\"><img class=\"aligncenter size-full wp-image-2542\" src=\"https://ninedof.files.wordpress.com/2018/02/screen-shot-2018-02-17-at-22-09-10.png\" alt=\"\" width=\"545\" height=\"522\" /></a>\n\nHopefully this new skill will enable me to write better code both personally and professionally in the future - I may even try out TDD for my next project!",
    "tags": [
      "Integration",
      "JavaScript",
      "Raspberry Pi"
    ]
  },
  {
    "id": "2546",
    "title": "FitBit Development - Round 1 Review and Future Plans",
    "link": "https://ninedof.wordpress.com/2018/03/30/fitbit-development-round-1-review-and-future-plans/",
    "pubDate": "Fri, 30 Mar 2018 17:15:56 +0000",
    "postDate": "2018-03-30 17:15:56",
    "body": "<a href=\"https://ninedof.files.wordpress.com/2018/03/fitbit-round-1-banner.png\">\n<img class=\"aligncenter size-full wp-image-2547\" src=\"https://ninedof.files.wordpress.com/2018/03/fitbit-round-1-banner.png\" alt=\"\" width=\"545\" height=\"172\" /></a>\n\nAfter some months and a couple of releases for the FitBit Ionic a few months ago, here are the first batch of watchfaces and app for both Ionic and the new Versa! Reviewed and released right now are:\n<ul>\n\t<li><strong>Elemental</strong> - An original watchface, and my first completed for Ionic.</li>\n\t<li><strong>Tube</strong> <strong>Status</strong> - Ported from Pebble, but with an updated pager UI,</li>\n\t<li><strong>Isotime</strong> - Ported from Pebble, with higher resolution digits, though sadly no longer rendered in individual blocks with <a href=\"https://github.com/C-D-Lewis/pge\">PGE</a>.</li>\n\t<li><strong>Beam Up</strong> - Ported from Pebble, the classic (and one of my oldest!) animated watchface, complete with inverting beams (but this time faked with clever timings, instead of using an inverter layer or framebuffer hack.</li>\n</ul>\nThe development experience has gotten much better, with very good connectivity of the developer connection with the updates paving the way for Versa, and also due to the <a href=\"https://dev.fitbit.com/blog/2018-03-13-announcing-fitbit-os-2.0-and-simulator/\">FitBit OS Simulator</a>, which closes the iterative gap from minutes to seconds!\n\nSo what's next?\n\n<a href=\"https://apps.getpebble.com/en_US/application/5387b383f60819963900000e\">News Headlines</a> port needs to be completed, though getting the same UI as the Pebble app is proving to be a layout challenge. So I may opt to scrap it and build a new one, similar for Tube Status.\n\nI also want to create some more original watchfaces for FitBit OS to take advantage of the gorgeous full-color screens these watches have. So look out for more!\n\nI'd also love to port <a href=\"https://apps.getpebble.com/en_US/application/53ec8d840c3036447e000109\">Dashboard</a> (as I still use it regularly, and many have found it an invaluable remote and automation agent), but that will have to wait until an equivalent of <a href=\"https://developer.pebble.com/guides/communication/using-pebblekit-android/\">PebbleKit Android</a> is released by FitBit, or some other Intent-based mechanism for receiving app messages in a third party Android app.\n\nIn the meantime, you can find the source for all my FitBit OS apps and watchfaces in my <a href=\"https://github.com/C-D-Lewis/fitbit-dev\">fitbit-dev GitHub repo</a>.",
    "tags": [
      "FitBit",
      "Integration",
      "JavaScript",
      "Pebble"
    ]
  },
  {
    "id": "2553",
    "title": "FitBit Development - Round 2",
    "link": "https://ninedof.wordpress.com/2018/05/19/fitbit-development-round-2/",
    "pubDate": "Sat, 19 May 2018 14:36:47 +0000",
    "postDate": "2018-05-19 14:36:47",
    "body": "<a href=\"https://ninedof.files.wordpress.com/2018/05/banner2.png\"><img class=\"aligncenter wp-image-2554 size-full\" src=\"https://ninedof.files.wordpress.com/2018/05/banner2.png\" alt=\"\" width=\"545\" height=\"124\" /></a>\n\nIt's been some time since the last post and now some new apps are available! The lineup now includes:\n<ul>\n\t<li><strong>Upcoming</strong> - A simple card-based app that shows the title, description, time, and date of the next ten events on your primary Google calendar.</li>\n\t<li><strong>News Headlines</strong> - A new design for the tried and true News Headlines app on Pebble (one of my oldest), which re-uses the card UI built for Upcoming.</li>\n</ul>\nSince both these new apps use the same layout and code style, I'm considering perhaps trying to make it into a UI framework that can be easily reused with other data sets... Perhaps one for the future.\n\nThese apps were the two I was most looking forward to having completed on FitBit, since one replaces the extremely important ability to quickly see what meetings I have coming up that I got from Pebble timeline, and the other enables me to stay vaguely up to date with the world (this weekend's wedding excepting!) in small glimpses.\n\nSo what's next? As mentioned in the last post, I'd like to try and get back to basics with some new watchface concepts, and also explore the possibility of beginning to bring some Dashboard functionality to FitBIt, depending on which data is available. I'm thinking web APIs for networks and battery level to get started, but sadly no actuation for the time being.\n\nAs always, you can see the code for yourself <a href=\"http://github.com/C-D-Lewis/fitbit-dev\">on GitHub</a>.",
    "tags": [
      "FitBit",
      "Integration",
      "JavaScript",
      "Pebble",
      "Releases",
      "Uncategorized"
    ]
  },
  {
    "id": "2559",
    "title": "Creating a Miniature Scripting Language",
    "link": "https://ninedof.wordpress.com/2018/09/29/creating-a-miniature-scripting-language/",
    "pubDate": "Sat, 29 Sep 2018 21:10:48 +0000",
    "postDate": "2018-09-29 21:10:48",
    "body": "After using a number of proper programming languages for various projects over the last several years, one couple stood out as an interesting concepts - the DCPU-16 language from <a href=\"https://en.wikipedia.org/wiki/0x10c\">0x10c</a>, used to program an in-game computer. This was sadly never fully realised beyond community emulators after the project was abandoned, but the idea was to provide a simple language that players could learn to use to advantage themselves. For example, to tell a weapon how to track another ship, given its bearing and speed.\n\nI'd like to see a game fully utilise such a concept one day, but until then, I'd thought I'd have a go at creating a <strong>very</strong> simple pseudo-language and see what would be involved.\n\n<strong>The Result</strong>\n\nTurns out the easiest way to go about it to is to use an existing language as a platform - a <a href=\"https://en.wikipedia.org/wiki/Source-to-source_compiler\">transpiler</a>. For example, languages like TypeScript and Dart that are transformed to JavaScript, a much more portable language (browsers, Node, <a href=\"https://pebble.github.io/rockyjs/\">watches</a>, etc.) that can easily be run in many places.\n\nTo this end I set out (in my typically enjoyed 'do it yourself' style) to try and make a simplified language that is converted into JavaScript, line for line. The result is a project unimaginatively dubbed '<a href=\"https://github.com/C-D-Lewis/islang\">islang</a>' (the 'is' language), so called after the simplest possible statement. The aim is to create a 'language' that is easily learned and uses as little symbols or special syntax rules as possible, which I have seen pose a barrier to new programmers who have never seriously used a programming language before, and would say something like 'why does that line only have a curly bracket in?'\n\n<strong>Is</strong>\n\nSo without further ado, here is a sample program that implements a typical 'greeter' scenario:\n\n[code]\ntask greet gets name\n  log 'Hello there, {name}!'\nend\n\ntask main\n  value name is 'Chris'\n  run greet with name\nend\n\nrun main\n[/code]\n\nHopefully you'll notice that there aren't many special characters. Even the indentation isn't really necessary, but as always aids readability. The structure is based on classic variables, sub-routines (here called 'tasks'), and the concepts of assignment and calling those tasks.\n\nLet's break it down:\n<ul>\n \t<li>Two tasks are defined, one of which takes a single argument called 'name'.</li>\n \t<li>This first task uses 'log' and a simplified version of JavaScript's template strings to log the name as part of a whole sentence.</li>\n \t<li>The second task is the 'main' task.</li>\n \t<li>The 'main' task defines a variable (called a 'value') which <em>is</em> 'Chris', a string value.</li>\n \t<li>The earlier task 'greet' is then called with the 'run' statement, and the variable is passed to it using 'with' to indicate that the two happen together.</li>\n \t<li>Finally, 'main' is called from the bottom of the script.</li>\n</ul>\nThe output is thus:\n\n[code]\nHello there, Chris!\n[/code]\n\n<strong>Compilation</strong>\n\nTake a look at the project on <a href=\"https://github.com/C-D-Lewis/islang\">GitHub</a>, specifically '<a href=\"https://github.com/C-D-Lewis/islang/blob/master/src/transform.js\">transform.js</a>', which uses a sequence of conventional rules to mould the input line (and its 'tokens', the individual words in the line) into the output line of JavaScript. This function is includes by 'index.js' and processes every line in the source '.is' file into one output JavaScript files called 'build.js'. The programmer can then run their program using node as usual.\n\n[code]\nnpm run compile ./my_program.is\n[/code]\n\n\n[code]\nnode build.js\n[/code]\n\nIn this manner, more rules can be added, though it is limited right now to one rule per line, and only a few cases where combinations occur (such as returning a function call). This could be made more sophisticated in the future, but I confess as an Electronic Engineering graduate I have never studied how real compilers work!\n\n<strong>A More Complex Example</strong>\n\nHere's a slightly more complex example that calculates the result of a series of Fibonacci calculations:\n\n[code]\ntask fibonacci gets input\n  when input &lt;= 1\n    return input\n  end\n\n  // return fib(n-1) + fib(n-2);\n  value n_minus_1 is input - 1\n  value n_minus_2 is input - 2\n  value result_1 is run fibonacci with n_minus_1\n  value result_2 is run fibonacci with n_minus_2\n  return result_1 + result_2\nend\n\ntask main\n  value fib_output is run fibonacci with 9\n  log 'fib_output: {fib_output}'\nend\n\nrun main\n[/code]\n\nThe pattern is similar, with tasks set up and called from a 'main' task. Another task performs the 'f(n-1) + f(n-2)' calculation and results the result, using some other features of the language.\n\nHere's the resulting JavaScript:\n\n[code language=\"js\"]\n// compiled from islang source\n\nfunction fibonacci (input) {\n  if (input &lt;= 1) {\n    return input;\n  }\n\n  // return fib(n-1) + fib(n-2);\n  let n_minus_1 = input - 1;\n  let n_minus_2 = input - 2;\n  let result_1 = fibonacci(n_minus_1);\n  let result_2 = fibonacci(n_minus_2);\n  return result_1 + result_2;\n}\n\nfunction main () {\n  let fib_output = fibonacci(9);\n  console.log(`fib_output: ${fib_output}`);\n}\n\nmain();\n[/code]\n\n\n[code]\nfib_output: 34\n[/code]\n\nLooks familiar, right?\n\n<strong>Language Features</strong>\n\nRight now those are:\n<ul>\n \t<li>Variables - declaration and assignment using literal numbers and strings, expressions (simple arithmetic etc.) and as function results.</li>\n</ul>\n\n[code]\nvalue my_value is 10\n\nmy_value is 20\n\nmy_value is run increment my_value\n[/code]\n\n<ul>\n \t<li>Functions - tasks can take zero or more arguments, and return values.</li>\n</ul>\n\n[code]\ntask increment gets input_value\n  return input_value + 1\nend\n[/code]\n\n<ul>\n \t<li>Control - 'when' and 'until' allow use of 'if' and 'while' loop control statements using ordinary simple JavaScript operators.</li>\n</ul>\n\n[code]\nwhen temperature  15\n  log 'Might be cold out there'\n  temperature is temperature + 1\nend\n[/code]\n\n<ul>\n \t<li>Objects - 'object' and 'property' keywords allow contruction of simple objects.</li>\n</ul>\n\n[code]\nobject car\ncar property color is 'red'\ncar property num_wheels is 4\n\nlog 'This {car.color} car has only {car.num_wheels} wheels!'\n[/code]\n\n<strong>Wrapping Up</strong>\n\nThis turned out to be longer than I thought it would be, but the general point is - this is a lot of run, and I hope to add more features in the future, maybe to even use it to teach or provide some more depth or extensibility to another project...\n\nIf you're interested, check out some of the <a href=\"https://github.com/C-D-Lewis/islang/tree/master/examples\">example programs</a>, and give the compilation a try!",
    "tags": [
      "Other Programming"
    ]
  },
  {
    "id": "2567",
    "title": "FitBit Development - Round 3",
    "link": "https://ninedof.wordpress.com/2020/03/08/fitbit-development-round-3/",
    "pubDate": "Sun, 08 Mar 2020 15:52:29 +0000",
    "postDate": "2020-03-08 15:52:29",
    "body": "It's been a while since the last post! I guess that's what happens when you go even deeper into your hobby as your job... I now work on frontend and backend projects and services instead of writing documentation for those at EVRYTHNG, and it's just about as varied, challenging, and rewarding as I expected, which is great. I've been working with many new libraries and technologies including:\n<ul>\n \t<li>React with React Redux</li>\n \t<li>React Native (to a small degree)</li>\n \t<li>Terraform and continuous integration services such as Circle CI pipelines.</li>\n \t<li>MongoDB</li>\n</ul>\nI've also continued to implement a collaborative approach to EVRYTHNG's open REST API (beyond <a href=\"https://developers.evrythng.com/docs\">writing the documentation</a>) with use of <a href=\"https://github.com/evrythng/openapi\">OpenAPI 3.0 spec files</a> and tools to generate documentation in the same identical style to what I'd arrived at in the first year and a half curating it by hand. It's really neat to be able to version and review changes to spec files, then magically generate the same level of quality technical documentation instead of one person writing it all by hand. And of course, contributions to EVRYTHNG's <a href=\"https://github.com/evrythng/evrythng.js\">SDKs</a> and <a href=\"https://github.com/evrythng/evrythng-cli\">open-source tools</a>.\n\n<strong>FitBit Development</strong>\n\nIn the meantime, I've only been sparsely developing software as a hobby, and mostly for the ever-evolving <a href=\"https://github.com/c-d-lewis/node-microservices\">node-microservices</a> project, and keeping my FitBit apps up to date as new devices and features are added to the FitBit ecosystem. As a result, all apps and faces are available for all devices, and as of yesterday I've finally started experimenting with the new Always on Display mode available to SDK based apps. Getting closer and closer to Pebble-like functionality!\n\nIn fact, you can <a href=\"https://gallery.fitbit.com/search?terms=chris%20lewis\">search for my name</a> to see all of those on offer:\n\n<a href=\"https://ninedof.files.wordpress.com/2020/03/fitbit-round-3.png\"><img class=\"aligncenter size-full wp-image-2571\" src=\"https://ninedof.files.wordpress.com/2020/03/fitbit-round-3.png\" alt=\"\" width=\"545\" height=\"361\" /></a>\n\n<strong>Pebble Development (!?)</strong>\n\nIn other developments, changes (once again) to Google's developer program policies meant I had to dust off the codebase for Dashboard to push an update to remove the donation button. Unfortunately this meant that it had to be upgraded to a much newer SDK version. Which meant that extra measures had to be taken to continue to not be killed in the background. Luckily due to the code being open source I had some help. It's nice to see that app in action again after so long away from it:\n\n<a href=\"https://ninedof.files.wordpress.com/2020/03/img_20200204_210524.jpg\"><img class=\"aligncenter  wp-image-2574\" src=\"https://ninedof.files.wordpress.com/2020/03/img_20200204_210524.jpg\" alt=\"\" width=\"414\" height=\"414\" /></a>\n\nThat's all for now, hopefully more projects and FitBit apps to come. I'd like to try and do something interesting and a bit different using the Versa 2's gorgeous color OLED display...",
    "tags": [
      "Android",
      "FitBit"
    ]
  }
]