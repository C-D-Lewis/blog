{
  "title": "Pebble SDK 2.0 Tutorial #8: Android App Integration",
  "fileName": "0086-Pebble-SDK-20-Tutorial-8-Android-App-Integration.md",
  "dateTime": "2014-04-03 23:33:53",
  "tags": [
    "Android",
    "Pebble"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "<strong>Required Reading"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #2: Telling the Time.\" href=\"http://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/\">Pebble SDK 2.0 Tutorial #2: Telling the Time</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #3: Images and Fonts\" href=\"http://ninedof.wordpress.com/2013/12/22/pebble-sdk-2-0-tutorial-3-images-and-fonts/\">Pebble SDK 2.0 Tutorial #3: Images and Fonts</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #4: Animations and Timers\" href=\"http://ninedof.wordpress.com/2013/12/29/pebble-sdk-2-0-tutorial-4-animations-and-timers/\">Pebble SDK 2.0 Tutorial #4: Animations and Timers</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations\" href=\"http://ninedof.wordpress.com/2014/01/11/pebble-sdk-2-0-tutorial-5-buttons-and-vibrations/\">Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS\" href=\"http://ninedof.wordpress.com/2014/02/02/pebble-sdk-2-0-tutorial-6-appmessage-for-pebblekit-js/\">Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #7: MenuLayers\" href=\"http://ninedof.wordpress.com/2014/03/13/pebble-sdk-2-0-tutorial-7-menulayers/\">Pebble SDK 2.0 Tutorial #7: MenuLayers</a>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Introduction"
    },
    {
      "type": "header",
      "level": 2,
      "text": "NOTE: This section requires knowledge on how to set up a new Android project in an IDE such as <a title=\"Eclipse IDE\" href=\"https://www.eclipse.org\">Eclipse</a>! I will assume you are using Eclipse"
    },
    {
      "type": "paragraph",
      "text": "After a few requests and comments, it's time to revisit the Android app communication from <a title=\"Pebble Watch Face SDK Tutorial #6: 2 Way Communication with Android\" href=\"http://ninedof.wordpress.com/2013/07/11/pebble-watch-face-sdk-tutorial-6-2-way-communication-with-android/\">the old 1.X tutorial series</a> and produce an example app for the new 2.0 SDK."
    },
    {
      "type": "paragraph",
      "text": "For the purposes of simplicity, we will be extending the Pebble SDK <code>new-project</code> example, which starts us off with a nice button setup. To do this, create a new empty CloudPebble project, and add this code to the main <code>.c</code> file:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"cpp\" -->\n<pre><div class=\"code-block\">\n#include <pebble.h>\n\nstatic Window *window;\nstatic TextLayer *text_layer;\n\nstatic void select_click_handler(ClickRecognizerRef recognizer, void *context) {\n  text_layer_set_text(text_layer, \"Select\");\n}\n\nstatic void up_click_handler(ClickRecognizerRef recognizer, void *context) {\n  text_layer_set_text(text_layer, \"Up\");\n}\n\nstatic void down_click_handler(ClickRecognizerRef recognizer, void *context) {\n  text_layer_set_text(text_layer, \"Down\");\n}\n\nstatic void click_config_provider(void *context) {\n  window_single_click_subscribe(BUTTON_ID_SELECT, select_click_handler);\n  window_single_click_subscribe(BUTTON_ID_UP, up_click_handler);\n  window_single_click_subscribe(BUTTON_ID_DOWN, down_click_handler);\n}\n\nstatic void window_load(Window *window) {\n  Layer *window_layer = window_get_root_layer(window);\n  GRect bounds = layer_get_bounds(window_layer);\n\n  text_layer = text_layer_create((GRect) { .origin = { 0, 72 }, .size = { bounds.size.w, 20 } });\n  text_layer_set_text(text_layer, \"Press a button\");\n  text_layer_set_text_alignment(text_layer, GTextAlignmentCenter);\n  layer_add_child(window_layer, text_layer_get_layer(text_layer));\n}\n\nstatic void window_unload(Window *window) {\n  text_layer_destroy(text_layer);\n}\n\nstatic void init(void) {\n  window = window_create();\n  window_set_click_config_provider(window, click_config_provider);\n  window_set_window_handlers(window, (WindowHandlers) {\n    .load = window_load,\n    .unload = window_unload,\n  });\n  const bool animated = true;\n  window_stack_push(window, animated);\n}\n\nstatic void deinit(void) {\n  window_destroy(window);\n}\n\nint main(void) {\n  init();\n\n  APP_LOG(APP_LOG_LEVEL_DEBUG, \"Done initializing, pushed window: %p\", window);\n\n  app_event_loop();\n  deinit();\n}\n\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "With that in place, test compilation to make sure all works as it should regarding button operation."
    },
    {
      "type": "paragraph",
      "text": "To extend this to interact with an Android app, we must first add in the <code>AppMessage</code> components from the <a title=\"Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS\" href=\"http://ninedof.wordpress.com/2014/02/02/pebble-sdk-2-0-tutorial-6-appmessage-for-pebblekit-js/\">AppMessage for PebbleKit JS</a> section. First, define the <code>in_received_handler()</code> where received <code>AppMessage</code>s will be interpreted as before:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"cpp\" -->\n<pre><div class=\"code-block\">\nstatic void in_received_handler(DictionaryIterator *iter, void *context) \n{\n   \n}\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "After this, register the handler and open <code>AppMessage</code> inside <code>init()</code>, before pushing the <code>Window</code>:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"cpp\" -->\n<pre><div class=\"code-block\">\n//Register AppMessage events\napp_message_register_inbox_received(in_received_handler);           \napp_message_open(512, 512);    //Large input and output buffer sizes\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Define globally the protocol we will use for communication using enumerations or by <code>#define</code>ing constants. I prefer <code>enum</code>s, but both will do the job. We will define a key representing a button event occurring, and further values to distinguish between the buttons themselves:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"cpp\" -->\n<pre><div class=\"code-block\">\nenum {\n  KEY_BUTTON_EVENT = 0,\n  BUTTON_EVENT_UP = 1,\n  BUTTON_EVENT_DOWN = 2,\n  BUTTON_EVENT_SELECT = 3\n};\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The next step is to create a function to send these keys and values, which will be exactly the same as that shown in 'AppMessage for PebbleKit JS', above the click handlers:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"cpp\" -->\n<pre><div class=\"code-block\">\nvoid send_int(uint8_t key, uint8_t cmd)\n{\n    DictionaryIterator *iter;\n    app_message_outbox_begin(&iter);\n     \n    Tuplet value = TupletInteger(key, cmd);\n    dict_write_tuplet(iter, &value);\n     \n    app_message_outbox_send();\n}\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Finally, add calls to <code>send_int()</code> to each of the three button click handlers to send a signal corresponding to which button was pressed. This should look like the code shown below:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"cpp\" -->\n<pre><div class=\"code-block\">\nstatic void select_click_handler(ClickRecognizerRef recognizer, void *context) {\n  text_layer_set_text(text_layer, \"Select\");\n  send_int(KEY_BUTTON_EVENT, BUTTON_EVENT_SELECT);\n}\n\nstatic void up_click_handler(ClickRecognizerRef recognizer, void *context) {\n  text_layer_set_text(text_layer, \"Up\");\n  send_int(KEY_BUTTON_EVENT, BUTTON_EVENT_UP);\n}\n\nstatic void down_click_handler(ClickRecognizerRef recognizer, void *context) {\n  text_layer_set_text(text_layer, \"Down\");\n  send_int(KEY_BUTTON_EVENT, BUTTON_EVENT_DOWN);\n}\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "After setting up the Android side, we will come back to the Pebble side to implement the reverse process; sending data to the watch from Android."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Android App Integration"
    },
    {
      "type": "paragraph",
      "text": "Set up a new Android project and make sure it runs correctly as just a blank <code>Activity</code>. Following the Android SDK plugin for Eclipse without modifying any of the settings except project location and name is a good starting point, which I will be using. After completing this process and removing the superfluous <code>onCreateOptionsMenu()</code>, my main <code>Activity</code> file looks like this:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"cpp\" -->\n<pre><div class=\"code-block\">\npackage com.wordpress.ninedof.pebblesdk2part8;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\npublic class MainActivity extends Activity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n  }\n\n}\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "In order to communicate with Pebble, you will need to import the PebbleKit project into Eclipse. Once this is done, add it as a Library by right clicking the Tutorial project and choosing 'Properties', then clicking 'Add' under the 'Android' section. Choose 'PEBBLE_KIT' and click OK, then OK again to close the 'Properties' dialogue."
    },
    {
      "type": "paragraph",
      "text": "So, let's make the two talk! As the messages will begin coming from the watch we must register a <code>BroadcastReceiver</code> to intercept the Pebble's <code>AppMessages</code>. This is done as shown below:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"java\" -->\n<pre><div class=\"code-block\">\nprivate PebbleDataReceiver mReceiver;\n\n... onCreate() here ...\n\n@Override\nprotected void onResume() {\n  super.onResume();\n\n  mReceiver = new PebbleDataReceiver(UUID.fromString(\"2fc99a5d-ee35-4057-aa9b-0d4dd8e35ef5\")) {\n\n    @Override\n    public void receiveData(Context context, int transactionId, PebbleDictionary data) {\n      \n    }\n\n  };\n\n  PebbleKit.registerReceivedDataHandler(this, mReceiver);\n}\n\n@Override\nprotected void onPause() {\n  super.onPause();\n  \n  unregisterReceiver(mReceiver);\n}\n</div></pre>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Be careful to note that the UUID specified in the constructor is the SAME UUID as specified in your corresponding watchapp's <code>appinfo.json</code>, or in Settings on CloudPebble. The two must match for correct communication! "
    },
    {
      "type": "paragraph",
      "text": "Next, define the exact same set of keys and values as on the Pebble side, as these are used to communicate:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"java\" -->\n<pre><div class=\"code-block\">\nprivate static final int\n  KEY_BUTTON_EVENT = 0,\n  BUTTON_EVENT_UP = 1,\n  BUTTON_EVENT_DOWN = 2,\n  BUTTON_EVENT_SELECT = 3;\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Now this is done we add logic to the overridden <code>receiveData()</code> method to determine which button press was encoded in the received message:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"java\" -->\n<pre><div class=\"code-block\">\n@Override\npublic void receiveData(Context context, int transactionId, PebbleDictionary data) {\n  //ACK the message\n  PebbleKit.sendAckToPebble(context, transactionId);\n\n  //Check the key exists\n  if(data.getUnsignedInteger(KEY_BUTTON_EVENT) != null) {\n    int button = data.getUnsignedInteger(KEY_BUTTON_EVENT).intValue();\n\n    switch(button) {\n    case BUTTON_EVENT_UP:\n      //The UP button was pressed\n      break;\n    case BUTTON_EVENT_DOWN:\n      //The DOWN button was pressed\n      break;\n    case BUTTON_EVENT_SELECT:\n      //The SELECT button was pressed\n      break;\n    }\n  }\n}\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The last step that completes this leg of the journey is to actually see which button was pressed on the Android display, akin to how it is on the Pebble. To do this, simply set the main <code>View</code> to a <code>TextView</code> in <code>onCreate</code>:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"java\" -->\n<pre><div class=\"code-block\">\nprivate TextView buttonView;\n\n...\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  \n  mButtonView = new TextView(this);\n  mButtonView.setText(\"No button yet!\");\n  \n  setContentView(mButtonView);\n}\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Finally, add calls to <code>TextView.setText()</code> in the <code>switch</code> statement within the <code>receiveData</code> method to show on the Android display which button was pressed:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"java\" -->\n<pre><div class=\"code-block\">\nswitch(button) {\ncase BUTTON_EVENT_UP:\n  //The UP button was pressed\n  mButtonView.setText(\"UP button pressed!\");\n  break;\ncase BUTTON_EVENT_DOWN:\n  //The DOWN button was pressed\n  mButtonView.setText(\"DOWN button pressed!\");\n  break;\ncase BUTTON_EVENT_SELECT:\n  //The SELECT button was pressed\n  mButtonView.setText(\"SELECT button pressed!\");\n  break;\n}\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Time to try it out! Compile and install the watchapp, run the Android project in Eclipse to install and launch on your phone, open the watchapp and press a button. You should see something like this:"
    },
    {
      "type": "paragraph",
      "text": "<a href=\"http://ninedof.files.wordpress.com/2014/04/pebble-screenshot_2014-04-04_00-05-49.png\">!<a class=\"link\" target=\"_blank\" href=\"http://ninedof.files.wordpress.com/2014/04/pebble-screenshot_2014-04-04_00-05-49.png\"></a></a>"
    },
    {
      "type": "paragraph",
      "text": "<a href=\"http://ninedof.files.wordpress.com/2014/04/screenshot_2014-04-04-00-04-54.png\">!<a class=\"link\" target=\"_blank\" href=\"http://ninedof.files.wordpress.com/2014/04/screenshot_2014-04-04-00-04-54.png?w=545\"></a></a>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Going The Other Way"
    },
    {
      "type": "paragraph",
      "text": "To send data back to Pebble, we will define a new key on both sides to trigger a vibration. Name this key <code>KEY_VIBRATION</code> and give it a value of <code>4</code>. With this done, modify the <code>receiveData()</code> method to send this message using a <code>PebbleDictionary</code> object after the <code>switch</code> statement like so:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"java\" -->\n<pre><div class=\"code-block\">\n//Make the watch vibrate\nPebbleDictionary dict = new PebbleDictionary();\ndict.addInt32(KEY_VIBRATION, 0);\nPebbleKit.sendDataToPebble(context, UUID.fromString(\"2fc99a5d-ee35-4057-aa9b-0d4dd8e35ef5\"), dict);\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Finally, return to CloudPebble and add the new key to the main <code>.c</code> file. Finally, add a call to <code>vibes_short_pulse()</code> in <code>in_received_handler()</code>:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"cpp\" -->\n<pre><div class=\"code-block\">\nenum {\n  KEY_BUTTON_EVENT = 0,\n  BUTTON_EVENT_UP = 1,\n  BUTTON_EVENT_DOWN = 2,\n  BUTTON_EVENT_SELECT = 3,\n  KEY_VIBRATION = 4\n};\n\n...\n\nstatic void in_received_handler(DictionaryIterator *iter, void *context) \n{\n  Tuple *t = dict_read_first(iter);\n  if(t)\n  {\n    vibes_short_pulse();\n  }\n}\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Recompile, install and launch BOTH the Pebble and Android apps, press a button and feel the communications flowing through to your wrist!"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Conclusions"
    },
    {
      "type": "paragraph",
      "text": "Another long post! For more information on diving deeper and to send more complex forms of data, check out the <code>AppMessage</code> <a title=\"AppMessage Documentation\" href=\"https://developer.getpebble.com/2/api-reference/group___app_message.html\">documentation</a>."
    },
    {
      "type": "paragraph",
      "text": "Source code is on GitHub for both the <a title=\"Pebble source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-8-watch\">Pebble</a> and <a title=\"Android source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-8-android\">Android</a> projects."
    }
  ]
}