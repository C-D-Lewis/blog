{
  "title": "A note on abstract methods",
  "fileName": "0041-A-note-on-abstract-methods.md",
  "dateTime": "2013-07-26 00:04:13",
  "tags": [
    "Java"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "In developing the GClient (detailed in the preceeding post), I discovered for myself that the method to be implemented for some interfaces and object types (such as <code>run()</code> in a Runnable object) are done by declaring them as 'abstract' methods. This means when a programmer creates a new instance of that object, the abstract method that needs to be implemented is shown to be 'filled up' with context specific code. Below is an example:"
    },
    {
      "type": "paragraph",
      "text": "This is an abstract method from my 'PythonConnection' class:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"java\" -->\n<pre><div class=\"code-block\">\n/**\n  * Implement this to act on data received\n  * @param data String containing the data received from the remote python host\n  */\n  public abstract void onReceive(String data);\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "When a new PythonConnection object is created, the opportunity to implement <code>onReceive()</code> is shown as below:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"java\" -->\n<pre><div class=\"code-block\">\nPythonConnection pyCon = new PythonConnection() {\n      @Override\n      public void onReceive(String data) {\n        //Put code to use the 'data' String here!\n        //Update UI, send a response etc...\n      }\n    };\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Where does the 'data' String come from, you ask? Well when the underlying Thread receives data from the BufferedReader, it calls <code>onReceive()</code>, supplying the String read from the Reader and continues listening once <code>onReceive()</code> returns. Here is where that occurs in a typical server (such as in the GClient):"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"java\" -->\n<pre><div class=\"code-block\">\n/**\n  * Start the receiving thread that will call onReceive() when it has data\n  */\n  private void startListening() {\n    receiveThread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        listening = true;\n        System.out.println(\"Ready to receive.\");\n        while(listening) {\n          try {\n            String packet = fromPython.readLine();\n            if(packet != null) {\n              onReceive(packet);\n            }\n          } catch (IOException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    });\n    receiveThread.start();\n  }\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Previously to get around this 'sending data across classes' problem (which got especially nasty when Threads came into it) I would either pass the object creating the abstract object or use some sort of 'shared static class', which wasn't ideal and generated problems of its own."
    },
    {
      "type": "paragraph",
      "text": "This is an example of one of the joys of exploring a language by using it! I foresee much use for this functionality."
    }
  ]
}